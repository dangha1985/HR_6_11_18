var AppFlowPermission = { ROLES_DATA: {}, Permissions: { 0: "NODATA", 1: "MYDATA", 2: "TEAMDATA", 3: "ALLDATA", 4: "SUBDATA" }, ICON_CLASS: { 0: "IC-per-my nodata", 1: "IC-per-my", 2: "IC-per-submy", 3: "IC-per-all", 4: "IC-per-sub" }, TableHead: { 0: "viewPermission", 1: "editPermission", 2: "createPermission", 3: "deletePermission" }, ROLE_HTML: '<tr><td><span class="tbllnk dvshwalert" onclick="AppFlowPermission.openFieldPerm(this)" id="rolename"></span><i class="IC-pen gry edtrole hide"></i></td><td class="text-center"><div class="selPerm" data-trigger="manual" data-placement="bottom" data-toggle="popover" onclick="AppFlowPermission.getPopOver(this)" istooltip="true" name="viewPermissions"><span class="" id="viewPerm"></span></div></td><td class="text-center"><div class="selPerm" data-trigger="manual" data-placement="bottom" data-toggle="popover" onclick="AppFlowPermission.getPopOver(this)" istooltip="true" name="editPermissions"><span class="" id="editPerm"></span></div></td><td class="text-center"><div class="selPerm" data-trigger="manual" data-placement="bottom" data-toggle="popover" onclick="AppFlowPermission.getPopOver(this)" istooltip="true" name="addPermissions"><span class="" id="addPerm"></span></div></td><td class="text-center"><div class="selPerm" data-trigger="manual" data-placement="bottom" data-toggle="popover" onclick="AppFlowPermission.getPopOver(this)" istooltip="true" name="deletePermissions"><span class="" id="deletePerm"></span></div></td><td class="text-center"><div class="selPerm fieldper" id="fieldperm" onclick="AppFlowPermission.openFieldPerm(this,true)"></div></td><td class="text-center"><div class="selPerm fieldex" onclick="AppFlowPermission.setActionPerm(this)" name="importset" id="importPerm"></div></td><td class="text-center"><div class="selPerm fieldex" onclick="AppFlowPermission.setActionPerm(this)" name="exportset" id="exportPerm"></div></td></tr>', POPOVERCONTENT: '<div class="dropfield"><ul class="step-nav"><li istooltip="true" class="0" onclick = "AppFlowPermission.setIndividualField(this)" value="0" title="' + ZPI18N.getString("zp.nodata") + '"><a class="IC-per-my nodata"></a></li><li  istooltip="true" class="1" onclick = "AppFlowPermission.setIndividualField(this)" value="1"  title="' + ZPI18N.getString("zp.mydata") + '"><a class="IC-per-my"></a></li><li  istooltip="true" class="4"  value="4" onclick = "AppFlowPermission.setIndividualField(this)" title="' + ZPI18N.getString("zp.subdata") + '"><a class="IC-per-sub"></a></li><li  istooltip="true" class="2"  value="2"  onclick = "AppFlowPermission.setIndividualField(this)" title="' + ZPI18N.getString("zp.teamdata") + '"><a class="IC-per-submy"></a></li><li  istooltip="true" class="3" value="3"  onclick = "AppFlowPermission.setIndividualField(this)" title="' + ZPI18N.getString("zp.alldata") + '"><a class="IC-per-all"></a></li></ul></div>', FIELDPERM_SEC_HTML: '<div class="panel-heading list-head active ZPbold"><div class="form-group MB0"><div class="checkbox checkbox-primary"><input type="checkbox" id="label_checkBox" isColapse="false" onchange="AppFlowPermission.toggleSectionSelect(this)" ><label></label></div> <div class="input-group DI" id="collapse" data-toggle="collapse" data-target=""><span id="sec_Name"></span></div></div><div class="dvswitch"><input id="cmn-toggle-0" checked class="cmn-toggle-small cmn-toggle-round-small" type="checkbox" onclick="AppFlowPermission.toggleSection(this)" isColapse="false"><label for="cmn-toggle-0" isColapse="false"></label></div></div>', FIELDPERM_FIELD_HTML: '<li class="list-group-item clearfix"><div class="col-md-4 PL0"><div class="checkbox checkbox-primary DI" id="fieldname"><input class="fieldinput" onchange="AppFlowPermission.toggleFieldSelect(this)" type="checkbox"/><label></label><em></em></div></div><div class="col-md-4 view"><div class="btn-group FL"><a class="selPerm dvShwperm" isview="true" istooltip="true" data-toggle="popover" data-trigger="manual" data-placement="bottom" onclick="AppFlowPermission.getPopOver(this,true)"> <span id="field_View_Perm" class=""></span></a></div></div><div class="col-md-4 edit"><div class="btn-group FL"> <a class="selPerm dvShwperm" data-toggle="popover" istooltip="true" isview="false" data-trigger="manual" data-placement="bottom" onclick="AppFlowPermission.getPopOver(this,true)"><span id="field_Edit_Perm" class=""></span></a> </div></div></li>', RESTRICTED_COLUMN_LIST: { P_Employee: ["EMPLOYEEPHOTO"], P_EmployeeLeave: ["EMPLOYEEID", "LEAVE_TYPE", "FROM", "TO", "DAYSTAKEN", "CERTIFICATE"], P_Goals: ["USERRATING", "MANAGERRATING", "ASSIGNBY", "ASSIGNTO", "GOAL", "DUEDATE"], P_SelfAppraisal: ["CONFIGURATIONID"], P_PerformanceAppraisal: ["CONFIGURATIONID", "APPRAISER", "USERERECNO"], P_TimesheetJob: ["JOBNAME", "JOBSLISTID", "ASSIGNEES", "ISCOMPLETED", "JOBOWNER", "DURATION"], P_TimesheetJobsList: ["CLIENTID", "JOBSLISTNAME", "STATUS", "PROJECTOWNER", "PROJECTMANAGER", "PROJECTUSERS"], P_Task: ["NAME", "DESCRIPTION", "STARTDATE", "ENDDATE", "ASSIGNEDTO", "COMPLETEDON", "COMPLETEDBY", "STATUS", "PRIORITY", "REMINDERTIME"] }, LOADING_HTML: '<div class="ctable ZPTscrlcont" id="zp_page_loading" style="display: block;"><div class="ctcell"><div class="loader-inner line-scale"><div></div><div></div><div></div><div></div><div></div></div></div></div>', NODATA: 0, MYDATA: 1, SUBDATA: 4, TEAMDATA: 2, ALLDATA: 3, ISMSGRFORM: !1, url: "formPermissions.zp", TITLE: { 0: ZPI18N.getString("zp.nodata"), 1: ZPI18N.getString("zp.mydata"), 2: ZPI18N.getString("zp.teamdata"), 3: ZPI18N.getString("zp.alldata"), 4: ZPI18N.getString("zp.subdata") }, init: function () { var url = window.location.href.split("/zp").pop(), formId = "", spliturl = url.split("-"), headername = spliturl[1].split(":"); formId = "formid" == headername[0] ? headername[1] : ZPUtil.Form_Link_Names.getFormLinkName(headername[1], !1), AppFlowPermission.formId = formId; var params = { formId: formId, mode: "appFlowPerm" }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.constructPermPage) }, constructPermPage: function (data, params) { var roleidlist = data.roleConfigList; AppFlowPermission.ISMSGRFORM = data.isLookupEnabled, AppFlowPermission.formtablename = data.formtableName, Layout.Page.container.find("#appNameSpan").html(data.formname), Layout.Page.container.find("#appflowrolesrow").empty(); for (var nonPermRoleOptions = "", i = 0; i < roleidlist.length; i++) { var roleidarray = roleidlist[i]; if (!roleidarray.isAdmin && !roleidarray.isProfile) { if (0 == roleidarray.viewPermission && 0 == roleidarray.editPermission && 0 == roleidarray.createPermission && 0 == roleidarray.deletePermission && !roleidarray.Import && !roleidarray.Export) { nonPermRoleOptions += '<option value="' + roleidarray.roleId + '">' + roleidarray.roleName + "</option>"; continue } var rolenamehtml = $(AppFlowPermission.ROLE_HTML); rolenamehtml.find("#rolename").attr("roleId", roleidarray.roleId), rolenamehtml.find("#rolename").html(roleidarray.roleName), rolenamehtml.find("#fieldperm").attr("roleId", roleidarray.roleId), rolenamehtml.find("#viewPerm").addClass(AppFlowPermission.ICON_CLASS[roleidarray.viewPermission]), rolenamehtml.find("#viewPerm").parent().attr({ perm: roleidarray.viewPermission, title: AppFlowPermission.TITLE[roleidarray.viewPermission] }), rolenamehtml.find("#editPerm").addClass(AppFlowPermission.ICON_CLASS[roleidarray.editPermission]), rolenamehtml.find("#editPerm").parent().attr({ perm: roleidarray.editPermission, title: AppFlowPermission.TITLE[roleidarray.editPermission] }), rolenamehtml.find("#addPerm").addClass(AppFlowPermission.ICON_CLASS[roleidarray.createPermission]), rolenamehtml.find("#addPerm").parent().attr({ perm: roleidarray.createPermission, title: AppFlowPermission.TITLE[roleidarray.createPermission] }), rolenamehtml.find("#deletePerm").addClass(AppFlowPermission.ICON_CLASS[roleidarray.deletePermission]), rolenamehtml.find("#deletePerm").parent().attr({ perm: roleidarray.deletePermission, title: AppFlowPermission.TITLE[roleidarray.deletePermission] }), rolenamehtml.find("#importPerm").attr("perm", roleidarray.Import), rolenamehtml.find("#exportPerm").attr("perm", roleidarray.Import), roleidarray.Import && (rolenamehtml.find("#importPerm").removeClass("fieldex"), rolenamehtml.find("#importPerm").addClass("fieldim")), roleidarray.Export && (rolenamehtml.find("#exportPerm").removeClass("fieldex"), rolenamehtml.find("#exportPerm").addClass("fieldim")), Layout.Page.container.find("#appflowrolesrow").append(rolenamehtml) } } 0 == Layout.Page.container.find("#appflowrolesrow").children().length && (Layout.Page.container.find("#roleEmpty_formroleList_selectBox").html(nonPermRoleOptions), Layout.Page.container.find("#roleEmpty_formroleList_selectBox").select2(), Layout.Page.container.find("#norolePerm").show()), nonPermRoleOptions.length > 0 && 0 != Layout.Page.container.find("#appflowrolesrow").children().length && (Layout.Page.container.find("#setPermforNoPermRole").find("select").html(nonPermRoleOptions), Layout.Page.container.find("#setPermforNoPermRole").find("select").select2(), Layout.Page.container.find("#addNewRolePerm").show(), Layout.Page.container.find("#addNewRolePermSelect_add_Box").hide(), Layout.Page.container.find("#setPermforNoPermRole").removeClass("hide")), Layout.Page.container.find('[istooltip="true"]').tooltip({ title: function () { return $(this).attr("title") }, placement: "top", trigger: "hover" }), Layout.Page.container.find("#setPermissionsButton").hide() }, getPopOver: function (ele, isFormfield) { isFormfield ? ($(ele).popover({ html: !0, content: function () { var html = $(AppFlowPermission.POPOVERCONTENT); return html.find(".active").removeClass("active"), html.find("." + $(ele).attr("value")).addClass("active"), html } }), Layout.Page.container.find(".dvShwperm").not($(ele)).popover("hide"), $(ele).popover("toggle")) : ($(ele).popover({ html: !0, content: function () { var html = $(AppFlowPermission.POPOVERCONTENT); return html.find("li").attr("onclick", "AppFlowPermission.setRecordPermCheck(this)"), html.find(".active").removeClass("active"), html.find("." + $(ele).attr("perm")).addClass("active"), html } }), Layout.Page.container.find(".selPerm").not($(ele)).popover("hide"), $(ele).popover("toggle")), Layout.Page.container.find('[istooltip="true"]').tooltip({ title: function () { return $(this).attr("title") }, placement: "top", trigger: "hover" }) }, setRecordPermCheck: function (ele) { if (!$(ele).hasClass("active")) { Layout.Page.container.find(".selPerm").popover("hide"); var actele = $(ele).closest('[id^="popover"]').siblings(), val = AppFlowPermission.VAL = $(ele).attr("value"), prev = actele.attr("perm"), type = actele.attr("name"), tabname = AppFlowPermission.formtablename; if ("viewPermissions" == type && (val == AppFlowPermission.NODATA || (val == AppFlowPermission.MYDATA || val == AppFlowPermission.SUBDATA) && prev != AppFlowPermission.NODATA || val == AppFlowPermission.TEAMDATA && prev == AppFlowPermission.ALLDATA)) { var ePerm = actele.closest("tr").find('[name="editPermissions"]').attr("perm"), dPerm = actele.closest("tr").find('[name="deletePermissions"]').attr("perm"); if (val == AppFlowPermission.NODATA && (val != ePerm || val != dPerm) || !AppFlowPermission.validateSetPermission(val, ePerm) || !AppFlowPermission.validateSetPermission(val, dPerm)) return void ZPeople.confirm(actele, "", "zp.updateViewPermissionDesc", AppFlowPermission.setRecordPerm) } if ("addPermissions" == type && !AppFlowPermission.ISMSGRFORM && val > AppFlowPermission.MYDATA && "P_TimesheetJob" != tabname && "P_TimesheetJobsList" != tabname && "P_Goals" != tabname) return void ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.addContradict")); if ("editPermissions" == type || "deletePermissions" == type) { var vPerm = actele.closest("tr").find('[name="viewPermissions"]').attr("perm"); if (!AppFlowPermission.validateSetPermission(vPerm, val)) return void ("editPermissions" == type ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.RecordViewEditContradict")) : ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.RecordViewDeleteContradict"))) } this.setRecordPerm(actele) } }, setRecordPerm: function (ele) { var params = { formId: AppFlowPermission.formId, roleId: $(ele).closest("tr").find("#rolename").attr("roleid"), typePerm: ele.attr("name"), valPerm: AppFlowPermission.VAL, mode: "fperm.rperm" }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.handleRecordPerm, $(ele).closest("tr")) }, validateSetPermission: function (first_limit, val) { return val == AppFlowPermission.NODATA ? !0 : first_limit == AppFlowPermission.NODATA || first_limit == AppFlowPermission.SUBDATA && val != AppFlowPermission.SUBDATA && val != AppFlowPermission.NODATA || val == AppFlowPermission.SUBDATA && first_limit == AppFlowPermission.MYDATA || val != AppFlowPermission.SUBDATA && first_limit != AppFlowPermission.SUBDATA && val > first_limit ? !1 : !0 }, handleRecordPerm: function (data, params, ele) { data.isSuccess ? (ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.recordPermssionsSuccess")), ele.find('[name="viewPermissions"]').attr("data-original-title", AppFlowPermission.TITLE[data.viewPermission]).attr("perm", data.viewPermission).find("span").attr("class", AppFlowPermission.ICON_CLASS[data.viewPermission]), ele.find('[name="editPermissions"]').attr("data-original-title", AppFlowPermission.TITLE[data.editPermission]).attr("perm", data.editPermission).find("span").attr("class", AppFlowPermission.ICON_CLASS[data.editPermission]), ele.find('[name="addPermissions"]').attr("data-original-title", AppFlowPermission.TITLE[data.createPermission]).attr("perm", data.createPermission).find("span").attr("class", AppFlowPermission.ICON_CLASS[data.createPermission]), ele.find('[name="deletePermissions"]').attr("data-original-title", AppFlowPermission.TITLE[data.deletePermission]).attr("perm", data.deletePermission).find("span").attr("class", AppFlowPermission.ICON_CLASS[data.deletePermission])) : (Layout.Page.container.find("#ZP-PermissionsSlider").modal("hide"), ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror"))) }, setActionPerm: function (ele) { var valPerm = "true" != $(ele).attr("perm"), params = { roleId: $(ele).closest("tr").find("#rolename").attr("roleid"), formId: AppFlowPermission.formId, mode: "fperm.aperm", type: $(ele).attr("name"), valPerm: valPerm }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.handleActionPerm, ele) }, handleActionPerm: function (data, params, ele) { if ("success" == data.status) { var valPerm = params.valPerm; $(ele).attr("perm", valPerm), ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.actionPermssionsSuccess")), valPerm ? $(ele).removeClass("fieldex").addClass("fieldim") : $(ele).removeClass("fieldim").addClass("fieldex") } else Layout.Page.container.find("#ZP-PermissionsSlider").modal("hide"), ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")) }, openFieldPerm: function (obj) { var roleId = $(obj).attr("roleId"), params = { formId: AppFlowPermission.formId, mode: "appFlowPermwithfields", roleId: roleId }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.constructfieldPermPage), Layout.Page.container.find("#setPermforNoPermRole").addClass("hide"), $(".dvflow_str").addClass("open"), $(".dvflow_str").removeClass("min"), $(".dvsetpermission").show(), $(".tblpermission").hide() }, constructfieldPermPage: function (data, params) { var rolepermlist = data.rolepermlist; if (!rolepermlist.isSuccess) return void ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")); for (var rolelist = rolepermlist.roleConfigList, rolenamehtml = '<li class="" onclick="AppFlowPermission.backtoRecordPerm()"><a>All</a></li>', i = 0; i < rolelist.length; i++) { var rolenames = rolelist[i]; rolenames.isAdmin || rolenames.isProfile || (params.roleId == rolenames.roleId ? (rolenamehtml += '<li onclick="AppFlowPermission.openFieldPerm(this)" roleid="' + rolenames.roleId + '" value="' + rolenames.roleId + '" class="sel"><a>' + rolenames.roleName + "</a></li>", Layout.Page.container.find("#rec_View_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_Edit_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_Add_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_Del_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_View_Perm").find("li[value=" + rolenames.viewPermission + "]").addClass("active").attr("isActive", "true"), Layout.Page.container.find("#rec_Edit_Perm").find("li[value=" + rolenames.editPermission + "]").addClass("active").attr("isActive", "true"), Layout.Page.container.find("#rec_Add_Perm").find("li[value=" + rolenames.createPermission + "]").addClass("active").attr("isActive", "true"), Layout.Page.container.find("#rec_Del_Perm").find("li[value=" + rolenames.deletePermission + "]").addClass("active").attr("isActive", "true")) : rolenamehtml += '<li onclick="AppFlowPermission.openFieldPerm(this)" roleid="' + rolenames.roleId + '" value="' + rolenames.roleId + '"><a>' + rolenames.roleName + "</a></li>") } Layout.Page.container.find("#ls_roleidlist").html(rolenamehtml).delay(1800); var fieldPermlist = data.fieldpermlist, secList = fieldPermlist.sectionsList, lookupFcId = fieldPermlist.lookupFcId; AppFlowPermission.VIEWPERM = fieldPermlist.recordPermission.viewPermission, AppFlowPermission.EDITPERM = fieldPermlist.recordPermission.editPermission, AppFlowPermission.ADDPERM = fieldPermlist.recordPermission.createPermission, Layout.Page.container.find("#field_Perm_list").empty(); for (var j = 0; j < secList.length; j++) { var sec_perm_html = jQuery("<div />", { "class": "clearfix" }), secDet = secList[j], secDethtml = $(AppFlowPermission.FIELDPERM_SEC_HTML); secDethtml.attr("id", "fieldpermissions_sectionid-" + secDet.sectionID), secDethtml.find("#sec_Name").html(secDet.sectionName), secDethtml.find("#sec_Name").attr("secid", secDet.sectionID), secDethtml.find("#collapse").attr("data-target", "#lstsec" + secDet.sectionID), secDet.secEnabled || (secDethtml.addClass("disabled"), secDethtml.find("#cmn-toggle-0").removeAttr("checked")), secDethtml.find("#cmn-toggle-0").parent().find("label").attr("for", "toggle" + secDet.sectionID), secDethtml.find("#cmn-toggle-0").attr("id", "toggle" + secDet.sectionID), sec_perm_html.append(secDethtml); for (var headId_html = jQuery("<ul />", { id: "lstsec" + secDet.sectionID, "class": "list-group BL0 collapse", "aria-expanded": "false" }), fieldDet = secDet.fcList, k = 0; k < fieldDet.length; k++) { var fieldDetails = fieldDet[k], Fielhtml = $(AppFlowPermission.FIELDPERM_FIELD_HTML); Fielhtml.attr({ fcid: fieldDetails.fcId, colName: fieldDetails.colName, compType: fieldDetails.compType }), Fielhtml.find(".fieldinput").attr("value", fieldDetails.fcId), Fielhtml.find("#fieldname").find("em").append(fieldDetails.dispName), Fielhtml.find("#field_View_Perm").parent().attr({ value: fieldDetails.vPerm, title: AppFlowPermission.TITLE[fieldDetails.vPerm] }), Fielhtml.find("#field_Edit_Perm").parent().attr({ value: fieldDetails.wPerm, title: AppFlowPermission.TITLE[fieldDetails.wPerm] }), Fielhtml.find("#field_View_Perm").addClass(AppFlowPermission.ICON_CLASS[fieldDetails.vPerm]), Fielhtml.find("#field_Edit_Perm").addClass(AppFlowPermission.ICON_CLASS[fieldDetails.wPerm]), (15 == fieldDetails.compType || 30 == fieldDetails.compType) && Fielhtml.find(".edit").find("a").addClass("disabled"), lookupFcId == fieldDetails.fcId || AppFlowPermission.RESTRICTED_COLUMN_LIST.hasOwnProperty(AppFlowPermission.formtablename) && ZPUtil.checkIsExistInArray(AppFlowPermission.RESTRICTED_COLUMN_LIST[AppFlowPermission.formtablename], fieldDetails.colName) ? (Fielhtml.find(".view").find("a").addClass("disabled"), Fielhtml.find(".edit").find("a").addClass("disabled"), Fielhtml.find("#fieldname").find("input").addClass("disabled"), lookupFcId == fieldDetails.fcId && Fielhtml.attr("isPrim", !0), Fielhtml.attr("isDisp", !1)) : ("P_Goals" == AppFlowPermission.formtablename && Fielhtml.find(".view").find("a").addClass("disabled"), Fielhtml.attr("isDisp", !0)), secDet.secEnabled || Fielhtml.addClass("disabled"), headId_html.append(Fielhtml) } sec_perm_html.append(headId_html), Layout.Page.container.find("#field_Perm_list").append(sec_perm_html), 0 == j && Layout.Page.container.find("#lstsec" + secDet.sectionID).addClass("collapse in") } Layout.Page.container.find('[id^="fieldpermissions_sectionid-"]').click(function (e) { "false" != $(e.target).attr("iscolapse") && (void 0 != $(e.target).attr("id") && 0 == $(e.target).attr("id").indexOf("fieldpermissions_sectionid-") ? $(e.target).siblings().collapse("toggle") : $(e.target).closest('[id^="fieldpermissions_sectionid-"]').siblings().collapse("toggle")) }), Layout.Page.container.find('[istooltip="true"]').tooltip({ title: function () { return $(this).attr("title") }, placement: "top", trigger: "hover" }) }, changeRecordPerm: function (ele) { if (!$(ele).hasClass("active")) { var val = AppFlowPermission.VAL = Layout.Page.container.find(ele).attr("value"), prev = Layout.Page.container.find(ele).parent().find('li[isActive^="true"]').val(), type = Layout.Page.container.find(ele).parent().attr("name"), tabname = AppFlowPermission.formtablename; if ("viewPermissions" == type && (val == AppFlowPermission.NODATA || (val == AppFlowPermission.MYDATA || val == AppFlowPermission.SUBDATA) && prev != AppFlowPermission.NODATA || val == AppFlowPermission.TEAMDATA && prev == AppFlowPermission.ALLDATA)) { var ePerm = Layout.Page.container.find("#rec_Edit_Perm").find('li[isActive^="true"]').val(), dPerm = Layout.Page.container.find("#rec_Del_Perm").find('li[isActive^="true"]').val(); if (val == AppFlowPermission.NODATA && (val != ePerm || val != dPerm) || !AppFlowPermission.validateSetPermission(val, ePerm) || !AppFlowPermission.validateSetPermission(val, dPerm)) return void ZPeople.confirm(ele, "", "zp.updateViewPermissionDesc", AppFlowPermission.setRecordPermForFieldPage) } if ("addPermissions" == type && !AppFlowPermission.ISMSGRFORM && val > AppFlowPermission.MYDATA && "P_TimesheetJob" != tabname && "P_TimesheetJobsList" != tabname && "P_Goals" != tabname) return void ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.addContradict")); if ("editPermissions" == type || "deletePermissions" == type) { var vPerm = Layout.Page.container.find("#rec_View_Perm").find('li[isActive^="true"]').val(); if (!AppFlowPermission.validateSetPermission(vPerm, val)) return void ("editPermissions" == type ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.RecordViewEditContradict")) : ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.RecordViewDeleteContradict"))) } this.setRecordPermForFieldPage(ele) } }, setRecordPermForFieldPage: function (ele) { var valPerm = $(ele).attr("value"), params = { roleId: Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').attr("value"), formId: AppFlowPermission.formId, mode: "fperm.rperm", typePerm: $(ele).parent().attr("name"), valPerm: valPerm }; params.conreqcsr = csrfToken, $.post(AppFlowPermission.url, params, function (data) { data.isSuccess ? (AppFlowPermission.VIEWPERM = data.viewPermission, AppFlowPermission.EDITPERM = data.editPermission, AppFlowPermission.ADDPERM = data.createPermission, ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.recordPermssionsSuccess")), Layout.Page.container.find("#rec_View_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_View_Perm").find("li[value=" + data.viewPermission + "]").addClass("active").attr("isActive", "true"), Layout.Page.container.find("#rec_Edit_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_Edit_Perm").find("li[value=" + data.editPermission + "]").addClass("active").attr("isActive", "true"), Layout.Page.container.find("#rec_Add_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_Add_Perm").find("li[value=" + data.createPermission + "]").addClass("active").attr("isActive", "true"), Layout.Page.container.find("#rec_Del_Perm").find('li[isActive^="true"]').removeClass("active").removeAttr("isActive"), Layout.Page.container.find("#rec_Del_Perm").find("li[value=" + data.deletePermission + "]").addClass("active").attr("isActive", "true")) : ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")) }) }, toggleSection: function (ele) { if (AppFlowPermission.VIEWPERM == AppFlowPermission.NODATA && ele.checked) ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.NoRecordPermission", [Layout.Page.container.find("#formname").text(), Layout.Page.container.find("#ls_roleidlist").find("li[class='sel']").find("a").text()])), $(ele).prop("checked", !ele.checked); else { var id = ele.id.substring(6), set = $(ele).closest('[id^="fieldpermissions_sectionid-"]').siblings("ul"), isPrim = set.find('li[isPrim="true"]').length > 0, isDisp = set.find('li[isDisp="false"]').length > 0; if ((isPrim || isDisp) && !ele.checked) return isPrim ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.sectionContainsPrimaryLookup")) : ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.canNotDisableSection")), void $(ele).prop("checked", !0); var params = { roleId: Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').attr("value"), formId: AppFlowPermission.formId, mode: "fperm.fieldperm.section", sectId: id, enable: ele.checked }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.handleToggleSection) } }, handleToggleSection: function (data, params) { if (data.isSuccess) { for (var vperm = data.vPerm, wperm = data.wPerm, section = Layout.Page.container.find("#fieldpermissions_sectionid-" + params.sectId), li = section.siblings("ul").children("li").not(section.siblings("ul").children('li[isPrim="true"]')), prim = section.siblings("ul").children('li[isPrim="true"]'), i = 0; i < li.length; i++) $(li[i]).children(".view").find(".dvShwperm").attr("value", vperm).attr("title", AppFlowPermission.TITLE[vperm]), $(li[i]).children(".view").find("span").attr("class", AppFlowPermission.ICON_CLASS[vperm]), $(li[i]).children(".edit").find(".dvShwperm").attr("value", wperm).attr("title", AppFlowPermission.TITLE[wperm]), $(li[i]).children(".edit").find("span").attr("class", AppFlowPermission.ICON_CLASS[wperm]); section.toggleClass("disabled"), section.siblings("ul").children("li").toggleClass("disabled"), section.children().find("#label_checkBox").attr("disabled", !params.enable), params.enable && prim.length > 0 && ($(prim).children(".view").find(".dvShwperm").attr("value", AppFlowPermission.VIEWPERM).attr("title", AppFlowPermission.TITLE[AppFlowPermission.VIEWPERM]), $(prim).children(".view").find("span").attr("class", AppFlowPermission.ICON_CLASS[AppFlowPermission.VIEWPERM]), $(prim).children(".edit").find(".dvShwperm").attr("value", AppFlowPermission.EDITPERM).attr("title", AppFlowPermission.TITLE[AppFlowPermission.EDITPERM]), $(prim).children(".edit").find("span").attr("class", AppFlowPermission.ICON_CLASS[AppFlowPermission.EDITPERM])) } else data.isPrimaryLookup ? (Layout.Page.container.find("#toggle" + params.sectId).prop("checked", !0), ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.sectionContainsPrimaryLookup"))) : (Layout.Page.container.find("#ZP-PermissionsSlider").modal("hide"), ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror"))) }, setIndividualField: function (ele) { if (!$(ele).hasClass("active")) { var val = $(ele).attr("value"), addperneed = !1, actualele = $(ele).closest('[id^="popover"]').siblings(), isView = "true" == actualele.attr("isview"), fcId = actualele.closest("li").attr("fcid"), first_limit = isView ? AppFlowPermission.VIEWPERM : actualele.closest("li").find("[isview='true']").attr("value"), isValid = !1; if (isView || (isValid = AppFlowPermission.validateEditPermission(val)), !isValid) { if (!isView && AppFlowPermission.validateSetPermission(AppFlowPermission.ADDPERM, AppFlowPermission.EDITPERM) && (first_limit = AppFlowPermission.ADDPERM, addperneed = !0), !AppFlowPermission.validateSetPermission(first_limit, val)) { var key = "zp.FieldViewContradict"; return isView || (key = "zp.FieldEditViewContradict", addperneed && (key = "zp.FieldEditAddContradict")), void ZPeople.Message.showWarningMsg(ZPI18N.getString(key, [AppFlowPermission.TITLE[val], AppFlowPermission.TITLE[first_limit]])) } if (first_limit = AppFlowPermission.EDITPERM, !isView && !AppFlowPermission.validateSetPermission(first_limit, val) && !AppFlowPermission.validateSetPermission(AppFlowPermission.ADDPERM, val)) return void ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.FieldEditContradict", [AppFlowPermission.TITLE[val], AppFlowPermission.TITLE[first_limit]])) } var params = { roleId: Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').attr("value"), formId: AppFlowPermission.formId, mode: "fperm.fieldperm.single", fcId: fcId, valPerm: val, isView: isView }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.handleIndividualField) } }, handleIndividualField: function (data, params) { if (data.isSuccess) { var cls = ""; (15 == data.compType || 30 == data.compType || data.lookupFcId == data.fcId) && (cls = "disabled"), "P_Goals" != AppFlowPermission.formtablename && Layout.Page.container.find("li[fcid='" + params.fcId + "']").find(".view").empty().append(jQuery("<div />", { "class": "btn-group FL" }).append(jQuery("<a />", { value: data.vPerm, isView: !0, istooltip: "true", "data-trigger": "manual", "class": " ZPtitle selPerm dvShwperm", "data-toggle": "popover", "data-placement": "bottom", onclick: "AppFlowPermission.getPopOver(this,true)", title: AppFlowPermission.TITLE[data.vPerm], isfldtitle: "true" }).append(jQuery("<span />", { "class": AppFlowPermission.ICON_CLASS[data.vPerm] })))), Layout.Page.container.find("li[fcid='" + params.fcId + "']").find(".edit").empty().append(jQuery("<div />", { "class": "btn-group FL" }).append(jQuery("<a />", { value: data.ePerm, isView: !1, istooltip: "true", "data-trigger": "manual", "class": "ZPtitle selPerm dvShwperm " + cls, "data-toggle": "popover", "data-placement": "bottom", onclick: "AppFlowPermission.getPopOver(this,true)", title: AppFlowPermission.TITLE[data.ePerm], isfldtitle: "true" }).append(jQuery("<span />", { "class": AppFlowPermission.ICON_CLASS[data.ePerm] })))), ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.fieldPermssionsSuccess")) } else data.isPrimLookup ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.PrimaryLookuPermissionChange")) : ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")); Layout.Page.container.find('[istooltip="true"]').tooltip({ title: function () { return $(this).attr("title") }, placement: "top", trigger: "hover" }) }, validateEditPermission: function (val, radd, redit) { var rAdd = void 0 == radd ? AppFlowPermission.ADDPERM : radd, rEdit = void 0 == redit ? AppFlowPermission.EDITPERM : redit; return (rAdd == AppFlowPermission.SUBDATA && rEdit == AppFlowPermission.MYDATA || rAdd == AppFlowPermission.MYDATA && rEdit == AppFlowPermission.SUBDATA) && val == rAdd ? !0 : !1 }, backtoRecordPerm: function () { AppFlowPermission.init(), $(".dvflow_str").removeClass("open"), $(".dvflow_str").addClass("min"), $(".dvsetpermission").hide(), $(".tblpermission").show() }, optionValueShow: function (ele) { "roleEmpty_addNewRolePerm" == $(ele).attr("id") ? (Layout.Page.container.find("#roleEmpty_formroleList_selectBox").select2(), Layout.Page.container.find("#roleEmpty_addNewRolePerm").hide(), Layout.Page.container.find("#roleEmpty_formroleList").show()) : (Layout.Page.container.find("#addNewRolePermSelect_add_Box").show(), Layout.Page.container.find("#addNewRolePerm").hide()) }, nonPermRoleAdd: function (ele) { if ("roleEmpty_formroleList" == $(ele).parent().attr("id")) { var roleId = Layout.Page.container.find("#roleEmpty_formroleList_selectBox").val(), roleName = Layout.Page.container.find("#roleEmpty_formroleList_selectBox").find('option[value="' + roleId + '"]').text(); Layout.Page.container.find("#addNewRolePermSelectBox").find("select").empty().append(Layout.Page.container.find("#roleEmpty_formroleList_selectBox").children()).val(roleId), Layout.Page.container.find("#setPermforNoPermRole").removeClass("hide"), Layout.Page.container.find("#addNewRolePerm").hide(), Layout.Page.container.find("#norolePerm").hide() } else var roleId = Layout.Page.container.find("#addNewRolePermSelectBox").find("select").val(), roleName = Layout.Page.container.find("#addNewRolePermSelectBox").find("select").find('option[value="' + roleId + '"]').text(); var rolenamehtml = $(AppFlowPermission.ROLE_HTML); rolenamehtml.addClass("rowhglight"), rolenamehtml.find("#rolename").attr("roleId", roleId), rolenamehtml.find("#rolename").text(roleName), rolenamehtml.find("#fieldperm").attr("roleId", roleId), rolenamehtml.find("#viewPerm").addClass(AppFlowPermission.ICON_CLASS[0]), rolenamehtml.find("#viewPerm").parent().attr({ perm: 0, title: AppFlowPermission.TITLE[0] }), rolenamehtml.find("#editPerm").addClass(AppFlowPermission.ICON_CLASS[0]), rolenamehtml.find("#editPerm").parent().attr({ perm: 0, title: AppFlowPermission.TITLE[0] }), rolenamehtml.find("#addPerm").addClass(AppFlowPermission.ICON_CLASS[0]), rolenamehtml.find("#addPerm").parent().attr({ perm: 0, title: AppFlowPermission.TITLE[0] }), rolenamehtml.find("#deletePerm").addClass(AppFlowPermission.ICON_CLASS[0]), rolenamehtml.find("#deletePerm").parent().attr({ perm: 0, title: AppFlowPermission.TITLE[0] }), rolenamehtml.find("#importPerm").attr("perm", !1), rolenamehtml.find("#exportPerm").attr("perm", !1), Layout.Page.container.find("#appflowrolesrow").append(rolenamehtml), Layout.Page.container.find("#addNewRolePermSelectBox select option:selected").remove(), Layout.Page.container.find("#addNewRolePermSelectBox").find("select").select2(), 0 == Layout.Page.container.find("#addNewRolePermSelectBox select option").length && Layout.Page.container.find("#setPermforNoPermRole").addClass("hide"), setTimeout(function () { Layout.Page.container.find(".rowhglight").removeClass("rowhglight") }, 2200) }, toggleSectionSelect: function (ele) { var isChecked = ele.checked, fields = $(ele).closest('[id^="fieldpermissions_sectionid-"]').siblings("ul").children('li[isDisp="true"]').find("input.fieldinput"); for (i = 0; i <= fields.length; i++) $(fields[i]).prop("checked", isChecked); AppFlowPermission.togglePermissionsButton() }, togglePermissionsButton: function () { var count = Layout.Page.container.find("#field_Perm_list").find(".fieldinput:checked").length; count > 0 ? Layout.Page.container.find("#setPermissionsButton").show() : Layout.Page.container.find("#setPermissionsButton").hide() }, selectedFieldTags: function () { Layout.Page.container.find("#innerSliderPermissionsView li").removeClass("disabled"), "P_Goals" == AppFlowPermission.formtablename ? (Layout.Page.container.find("#innerSliderPermissionsView li").addClass("disabled"), Layout.Page.container.find("#innerSliderPermissionsView li").prop("onclick", null).off("click")) : Layout.Page.container.find("#innerSliderPermissionsView li").click(function () { AppFlowPermission.markThisActive(this) }), Layout.Page.container.find("#bulkPermissionsSelectedFields").empty(); var lis = Layout.Page.container.find("#field_Perm_list").children(), roleName = (Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').attr("value"), Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').find("a").text()); for (Layout.Page.container.find("#bulkPermRoleName").text(roleName), li = 0; li < lis.length; li++) { var slected = $(lis[li]).find(".fieldinput:checked"); if (slected.length > 0) { var div = jQuery("<div />", { "class": "clearfix" }); for (div.append(jQuery("<p />").append($(lis[li]).find("#sec_Name").html())), j = 0; j < slected.length; j++) div.append(jQuery("<span />", { "class": "spntag" }).append($(slected[j]).siblings("em").html()).append(jQuery("<i />", { "class": "IC-cls-1px", value: $(slected[j]).attr("value"), onclick: "AppFlowPermission.removeThisTag(this)" }))); Layout.Page.container.find("#bulkPermissionsSelectedFields").append(div) } } }, markThisActive: function (ele) { var addperneed = !1, val = $(ele).attr("value"), first_limit = AppFlowPermission.VIEWPERM, isView = !0, isValid = !1; if ("innerSliderPermissionsEdit" == $(ele).parent().attr("id")) { isView = !1; var ele1 = Layout.Page.container.find("#innerSliderPermissionsView .active"); AppFlowPermission.validateSetPermission(AppFlowPermission.ADDPERM, AppFlowPermission.EDITPERM) ? (first_limit = AppFlowPermission.ADDPERM, addperneed = !0) : ele1.length > 0 && (first_limit = Layout.Page.container.find("#innerSliderPermissionsView .active").attr("value")) } if (isView || (isValid = AppFlowPermission.validateEditPermission(val)), !isValid) { if (!isView && AppFlowPermission.validateSetPermission(AppFlowPermission.ADDPERM, AppFlowPermission.EDITPERM)) { first_limit = AppFlowPermission.ADDPERM; var addperneed = !0 } if (!AppFlowPermission.validateSetPermission(first_limit, val)) { var key = "zp.FieldViewContradict"; return isView || (key = "zp.FieldEditViewContradict", addperneed && (key = "zp.FieldEditAddContradict")), void ZPeople.Message.showWarningMsg(ZPI18N.getString(key, [AppFlowPermission.TITLE[val], AppFlowPermission.TITLE[first_limit]])) } if (first_limit = AppFlowPermission.EDITPERM, !isView && !AppFlowPermission.validateSetPermission(first_limit, val) && !AppFlowPermission.validateSetPermission(AppFlowPermission.ADDPERM, val)) return void ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.FieldEditContradict", [AppFlowPermission.TITLE[val], AppFlowPermission.TITLE[first_limit]])) } $(ele).siblings().removeClass("active"), $(ele).addClass("active") }, removeThisTag: function (ele) { id = $(ele).attr("value"); var ele1 = Layout.Page.container.find("#field_Perm_list input[value=" + id + "]").attr("checked", !1); AppFlowPermission.toggleFieldSelect(ele1); var par = $(ele).parent().parent(); $(ele).parent().remove(), 1 == par.children().length && par.remove(), 0 == Layout.Page.container.find("#bulkPermissionsSelectedFields").children().length && Layout.Page.container.find("#bulkPermissionsSelectedFields").append(jQuery("<span />", { "class": "spntag" }).append(ZPI18N.getString("zp.noFieldsSelected"))) }, toggleFieldSelect: function (ele) { var parent = $(ele).closest("ul"), count = parent.find(".fieldinput:checked").length, total = parent.find('li[isDisp="true"]').find(".fieldinput").length; count == total ? parent.siblings().find("input").prop("checked", !0) : parent.siblings().find("input").prop("checked", !1), AppFlowPermission.togglePermissionsButton() }, setBulkPermission: function () { var input = Layout.Page.container.find("#field_Perm_list").find(".fieldinput:checked"); if (input.length > 0) { var params = { mode: "fperm.fieldperm.bulk" }, views = Layout.Page.container.find("#innerSliderPermissionsView").find(".active").removeClass("active"); params.isView = !1, params.isEdit = !1, 1 == views.length && (params.isView = !0, params.vPerm = views.attr("value")); var edits = Layout.Page.container.find("#innerSliderPermissionsEdit").find(".active").removeClass("active"); if (1 == edits.length && (params.isEdit = !0, params.ePerm = edits.attr("value")), params.isEdit || params.isView) { Layout.Page.container.find('[id^="fieldpermissions_sectionid-"]').find("input").attr("checked", !1); var fcids = ""; for (i = 0; i < input.length; i++) fcids = fcids + input[i].value + ",", input[i].checked = !1; params.formId = AppFlowPermission.formId, params.roleId = Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').attr("value"), params.fcIds = fcids, ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.handleBulkPermission), Layout.Page.container.find("#setPermissionsButton").hide() } } Layout.Page.container.find("#permissionsInnerSlider").modal("hide") }, handleBulkPermission: function (data) { if ("success" == data.status) { ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.fieldPermssionsSuccess")); var params = { formId: AppFlowPermission.formId, mode: "appFlowPermwithfields", roleId: Layout.Page.container.find("#ls_roleidlist").find('li[class^="sel"]').attr("value") }; ZPeople.Request.send(AppFlowPermission.url, params, AppFlowPermission.constructfieldPermPage) } else "warning" == data.status ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.PrimaryLookuPermissionChange")) : ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")) } }, ZPForm = {}; ZPForm = {
    CONF: {}, CURRFORM_PARAM: {}, FORM_DETAILS: {}, PROFILE: !1, IS_SUBMITNEW: !1, IS_RESUBMIT: !1, RESUBMIT_RECORDID: null, EMP_FORMID: void 0, URL: "/formAction.zp", MODE: "ADD", FIELD_RECORD: {}, FIELD_RECORD_OWNERS: [], APPROVALFOOTER: '<div class="modal-footer text-left DN"><div class="row"><div class="col-sm-6" id="zp_appproval_container"></div><div class="col-sm-6 text-right"><button class="btn btn-primary DN" id="zp_approval_followupbtn" onclick="ApprovalProcess.sendFollowupMail(this)">' + ZPI18N.getString("zp.sendfollowup") + '</button><button class="btn btn-cancel btn-default ML8 FR DN" id="zp_approval_cancelapproval" approvaltype="2" onclick="ZPView.confirmCancelRecord();">' + ZPI18N.getString("zp.cancelrecord") + '</button><button class="btn btn-default cancel-model" data-dismiss="modal" id="zp_appproval_close" onclick="ZPForm.Field.closeconfmsg()" type="button">' + ZPI18N.getString("zp.close") + '</button><button class="btn btn-primary DN" id="zp_approval_resubmitbtn">' + ZPI18N.getString("zp.resubmit") + '</button><button id="zp_appproval_approve_btn" approvaltype="1" class="btn btn-success ZpaprvrBtn RsltA DN">' + ZPI18N.getString("zp.approve") + '</button><button approvaltype="0" class="btn btn-danger ZpaprvrBtn RsltR DN"  id="zp_appproval_reject_btn">' + ZPI18N.getString("zp.reject") + "</button></div></div>", FOOTER: '<div class="modal-footer text-left DN"><button type="button" id="zp_forms_draft_btn" onclick="Appraisal.Reviewer.savelocally(this.form,this);" class="btn btn-primary DN">' + ZPI18N.getString("zp.savedraftbtn") + '</button><button type="button" id="zp_forms_add_btn" onclick=" ZPForm.IS_SUBMITNEW=false;ZPForm.Record.validateAndSubmit();" class="btn btn-primary">' + ZPI18N.getString("zp.submit") + '</button><button type="button" id="zp_forms_addnew_btn" onclick="ZPForm.IS_SUBMITNEW=true;ZPForm.Record.validateAndSubmit();" class="btn btn-default">' + ZPI18N.getString("zp.submitNew") + '</button><button type="button" id="zp_forms_savedraft_btn" class="btn btn-default" onclick=ZPForm.Record.saveasdraft()>' + ZPI18N.getString("zp.savedraftbtn") + '</button><button type="button"  id="zp_form_cancel_close_btn" class="btn btn-default"  onclick="ZPForm.Field.closeconfmsg()">' + ZPI18N.getString("zp.cancel") + '</button><button type="button" class="btn btn-default btn-md FR DN" acttype="1" id="zp_forms_next_btn">' + ZPI18N.getString("zp.next") + '</button><button type="button" id="zp_forms_prev_btn" acttype="0" class="btn btn-default btn-md MR10 FR DN">' + ZPI18N.getString("zp.previous") + "</button></div>", TIMELOG_FOOTER: '<div class="modal-footer text-left DN"><button type="button" id="zp_forms_draft_btn" onclick="Appraisal.Reviewer.savelocally(this.form,this);" class="btn btn-primary DN">Save as Draft</button><button type="button" id="zp_forms_add_btn" onclick=" Timetracker.timelogs.validateAndSubmitCallback()" class="btn btn-primary">' + ZPI18N.getString("zp.submit") + '</button><button type="button" id="zp_forms_addnew_btn" onclick="ZPForm.IS_SUBMITNEW=true;ZPForm.Record.validateAndSubmit();" class="btn btn-default">' + ZPI18N.getString("zp.submitNew") + '</button><button type="button" id="zp_forms_savedraft_btn" class="btn btn-default" onclick=ZPForm.Record.saveasdraft()>' + ZPI18N.getString("zp.savedraftbtn") + '</button><button type="button"  id="zp_form_cancel_close_btn" class="btn btn-default"  onclick="ZPForm.Field.closeconfmsg()">' + ZPI18N.getString("zp.cancel") + '</button><button type="button" class="btn btn-default btn-md FR DN" acttype="1" id="zp_forms_next_btn">' + ZPI18N.getString("zp.next") + '</button><button type="button" id="zp_forms_prev_btn" acttype="0" class="btn btn-default btn-md MR10 FR DN">' + ZPI18N.getString("zp.previous") + "</button></div>", FORM_OUTER_TEMPLATE: '<div class="modal popRgtModel PopSsModel in" role="dialog" data-keyboard="false"><div class="modal-dialog" role="document"><div class="modal-content" id="headerParent"><div class="modal-body P0I" id="zp_form_outer_container"></div></div></div><iframe name="zp_form_response" frameborder="0" style="height: 0px;width: 0px; display: none;"></iframe></div>', FORM_HEADER_TEMPLATE: '<div class="modal-header" id="zp_form_header"><div class="zp-back" onclick="ZPForm.Field.closeconfmsg()"><i class="IC-ar-lft"></i></div><div class="ssp-profmin" id="zp_form_headerdisp"><span class="ssp-un" id="zp_form_header_name"></span></div><div class="ssp-profrht"><span class="FL MR10 "> <div id="zp_cbutton" class="divcustact dropdown cust-dm FR ZPCusDrs MR30 DN"><button type="button" id="zpcbnbtn" class="btn btn-default FR" ></button> <i id="zpcbnbtn_vmore" data-toggle="dropdown" class="icocust IC-ar-dwn Iarw dropdown-toggle CP" aria-expanded="false"></i><ul id="zp_cbutton_list" class="dropdown-menu"></ul></div></span><div class="zp-recordsts zp_dyn" id="headerApprovalBtn"><span class="msg"></span><a id="zp_appproval_comment_btn" onclick="ZPApprovals.getApprovalDetails()">' + ZPI18N.getString("zp.view") + '</a></div><span onclick="ZPTasks.getChecklistsForRecord()" id="headerTaskBtn" class="btn btn-default btn-min zp_dyn"><i class="CR-checklist"></i></span><span class="btn btn-default btn-min DN" id="zp_form_editin_singlerec"><i class="CR-edit"></i></span><span class="btn btn-min dropdown ZPcusPos1 ZPCusDrs DN"><i class="CR-info" data-toggle="dropdown" id="zp_form_createinfo"></i><ul class="dropdown-menu info-drop ZPCmn-Arrow top rt gray"><li><p class="S12">' + ZPI18N.getString("zp.reports.createdby") + '</p></li><li id="zp_form_createdby"><a><img src="" class="Usrimg FL"><div class="ZPUsrDt"><span class="DB MB8 ZPElips" name="username"></span><span class="DIB dgry MR5" name="time"></span></div></a></li><li><p class="S12">' + ZPI18N.getString("zp.modifiedby") + '</p></li><li id ="zp_form_modifiedby"><a><img src="" class="Usrimg FL"><div class="ZPUsrDt"><span class="DB MB8 ZPElips" name="username"></span><span class="DIB dgry MR5" name="time"></span></div></a></li></ul></span></span><span id="ZP_Form_MoreOpt" onclick ="ZPView.Actions.showEsigninform();" class="btn btn-min dropdown ZPcusPos1 ZPCusDrs DN"><i class="IC-more  S18 gry CP" data-toggle="dropdown" aria-expanded="false"></i><ul class="dropdown-menu zp-recdrop bullet pull-right"><li onclick="ZPForm.Record.getAuditHistoryForRecord()" class="DN" id="zp_form_audithistory"><a><i class="CR-audit"></i>Audit History</a></li><li onclick="ZPForm.printForm()" class="DN" id="zp_form_header_PrintBtn"><a><i class="CR-print"></i>Print</a></li><li class="bTop DN" id="download_grp"><a><span class="dgry">' + ZPI18N.getString("zp.Download") + '</span></a></li><li id="li_downloadAsPDF" onclick="ZPForm.downloadAsPDF()"><a><i class="IC-imprt"></i>' + ZPI18N.getString("zp.recordtemplate") + '</a></li><li id="mailmerge_download"><a onclick=MMtemplte.constructTemplateList("form",null,null,this,"Download")><i class="IC-imprt"></i>' + ZPI18N.getString("zp.mailmerge") + '</a><li id="esigndivider" class="divider" style= "display : none"><li class="bTop" id="esignature_header" style="display : none"><a><span class="dgry">' + ZPI18N.getString("zp.esignature") + '<span></span></span></a></li></li><li id="send_document_form"  style= "display : none"><a onclick="ZPView.sendForSignDocs(\'zsign\', \'true\');" data-toggle="modal" title="Send Document"><span class="IC-zohosign DIB gry MR10" ;></span>Send Document</a></li><li id= "viewsigndocument" style= "display : none"><a id ="viewdoconclick" data-toggle="modal" title="Document Details"><span class="DIB gry MR20" ;></span>Document Details</a> </li></ul></span></div><a class="IC-cls close" onclick="ZPForm.Field.closeconfmsg()"></a></div>', TASK_OUTER_TEMPLATE: '<div  id="taskDtls" name="task_slider" class="zp_pv"><div class="zp_pwrap"><div class="zp_pvhd" id="taskDtlsHeader"><div class="zp_mark" id="viewHeader"><i class="IC-task-unchk zp_dyn" data-toggle="tooltip" data-placement="bottom" name="tdtls_complete"  onclick=ZPTasks.changeStatus(this,"slider")></i><span id="tdtls_taskname"></span><div id="tdtls_initiator"></div></div><div class="zp_micn" id="vLBtn"><ul id="tdtls_close"><li onclick="ZPTasks.closePreview()"><b><span><i class="IC-cls" data-toggle="tooltip" data-placement="bottom" data-original-title=' + ZPI18N.getString("zp.close") + '></i></span></b></li></ul></div></div><div class="zp_info" id="detail_pannel"><div><div><dl class="pht"><dt>' + ZPI18N.getString("zp.taskowner") + '</dt><dd><div class="ZP_photo" id="tdtls_taskowner_image"></div><font id="tdtls_taskowner"></font></dd></dl></div><div><dl class="pht"><dt>' + ZPI18N.getString("zp.duedate") + '</dt><dd><i class="IC-clock bi"></i><span id="tdtls_duedate"></span></dd></dl></div><div><dl class="nop"><dt>' + ZPI18N.getString("zp.status") + '</dt><dd><span id="tdtls_status"></span></dd></dl></div></div></div><div class="zp_pvcnt"><div class="modal-body" id="zp_form_outer_container"></div></div></div></div>', MODAL_OUTER_TEMPLATE: '<div class="modal fade ZPsecModal" role="dialog" data-keyboard="false"><div class="modal-dialog calpluspop ZPALmdl calwkpop ZPCLmdl" role="document"><div class="modal-content"><div class="modal-header" id="heading"><h6 class="addPopTitle pull-left M0" id="zp_form_header" value="addEmployee"></h6><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><div class="clearfix"></div></div><div class="modal-body" id="zp_form_outer_container"></div></div></div><iframe name="zp_form_response" frameborder="0" style="height: 0px;width: 0px; display: none;"></iframe></div>', MODAL_FOOTER_TEMPLATE: '<div class="form-group MB0I PT5"><div class="col-sm-7 col-sm-offset-4"><button type="button" id="zp_forms_add_btn" onclick=" ZPForm.IS_SUBMITNEW=false;ZPForm.Record.validateAndSubmit();" class="btn btn-primary btn-sm MR5">' + ZPI18N.getString("zp.save") + '</button><button type="button" data-dismiss="modal" id="zp_form_cancel_close_btn" class="btn btn-default btn-sm">' + ZPI18N.getString("zp.cancel") + "</button></div></div>", TEMPLATE_COMPONENTS: $("<form class='form-horizontal pad' role='form'><div class='form-group'><label class='control-label col-sm-3'>" + ZPI18N.getString("zp.selecttemplate") + "</label><div class='col-sm-6'><div id='zp_template_select'></div><div class='MB15 MT15'><label class='radio DIB '><input type='radio' name='pdftype' value='portrait' checked><span class='ML2'>" + ZPI18N.getString("zp.portraitview") + "</span></label></div><div class='MT15'><label class='radio DIB'><input type='radio' name='pdftype' value='landscape'><span class='ML2'>" + ZPI18N.getString("zp.landscapeview") + "</span></label></div></div></div><div class='form-group'><div class='col-sm-12'><div id='zp_template_content' class='form-control frameBox'></div></div></div></form><form id='zp_template_form' style='display:none' method='Post' target='zp_template_frame'></form><iframe name='zp_template_frame' style='display:none'></iframe>"), EMBED_FORM_OUTER: '<div class="zpfrm-continer"><nav class="navbar navbar-fixed-top"><div class="navbar-header ZPwf"><div class="ZPHeadLft" id="embicon"></div></div></nav><div class="zpcont-wrapper" id="zp_form_outer_container"></div><div class="zpact"><div class="text-center MT5"><button class="btn btn-primary MR10" onclick=" ZPForm.IS_SUBMITNEW=false;ZPForm.Record.validateAndSubmit();">' + ZPI18N.getString("zp.submit") + "</button></div></div></div>", EMBED_FORM_SUCCESS_PAGE: '<div class="zs_successmessage_con">' + ZPI18N.getString("zp.recordaddedsuccessfully") + "</div>", UNIQUE_FIELDS_RECORD_ERROR: '<div class="zp-alert alert" style="display:none" id="uniqueErrorHead"><p id="uniqueErrorTxt"></p><a class="zpcls close" onclick="ZPForm.uniqueErrorClose()">close</a></div>', FORM_MODAL_OUTER_TEMPLATE: '<div class="modal popRgtModel ZPRpanel PopMdxModel in" role="dialog" data-keyboard="false"><div class="modal-dialog" role="document"><div class="modal-content" id="headerParent"><div class="modal-body P0I" id="zp_form_outer_container"></div></div></div><iframe name="zp_form_response" frameborder="0" style="height: 0px;width: 0px; display: none;"></iframe></div>', FORM_MODAL_HEADER_TEMPLATE: '<div class="modal-header" id="zp_form_header"><h6 class="addPopTitle pull-left M0" id="zp_form_header_name" value="addEmployee"></h6><div class="FR MR25 MT5"><span class="FL MR10 "> <div id="zp_cbutton" class="divcustact dropdown cust-dm FR ZPCusDrs MR30 DN"><button type="button" id="zpcbnbtn" class="btn btn-default FR" ></button> <i id="zpcbnbtn_vmore" data-toggle="dropdown" class="icocust IC-ar-dwn Iarw dropdown-toggle CP" aria-expanded="false"></i><ul id="zp_cbutton_list" class="dropdown-menu"></ul></div></span><button class="btn btn-min btn-success" data-toggle="modal" data-target="#tlentry" id="headerApprovalBtn" style="display:none">Approval</button><button class="btn btn-primary btn-min zp_dyn" id="headerTaskBtn">Add Task</button><span class="btn btn-default btn-min DN" id="zp_form_editin_singlerec"><i class="CR-edit"></i></span><span class="btn btn-default btn-min DN" id="zp_form_header_PrintBtn" onclick="ZPForm.printForm()"><i class="CR-print"></i></span><span class="btn btn-default btn-min DN" id="zp_form_audithistory" onclick="ZPForm.Record.getAuditHistoryForRecord()"><i class="CR-audit"></i></span><span class="btn btn-min dropdown ZPcusPos1 ZPCusDrs" id="zp_form_otherDetails"><i data-toggle="dropdown" class="IC-more gry"></i><ul class="dropdown-menu info-drop ZPCmn-Arrow top rt gray" style="display: none"><li class="bTop DN" id="download_grp"><a><span class="dgry">' + ZPI18N.getString("zp.Download") + '<span></span></span></a></li><li id="li_downloadAsPDF" onclick="ZPForm.downloadAsPDF()"><a><span class="IC-imprt DIB gry MR10 "></span>' + ZPI18N.getString("zp.recordtemplate") + '</a></li><li id="mailmerge_download"><a onclick=MMtemplte.constructTemplateList("form",null,null,this,"Download")><span class="IC-imprt DIB gry MR10 "></span>' + ZPI18N.getString("zp.mailmerge") + '</a><li></ul></span><button aria-label="Close" data-dismiss="modal" class="close" type="button" onclick="ZPForm.Field.formCloseBtn()"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div></div>', TEMPLATE_DATA: {}, FORM_COMPONENT_DATA: {}, FORM_COMPONENTS: {}, FORM_FIELDHTML: {}, FORMFILEUPLOAD: [], LAYOUT: null, FIELD_LAYOUT: null, PRINTPAGE_DATA: null, APPROVERHTML: {}, PRINT: !1, ISAPPROVAL: !1, PAGEMODE: !1, USER_EMPLOYEEPERM: null, FIELD_RULE_DETAILS: {}, ALL_ROLE_LIST: {}, USER_ADMIN_LOCATIONS: [], USER_ISADMIN: !1, draftstatus: 4, primLkpType: null, isFieldsChange: !1, primLkpId: null, primLkpVal: null, Deleted_Files: [], primLkpChangeRestrictedForms: ["P_Employee", "P_Department", "P_Designation", "P_Location", "P_EmployeeLeave", "P_TimesheetJobsList", "P_ClientDetails", "P_TimesheetJob", "P_EmployeeJobs", "P_Timesheet", "P_SelfAppraisal", "P_PerformanceAppraisal", "P_Goals"], COUNTRY_STATES: {}, HistoryFields: {}, time_Field_Prop: {}, months: ["zp.jan", "zp.feb", "zp.mar", "zp.apr", "zp.may", "zp.jun", "zp.jul", "zp.aug", "zp.sep", "zp.oct", "zp.nov", "zp.dec"], updateFormMode: function () { -1 !== Layout.Page.hash.indexOf("/edit") ? ZPForm.setEditMode() : -1 !== Layout.Page.hash.indexOf("/view") ? ZPForm.setViewMode() : ZPForm.setAddMode() }, setViewMode: function () { this.MODE = "VIEW" }, setEditMode: function () { this.MODE = "EDIT" }, setAddMode: function () { this.MODE = "ADD" }, isViewMode: function () { return "VIEW" === this.MODE }, isEditMode: function () { return "EDIT" === this.MODE }, isSingleFiledEdit: function () { return null != ZPForm.Field.Edit.FORMCOMP_ID }, isAddMode: function () { return "ADD" === this.MODE }, isFromSetup: function () { return -1 !== Layout.Page.currentmode.indexOf("admin/employeerecords") }, getUrl: function () { var returnVal = "services/"; return -1 !== Layout.Page.currentmode.indexOf("organization/employee") ? returnVal = "organization/employee/" : -1 !== Layout.Page.currentmode.indexOf("organization/department") ? returnVal = "organization/department/" : -1 !== Layout.Page.currentmode.indexOf("leavetracker/views/form") && (returnVal = "leavetracker/views/form/"), returnVal }, printForm: function () { var formCompObj = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; if (ZPForm.PRINT = !0, ZPForm.PAGEMODE = !0, void 0 !== formCompObj && ZPForm.constructFields(formCompObj), ZPForm.isViewMode() && null === ZPForm.Field.Edit.FORMCOMP_ID) if (ZPForm.isApprovalEnabled()) { if (ZPForm.APPROVERHTML && Object.keys(ZPForm.APPROVERHTML).length > 0) ZPForm.constructPrintForm(!0, ZPForm.APPROVERHTML), ZPForm.APPROVERHTML = {}; else if (ZPForm.CURRFORM_PARAM.recordId) if (void 0 === ZPApprovals.APPROVAL_DETAILS[ZPForm.CURRFORM_PARAM.recordId]) { var params = { formId: ZPForm.CURRFORM_PARAM.formId, recordId: ZPForm.CURRFORM_PARAM.recordId, method: "getApprovalDetails" }; ZPeople.Request.send("/getApprovalDetails.zp", params, function (data) { ZPApprovals.APPROVAL_DETAILS[ZPForm.CURRFORM_PARAM.recordId] = data, ZPForm.constructPrintForm(!0, data) }) } else ZPForm.constructPrintForm(!0, ZPApprovals.APPROVAL_DETAILS[ZPForm.CURRFORM_PARAM.recordId]) } else ZPForm.constructPrintForm(!1); else ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.editcheckToPrint")) }, getLocUsers: function () { return ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId].message.locUsers }, getRecordType: function () { var viewType = zpconst.Permission.ALL_DATA, singleRecDtl = ZPForm.getSingleRecord(); return void 0 !== singleRecDtl && void 0 !== singleRecDtl.record && void 0 != singleRecDtl.record && (viewType = singleRecDtl.record.viewType), viewType }, constructPrintForm: function (isApproval, approvalDtl) { var newWindow = window.open(); newWindow.focus(); var newContent = '<!doctype html><head><script>function callprint(){var body = document.getElementsByTagName("BODY")[0];body.style.display = "block";window.print();}</script>', css = $("head").find("[rel=stylesheet]"); for (i = 0; i < css.length; i++) newContent += css[i].outerHTML; var draft = !1; if (isApproval && 0 !== approvalDtl.length && (!approvalDtl.hasOwnProperty("currentApprovalStatus") || approvalDtl.currentApprovalStatus !== zpconst.ApprovalStatus.NoStatus && approvalDtl.currentApprovalStatus !== zpconst.ApprovalStatus.NotSubmitedd || (draft = !0)), newContent += "<style> div * {overflow: visible !important; } </style> </head><body style = 'display:none;overflow:auto;background:#FFF' onload ='callprint();' class='ZPSPrint' >", newContent += '<nav class="navbar navbar-fixed-top"> <div class="navbar-header ZPwf" id="zptopbar"> <div class="ZPHeadLft" style="border-right:0px !important;">' + ("null" === logo || ZPUtil.Validation.isEmpty(logo) ? '<img class="ZPLogo1 DB " alt="Zoho People" src="https://www.zoho.com/freeride/images/Logo.png"/>' : '<img class="ZPLogo1 DB " alt="Zoho People" src="/people/viewPhoto?filename=' + logo + '"/>') + '</div> <div class="ZPHeadRgt"> <div class="ZPPimg dropdown open"> <img data-toggle="dropdown" src="' + ZPeople.CURR_USER.avatar + '" aria-expanded="true"> </div></div></div></nav><div id="page-wrapper "> <div class="cont-wrp"> <div class="main-wrp"><div class="Scrcont ' + (isApproval && !draft ? ' prodiv"' : '"') + ' style="left:0px;top:' + (draft ? "50px" : "0px") + ';bottom:0px;">', void 0 != ZPForm.CURRFORM_PARAM.formId && (ZPFRules.evaluateRulesForAllFields(!1), ZPFRules.LAYOUT = ZPForm.LAYOUT), newContent += ZPForm.PRINTPAGE_DATA.prop("outerHTML"), newContent += "</div>", isApproval) { if (!draft) { if (newContent += '<div class="ZPSSrgt"> <h6 class="MT0I">Approval Status : <span ' + (0 === approvalDtl.currentApprovalStatus ? " class='red'>" + ZPI18N.getString("zp.rejected") : 1 === approvalDtl.currentApprovalStatus ? " class='grn'>" + ZPI18N.getString("zp.approved") : "class='blu'>" + ZPI18N.getString("zp.pending")) + "</span></h6> ", approvalDtl.systemApproved) newContent += '<div class="ZPrto MB20I"> <div class="FL PR"><img src="/people/images/auto-app.jpg"></div> <div class="det"> <span>' + ZPI18N.getString("zp.systemapproval") + "</span> <span" + (1 === approvalDtl.currentApprovalStatus ? " class='grn'>" + ZPI18N.getString("zp.approved") : " class='red'>" + ZPI18N.getString("zp.rejected")) + "</span> </div> </div>"; else { if (void 0 !== approvalDtl.processed) { var approverlist = approvalDtl.processed; for (approverdtl = 0; approverdtl < approverlist.length; approverdtl++) newContent += '<div class="ZPrto MB20I"> <div class="FL PR"><img src="' + approverlist[approverdtl].photo + '"></div> <div class="det"> <span>' + approverlist[approverdtl].name + "</span> <span" + (3 === approverlist[approverdtl].approvalStatus || 1 === approverlist[approverdtl].approvalStatus ? " class='grn'>" + ZPI18N.getString("zp.approved") : " class='red'>" + ZPI18N.getString("zp.rejected")) + '</span><span class="dgry S12">' + approverlist[approverdtl].approvedTime + "</span> </div> </div>" } if (void 0 !== approvalDtl.current) { var currrentapplist = approvalDtl.current; newContent += '<div class="ZPrto MB20I"> <div class="FL PR"><img src="' + currrentapplist.photo + '"></div> <div class="det"> <span>' + currrentapplist.name + '&nbsp;&nbsp;&nbsp;(Current Approver)</span> <span class="blu">' + ZPI18N.getString("zp.pending") + "</span> </div> </div>" } if (void 0 !== approvalDtl.pending) { var pendinglist = approvalDtl.pending; for (approverdtl = 0; approverdtl < pendinglist.length; approverdtl++) newContent += '<div class="ZPrto MB20I"> <div class="FL PR"><img src="' + pendinglist[approverdtl].photo + '"></div> <div class="det"> <span>' + pendinglist[approverdtl].name + '</span> <span class="blu">' + ZPI18N.getString("zp.pending") + "</span> </div> </div>" } } newContent += "</div>" } ZPForm.ISAPPROVAL = !1 } if (newContent += "</div></div></div></body></html>", draft) { var printBody = $(newContent).find(".Scrcont").find(".ZPSEdt").html(); $(newContent).find(".Scrcont").html(printBody).css("top", "50px") } if (newWindow.document.write(newContent), "P_SelfAppraisal" === ZPForm.getTableName() || "P_MultiRater" === ZPForm.getTableName() || "P_PerformanceAppraisal" === ZPForm.getTableName()) { var apprContent = Appraisal.KRAVsGoals.showEnabledComponents(ZPForm.SINGLE_RECORD_DTL[ZPForm.CURRFORM_PARAM.formId + "_" + ZPForm.CURRFORM_PARAM.recordId].record, ZPForm, void 0, ZPForm.CURRFORM_PARAM.selUser, ZPForm.CURRFORM_PARAM.raterId); if (apprContent = $(apprContent), ("VIEW" === ZPForm.MODE || "performance_myteam_review" === Layout.Page.urlmode) && Appraisal.KRAVsGoals.setAverageForComponents(Appraisal.KRAVsGoals.totalComponents, Appraisal.KRAVsGoals.totalGoals, Appraisal.KRAVsGoals.kraWeightage, Appraisal.KRAVsGoals.competencyWeightage, apprContent, Appraisal.KRAVsGoals.raterId, Appraisal.KRAVsGoals.disableKRACount, Appraisal.KRAVsGoals.disableGoalsCount), Appraisal.KRAVsGoals.sumOfRatingComp = {}, Appraisal.KRAVsGoals.sumOfRatingGoal = {}, newContent = $(newWindow.document).find(".ZPSEdt").append(apprContent), "performance_myreview_myratings" === Layout.Page.urlmode) { var mrContent = Appraisal.multiraterHTML; newContent = $(newWindow.document).find(".ZPSEdt").append(mrContent) } } ZPForm.PRINT = !1, ZPForm.PAGEMODE = !1, newWindow.document.close() }, updateUserDetails: function (userDtl, name, value, cmpid) { switch (name) { case "EmployeeID": userDtl.empid = value; break; case "LastName": userDtl.lname = value, userDtl.name = ZPeople.getUserDisplayName(userDtl.fname, userDtl.lname); break; case "FirstName": userDtl.fname = value, userDtl.name = ZPeople.getUserDisplayName(userDtl.fname, userDtl.lname); break; case "Department": userDtl.deptName = value, userDtl.deptId = cmpid; break; case "Reporting_To": userDtl.reportingTo = value; break; case "Work_location": userDtl.workLoc = value; break; case "LocationName": userDtl.location = value, userDtl.locId = cmpid; break; case "Mobile": userDtl.mobile = value; break; case "Work_phone": userDtl.workPhone = value; break; case "Extension": userDtl.extension = value; break; case "Role": userDtl.roleName = value, userDtl.roleId = cmpid; break; case "Designation": userDtl.designation = value, userDtl.desiId = cmpid } var aboutUser; "AboutMe" === name && (aboutUser = value) },
    showForm: function (mode, recId) {

        ZPForm.isQuickAdd = !1, ZPForm.isrelformrelfields = !1, ZPForm.formid = 0;
        var formId = Layout.Page.urlparam.formId;
        void 0 === formId && (formId = ZPForm.CURRFORM_PARAM.formId);
        var formlinkname = ZPUtil.Form_Link_Names.getFormLinkName(formId, !0), formnameString = "-formLinkName:";
        if (void 0 == formlinkname && (formnameString = "-formId:", formlinkname = formId), "P_SelfAppraisal" == ZPForm.getTableName()) ZPView.formsAndViewsCallback();
        else {
            if (mode = void 0 === mode ? "add" : mode, ZPForm.CURRFORM_PARAM.disableUrlTrack) return void ZPForm.load({ formId: ZPForm.CURRFORM_PARAM.formId, formMode: mode.toUpperCase(), recordId: ZPForm.CURRFORM_PARAM.recordId, disableUrlTrack: !0 }); var formActUrl = Layout.UrlConf.getFormActionURL(mode); "edit" === mode ? (void 0 === recId && void 0 !== Layout.Page.childUrlParam.recordId && (recId = Layout.Page.childUrlParam.recordId), void 0 !== recId && (formActUrl = "admin/organization/locations/edit" != formActUrl ? "#" + formActUrl + formnameString + formlinkname + "/recordId:" + recId : "#" + formActUrl + "/" + recId)) : formActUrl = "view" === mode && void 0 !== recId && void 0 !== formId ? "#" + formActUrl + formnameString + formlinkname + "/recordId:" + recId : "import" === mode ? "#" + formActUrl + formnameString + formlinkname : "importbulk" === mode ? "#" + formActUrl + formnameString + formlinkname : "#" + formActUrl + formnameString + formlinkname, window.location.href = formActUrl
        }
    },
    updateCurrFormComponent: function (json) { ZPForm.isQuickAdd || ZPForm.isrelformrelfields || ZPForm.isrelfieldsingelrecview || ZPForm.isfromrelfieldedit || (ZPForm_MAIN_PARAM = json), ZPForm.isQuickAdd && json.hasOwnProperty("ttSelectAddData") && (ZPForm_MAIN_PARAM = json), ZPForm.CONF = ZPForm.getFormConf(), ZPForm.preparam = ZPForm.CURRFORM_PARAM, ZPForm.prepageid = ZPForm.PAGEID, ZPForm.CURRFORM_PARAM = json, void 0 === json.formMode ? ZPForm.updateFormMode() : ZPForm.MODE = json.formMode, void 0 !== json.recordId || ZPForm.isAddMode() || (void 0 !== Layout.Page.childUrlParam.zuid ? ZPForm.CURRFORM_PARAM.zuid = Layout.Page.childUrlParam.zuid : void 0 !== Layout.Page.childUrlParam.recordId && (ZPForm.CURRFORM_PARAM.recordId = Layout.Page.childUrlParam.recordId)), ZPForm.CURRFORM_PARAM.modalPopOverNeed = void 0 === json.modalPopOverNeed ? !1 : json.modalPopOverNeed, ZPForm.PAGEMODE = void 0 === json.isPageMode ? !1 : json.isPageMode, ZPForm.PAGEID = void 0 === json.containerId ? "zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId : json.containerId, ZPForm.isQuickAdd || ZPForm.isrelformrelfields ? ZPForm.PAGEID = "zp_quickadd_record_" + ZPForm.CURRFORM_PARAM.formId : ZPForm.isrelfieldsingelrecview ? ZPForm.PAGEID = "zp_relfielsingle_record_" + ZPForm.CURRFORM_PARAM.formId : ZPForm.isfromrelfieldedit && (ZPForm.PAGEID = "zp_relfieledit_record_" + ZPForm.CURRFORM_PARAM.formId), ZPForm.FORM_VIEW_READONLY = json.isFormReadOnly ? json.isFormReadOnly : !1, ZPForm.Record.SUCCESS_PKID = void 0 }, load: function (json, isPreviewForm, isFromformidQuick) { ZPForm.isFromQuickAddrelClose = !1, ZPForm.isPreviewForm = !1, ZPForm.isAdminRedirect = !1, ZPForm.isQuickAdd = json.isQuickAdd, ZPForm.isRoleBasedPreview = json.isRoleBasedPreview, ZPForm.isrelfieldsingelrecview = json.isrelfieldsingelrecview, ZPForm.isfromrelfieldedit = json.isfromrelfieldedit, ZPForm.isrelformrelfields = !1, ZPForm.primLkpType = ZPForm.primLkpVal = null, ZPForm.selValue = null, json.isfromrelfields && (ZPForm.selValue = json.selValue), json.isFromSelfService && (ZPForm.selValue = SelfService.getUserId()), isFromformidQuick || json.isfromrelfields || json.isrelfieldsingelrecview || json.isfromrelfieldedit || (ZPForm.formid = 0), (void 0 == ZPForm.formid || 0 == ZPForm.formid) && (ZPForm.formid = json.formId), (isPreviewForm || 0 == json.roleId) && (ZPForm.isPreviewForm = !0), ZPForm.relfcid = json.relfcId, json.isfromrelfields ? (ZPForm.isrelformrelfields = !0, ZPForm.relrecid = ZPForm.CURRFORM_PARAM.recordId) : ZPForm.isrelfieldsingelrecview && (ZPForm.relfcid = json.relfcid), -1 == json.roleId && (ZPForm.isAdminRedirect = !0), this.updateCurrFormComponent(json), ZPForm.CONF = ZPForm.getFormConf(), ZPForm.setUp(ZPForm.getFormComponents) }, getFormComponents: function () { if (!ZPForm.isFromQuickAddrelClose) { var formCompData = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], params = { formId: ZPForm.CURRFORM_PARAM.formId, mode: "getFormComponents" }; if (void 0 === formCompData || formCompData.refresh && ZPForm.isAddMode() || ZPForm.isRoleBasedPreview || formCompData.lastprev) { if (void 0 !== formCompData && (formCompData.refresh || formCompData.lastprev) && delete ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], ZPForm.isRoleBasedPreview && (params.roleId = ZPForm.roleId, params.isRoleBased = !0), void 0 != ZPForm.CURRFORM_PARAM.selUser && (params.selUser = ZPForm.CURRFORM_PARAM.selUser), "P_PerformanceAppraisal" != ZPForm.getTableName() && "P_SelfAppraisal" != ZPForm.getTableName() || void 0 == Appraisal.selectUsererecno || "" == Appraisal.selectUsererecno || (params.selUser = Appraisal.selectUsererecno, ZPForm.CURRFORM_PARAM.selUser = Appraisal.selectUsererecno), "P_PerformanceAppraisal" == ZPForm.getTableName() && -1 !== Layout.Page.hash.indexOf("performance/myreview/myratings") && (params.viewmyratings = "true"), ZPUtil.Validation.isEmpty(ZPForm.CURRFORM_PARAM.recordId) || (params.recordId = ZPForm.CURRFORM_PARAM.recordId), void 0 != Layout.Page.urlparam.configId ? params.configId = Layout.Page.urlparam.configId : void 0 !== ZPForm.CURRFORM_PARAM.configId ? params.configId = ZPForm.CURRFORM_PARAM.configId : "P_PerformanceAppraisal" == ZPForm.getTableName() && void 0 != Appraisal.selectconfigId && -1 != Appraisal.selectconfigId && (params.configId = Appraisal.selectconfigId), void 0 !== ZPForm.CURRFORM_PARAM.raterId && (params.raterId = ZPForm.CURRFORM_PARAM.raterId), void 0 !== ZPForm.CURRFORM_PARAM.ownerId && (params.ownerId = ZPForm.CURRFORM_PARAM.ownerId), "P_EmployeeLeave" === ZPForm.getTableName() && -1 !== Layout.Page.hash.indexOf("leavetracker/convert") && (params.absentId = Layout.Page.hash.split(":")[1]), ZPForm.getTableName() === Timetracker.constants.TIMELOG_TABLE && (params.selUser = null === Timetracker.timelogs.tserecno || void 0 === Timetracker.timelogs.tserecno ? ZPeople.CURR_USER.usererec : Timetracker.timelogs.tserecno), ZPForm.getTableName() === Timetracker.constants.JOB_TABLE && -1 !== Layout.Page.hash.indexOf("/scheduler/projects/jobs")) { var projectId; if (ZPForm.isAddMode()) { var urls = Layout.Page.hash.split("/"); urls.length > 1 && (projectId = urls[urls.length - 2]) } !ZPUtil.Validation.isEmpty(projectId) && ZPUtil.Validation.isNumber(projectId) && (params.Project = projectId) } ZPForm.CURRFORM_PARAM.isProfile && (params.isProfile = ZPForm.CURRFORM_PARAM.isProfile), ZPeople.Request.send(ZPForm.URL, params, ZPForm.constructFields, params) } else if (formCompData.iCache = !0, (ZPForm.isQuickAdd || ZPForm.isrelformrelfields) && (formCompData.iCache = !1), ZPForm.Field.Edit.FORMCOMP_ID = null, !ZPForm.isViewMode() && 7e3 === formCompData.code && formCompData.message.hasLookUp) { var lookUpIds = ZPForm.refreshLookupOptions(formCompData); lookUpIds.length > 0 ? ZPForm.fetchLookUpData(lookUpIds, formCompData) : ZPForm.constructFields(formCompData, params) } else ZPForm.constructFields(formCompData, params) } }, getCurrentFormMode: function () { var mode = ""; return ZPForm.isEditMode() ? mode = ZPI18N.getString("zp.edit") : ZPForm.isAddMode() && (mode = ZPI18N.getString("zp.add")), mode }, setUp: function (callback) { var isFromQATT = !1; if (ZPForm.isrelfieldsingelrecview && Layout.Page.container.find("#zp_relfielsingle_record_" + ZPForm.CURRFORM_PARAM.formId).remove(), ZPForm.isfromrelfieldedit ? Layout.Page.container.find("#zp_relfieledit_record_" + ZPForm.CURRFORM_PARAM.formId).remove() : ZPForm.isrelformrelfields && Layout.Page.container.find("#zp_quickadd_record_" + ZPForm.CURRFORM_PARAM.formId).remove(), !ZPForm.PRINT) { if (ZPForm.PAGEMODE) ZPForm.LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID), ZPForm.CURRFORM_PARAM.loadingContainer && Layout.Page.container.find("#" + ZPForm.CURRFORM_PARAM.loadingContainer).append(ZPeople.LOADING_HTML), void 0 !== callback && "function" == typeof callback && callback(); else if (ZPForm.isQuickAdd || ZPForm.isrelformrelfields ? ZPForm.LAYOUT = Layout.Page.container.find("#zp_quickadd_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.isrelfieldsingelrecview ? ZPForm.LAYOUT = Layout.Page.container.find("#zp_relfielsingle_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.isfromrelfieldedit ? ZPForm.LAYOUT = Layout.Page.container.find("#zp_relfieledit_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.LAYOUT = Layout.Page.container.find("#zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId), ZPForm_MAIN_PARAM.hasOwnProperty("ttSelectAddData") ? (isFromQATT = !0, Layout.Page.container.find("#jobsch_modelmask").css("z-index", "899")) : ZPForm_MAIN_PARAM.tableName === Timetracker.constants.TIMELOG_TABLE && ZPForm.CURRFORM_PARAM.isQuickAdd && Layout.Page.container.find("#jobsch_modelmask").css("z-index", "899"), 0 === ZPForm.LAYOUT.length || "P_Task" == ZPForm.getTableName()) { if ("P_Task" == ZPForm.getTableName() && (ZPForm.LAYOUT.remove(), $(".modal-backdrop").remove()), ZPForm.CURRFORM_PARAM.modalPopupView ? ZPForm.LAYOUT = $(ZPForm.MODAL_OUTER_TEMPLATE) : ZPForm.CURRFORM_PARAM.isCustomLayout && "VIEW" === ZPForm.CURRFORM_PARAM.formMode || "P_Task" === ZPForm.getTableName() && "EDIT" !== ZPForm.CURRFORM_PARAM.formMode && "ADD" !== ZPForm.CURRFORM_PARAM.formMode && -1 === Layout.Page.hash.indexOf("task/list/edit") && -1 === Layout.Page.hash.indexOf("task/list/add") ? (ZPForm.LAYOUT = $(ZPForm.TASK_OUTER_TEMPLATE), ZPForm.LAYOUT.find("#task_header").addClass("zp_dyn"), ZPForm.LAYOUT.find("#detail_pannel").addClass("zp_dyn"), Layout.Page.container.addClass("zp_Pshw")) : (ZPForm.LAYOUT = $(ZPForm.FORM_OUTER_TEMPLATE), ZPForm.CURRFORM_PARAM.modalPopOverNeed && (ZPForm.LAYOUT = $(ZPForm.FORM_MODAL_OUTER_TEMPLATE)), isFromQATT && Layout.Page.container.find("#jobsch_modelmask").css("z-index", "899")), ZPForm.isEmbedForm && (ZPForm.LAYOUT = $(ZPForm.EMBED_FORM_OUTER), Layout.Page.container = $("body")), ZPForm.isQuickAdd || ZPForm.isrelformrelfields ? ZPForm.LAYOUT.attr("id", "zp_quickadd_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.isrelfieldsingelrecview ? ZPForm.LAYOUT.attr("id", "zp_relfielsingle_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.isfromrelfieldedit ? ZPForm.LAYOUT.attr("id", "zp_relfieledit_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.LAYOUT.attr("id", "zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId), ZPForm.CURRFORM_PARAM.modalPopOverNeed ? ZPForm.headerConstruct(ZPForm.FORM_MODAL_HEADER_TEMPLATE) : ZPForm.headerConstruct(ZPForm.FORM_HEADER_TEMPLATE), void 0 !== ZPForm.CONF) { var tableName = ZPForm.getTableName(); if ("P_PerformanceAppraisal" === ZPForm.getTableName()) ZPForm.LAYOUT.find("#zp_form_header_name").html(ZPForm.getFormDisplayName()); else if ("P_TimesheetJob" === tableName || "P_TimesheetJobsList" === tableName) { var dispName = Timetracker.forms.getSingularDisplayNameForForms(tableName, ZPForm.getFormDisplayName()); ZPForm.LAYOUT.find("#zp_form_header_name").html(ZPForm.getCurrentFormMode() + "&nbsp;" + dispName) } else ZPForm.LAYOUT.find("#zp_form_header_name").html(ZPForm.getCurrentFormMode() + "&nbsp;" + ZPForm.getFormDisplayName()) } "function" == typeof callback && ZPForm.LAYOUT.data("callback", callback), ZPForm.isEmbedForm ? Layout.Page.container.html(ZPForm.LAYOUT) : Layout.Page.container.append(ZPForm.LAYOUT), ZPForm.LAYOUT.find(".modal-body").html(ZPeople.LOADING_HTML), ZPForm.toggleFormPage(!0) } else ZPForm.LAYOUT.find(".modal-body").html(ZPeople.LOADING_HTML), ZPForm.LAYOUT.hasClass("in") ? void 0 !== callback && "function" == typeof callback && callback() : (ZPForm.toggleFormPage(!0), Layout.Page.container.find("#jobsch_modelmask").css("z-index", "899")); "P_Goals" == ZPForm.getTableName() && void 0 != ZPForm.CURRFORM_PARAM.addmodclass && ZPForm.LAYOUT.addClass(ZPForm.CURRFORM_PARAM.addmodclass) } }, addUserDirectly: function (data) { var formCompObj = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], formId = Layout.Page.urlparam.formId, pwdPcyDtls = formCompObj.pwdPolicy, directAddDiv = $("div#directAdd"), tempPwdDiv = $("div#tempPwd"), emailLabel = $("div[folabel=EmailID]"), inputEmail = $("input[name=EmailID]"); if ($("#error_message").remove(), "direct" === data) { $("[name=EmailID]").val(""); var fieldElm = ""; ZPForm.FORM_COMPONENT_DATA[formId].message.formComponentDetails[0].sectionId; fieldElm += '<div id="directAdd">', fieldElm += '<div class = "form-group" id ="domainListDiv">', fieldElm += '<div class="col-md-6 PL0">', fieldElm += '<label class ="Matry" id="domainlabel"><sup>*</sup>' + ZPI18N.getString("zp.domainemail") + "</label>", fieldElm += '<input fieldtype="' + ZPForm.Field.TEXT + '" class = "form-control" type ="text" name="domainEmail" value="" onkeyup="ZPForm.showPreview(this)" /></div> ', fieldElm += '<span	id="splChar" class="DIB MT25 col-md-1"> @ </span>', fieldElm += '<div class="col-md-5 PR0 MT3"><select class="selectBox MT15" id="domainListing" onchange="ZPForm.showPreviewdom(this)">', $.each(formCompObj.domainsList, function (key, value) { fieldElm += '<option value="' + value + '" default="--Select--"> ' + value + " </option>" }), fieldElm += "</div>"; var tempPasswdElm = ""; if (tempPasswdElm += "</div></div>", tempPasswdElm += '<div class = "form-group" id="tempPwd">', tempPasswdElm += '<label class ="Matry" id="pwdLabl"><sup>*</sup>' + ZPI18N.getString("zp.passwd") + '</label><a data-placement="right" class="dvTool IC-qus S15 gry DN PL5" role="button" tabindex=0 data-trigger="hover" data-toggle="popover" data-content="" id="empFormPwd"></a>', tempPasswdElm += '<input fieldtype="4" class = "form-control" type ="text" name="temppwd" value="" />', tempPasswdElm += "</div>", directAddDiv.remove(), tempPwdDiv.remove(), $(fieldElm).insertBefore(emailLabel.closest("div.form-group")), $(tempPasswdElm).insertAfter(emailLabel.closest("div.form-group")), !jQuery.isEmptyObject(pwdPcyDtls)) { $("#empFormPwd").removeClass("DN"), $(".dvShwRectcon1").remove(), User.pwdPol = pwdPcyDtls; var pwdDtls = User.constructPasswordPolicyElms(pwdPcyDtls); $("#zp_form_container").find(".row:last").append('<div class="dvShwRectcon1 DN"><div class="S12">' + pwdDtls + "</div></div>"), $("#empFormPwd").popover({ html: !0, content: function () { return $(".dvShwRectcon1").html() } }) } inputEmail.attr("disabled", "disabled"), ZPForm.LAYOUT.find(".selectBox").select2() } else "invite" === data && (directAddDiv.remove(), tempPwdDiv.remove(), inputEmail.removeAttr("disabled")) }, showPreview: function (thisObj) { var currVal = $(thisObj).val(); if ("" != currVal) { var emailId = currVal + "@" + $($("select#domainListing")).val(); ZPForm.LAYOUT.find("[name=EmailID]").val(emailId) } else "" == currVal && ZPForm.LAYOUT.find("[name=EmailID]").val("") }, showPreviewdom: function (thisObj) { if ("" != ZPForm.LAYOUT.find("[name=domainEmail]").val()) { var currVal = $(thisObj).val(), domain = ZPForm.LAYOUT.find("[name=EmailID]").val().split("@"), emailId = domain[0] + "@" + currVal; ZPForm.LAYOUT.find("[name=EmailID]").val(emailId) } }, setFormOuterContent: function (formPageType, isSingleColumn) { var formBody = ZPForm.LAYOUT.find("#zp_form_outer_container"); if (ZPForm.isAddMode() && formBody.empty(), 0 === formPageType) formBody.append('<div class="" id="zp_form_body"></div>'); else { formBody.append('<div class="MPnav Mulnav DN"><ul class="nav navbar-nav" id="zp_form_section_list"></ul></div>'); var mulpageouthtml = '<div class="zpcont-dt zpmul-cont ' + (ZPForm.isViewMode() ? "zpnew-recview " : "zpnew-recedit ") + (isSingleColumn ? "ZPSCol" : "") + '" id="zp_form_body"></div>'; formBody.append(mulpageouthtml) } ZPForm.CURRFORM_PARAM.isFromSelfService || void 0 == ZPForm.CURRFORM_PARAM.formId || "2803000051327673" != ZPForm.CURRFORM_PARAM.formId || ZPForm.LAYOUT.addClass("PopLgModel") }, populateFields: function (formComp) { $.each(formComp.formComponentDetails, function () { var secObj = this; void 0 !== secObj.column1 && secObj.column1.length > 0 && $.each(secObj.column1, function (index) { ZPForm.FORM_COMPONENTS[this.formComponentId] = this }), void 0 !== secObj.column2 && secObj.column2.length > 0 && (secObj.hasField = !0, $.each(secObj.column2, function (index) { ZPForm.FORM_COMPONENTS[this.formComponentId] = this })) }) }, formatFields: function (formComp) { var isCol1Empty = !0, isCol2Empty = !0, noField = !0, hasFieldEditPerm = !1, hasEditableField = !1; $.each(formComp.formComponentDetails, function () { var secObj = this; void 0 !== secObj.column1 && secObj.column1.length > 0 && (secObj.hasField = !0, isCol1Empty && (isCol1Empty = !1), noField = !1, $.each(secObj.column1, function (index) { this.fieldType == zpconst.FieldType.SCRIPT || this.fieldType == zpconst.FieldType.AUTONUMBER || 0 === this.editperm && !ZPForm.isLocAdmin() || (hasFieldEditPerm = !0, secObj.isFieldEditable = !0, this.isFieldDependent = ZPForm.isFieldDependent(formComp.dependntFieldMappings, this.formComponentId)), this.fieldType != zpconst.FieldType.PLAIN_TEXT && this.fieldType != zpconst.FieldType.SCRIPT && this.fieldType != zpconst.FieldType.AUTONUMBER && (hasEditableField = !0), this.fieldType === ZPForm.Field.LOOKUP && (formComp.hasLookUp = !0) })), void 0 !== secObj.column2 && secObj.column2.length > 0 && (secObj.hasField = !0, isCol2Empty && (isCol2Empty = !1), noField = !1, $.each(secObj.column2, function (index) { this.fieldType == zpconst.FieldType.SCRIPT || this.fieldType == zpconst.FieldType.AUTONUMBER || 0 === this.editperm && !ZPForm.isLocAdmin() || (hasFieldEditPerm = !0, secObj.isFieldEditable = !0, this.isFieldDependent = ZPForm.isFieldDependent(formComp.dependntFieldMappings, this.formComponentId)), this.fieldType != zpconst.FieldType.PLAIN_TEXT && this.fieldType != zpconst.FieldType.SCRIPT && this.fieldType != zpconst.FieldType.AUTONUMBER && (hasEditableField = !0), this.fieldType === ZPForm.Field.LOOKUP && (formComp.hasLookUp = !0) })) }), (isCol2Empty || isCol1Empty) && (formComp.singleColumn = !0), formComp.hasEditableField = hasEditableField, formComp.isFieldEditable = hasFieldEditPerm, formComp.noField = noField }, showNoData: function (message) { var messageHTML = $('<div class="col-lg-12 text-center"><div id="zp_views_norecclass" class="PArds"></div><h2 id="zp_nodata" class="ZPNdt">' + message + "</h2></div>"); Layout.Page.container.find("#zp_form_editin_singlerec,#ZP_Form_MoreOpt").addClass("DN"), ZPForm.PAGEMODE ? $("#onBoardingRightPane").is(":visible") ? ($("#onBoardingRightPane").find("#" + ZPForm.PAGEID).html(messageHTML), $("#onBoardingRightPane").find("[id*=zp_addedit_record_]").hide(), $("#onBoardingRightPane").find("#" + ZPForm.PAGEID).show()) : void 0 !== ZPForm.CURRFORM_PARAM.loadingContainer ? Layout.Page.container.find("#" + ZPForm.CURRFORM_PARAM.loadingContainer).html(messageHTML) : ZPForm.LAYOUT.html(messageHTML) : ZPForm.LAYOUT.find(".modal-body").html(messageHTML) }, registerHiddenCallback: function (currentTimerData) { ZPForm.formid != ZPForm.CURRFORM_PARAM.formId || ZPForm.isQuickAdd || ZPForm.isrelformrelfields || ZPForm.isrelfieldsingelrecview || ZPForm.isfromrelfieldedit || ZPForm.isEmbedForm || (ZPForm.IS_RESUBMIT = !1, ZPView.isFromrelfields = !1, void 0 != ZPForm.FORM_CLASS && "1" != ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE && $("body").addClass(ZPForm.FORM_CLASS), ZPForm.CURRFORM_PARAM.disableUrlTrack ? (ZPForm.CURRFORM_PARAM.refreshView || "P_Location" === ZPForm.getTableName()) && ("P_Location" === ZPForm.getTableName() ? window.location.href = "#admin/organization/locations" : (ZPForm.CURRFORM_PARAM.refreshView = !1, ZPView.refresh(!0))) : -1 === Layout.Page.pageId.indexOf("leavetracker-views-form") && void 0 !== ZPForm.CURRFORM_PARAM.callback && "function" == typeof ZPForm.CURRFORM_PARAM.callback ? currentTimerData ? ZPForm.CURRFORM_PARAM.callback(ZPForm.Record.SUCCESS_PKID, currentTimerData) : ZPForm.CURRFORM_PARAM.callback(ZPForm.Record.SUCCESS_PKID) : void 0 !== Layout.Page.urlparam.viewId && void 0 !== Layout.Page.urlparam.formId && (window.location.href = "#" + ZPView.getHashForViewChange(Layout.Page.urlparam.viewId)), void 0 !== ZPForm.CURRFORM_PARAM.parent ? (ZPForm.updateCurrFormComponent(ZPForm.CURRFORM_PARAM.parent), ZPForm.CURRFORM_PARAM.isPageMode && (ZPForm.LAYOUT = Layout.Page.container.find("#" + ZPForm.CURRFORM_PARAM.containerId))) : void 0 === ZPForm.CURRFORM_PARAM.isFromSService && (ZPForm.CURRFORM_PARAM = {}), void 0 !== ZPForm.FIELD_LAYOUT && null !== ZPForm.FIELD_LAYOUT && ZPForm.Field.Edit.cancel(), Layout.Page.container.find("#tt_hours_summary").length > 0 && Layout.Page.container.find("#tt_hours_summary").removeClass("DN"), -1 !== Layout.Page.hash.indexOf("#selfservice/user/profile") && (ZPForm.updateCurrFormComponent({ formId: ZPeople.EMP_FORMID, recordId: SelfService.getUserId(), formMode: "VIEW", disableUrlTrack: !0 }), void 0 == ZPForm.CONF && (ZPForm.CONF = {}))) }, showFormError: function (message, isFieldEditable, noField) { noField ? message = ZPI18N.getString("zp.nofieldspresent") : isFieldEditable || ZPForm.isViewMode() ? void 0 === message && (message = ZPI18N.getString("zp.accessdeniedcontactadmin")) : message = ZPI18N.getString("zp.noeditablefields"), ZPForm.showErrMsg(message) }, showErrMsg: function (message) { ZPForm.showNoData(message) }, getPermissionBasedRoleList: function (formId) { ZPForm.getAllRolesformId = formId; var count = 0; if (ZPForm.ALL_ROLE_LIST = {}, $.ajax({ type: "POST", async: !1, url: ZPForm.URL, data: { mode: "getPermissionBasedRoleList", conreqcsr: csrfToken, formId: formId }, success: function (data) { data.success && (ZPForm.ALL_ROLE_LIST = data.roleDetails) } }), ZPForm.isAdmin()) var roleHtml = '<li><a onclick="ZPForm.rolechange(this)" value="0"><span>' + ZPI18N.getString("zp.admin") + "</span></a></li>"; else var roleHtml = '<li><a onclick="ZPForm.rolechange(this)" value="-1"><span>' + ZPI18N.getString("zp.admin") + "</span></a></li>"; return void 0 != ZPForm.ALL_ROLE_LIST && (count = Object.keys(ZPForm.ALL_ROLE_LIST).length), count > 0 && $.each(ZPForm.ALL_ROLE_LIST, function (key, value) { roleHtml += '<li><a onclick="ZPForm.rolechange(this)" value="' + key + '"><span>' + value + "</span></a></li>" }), roleHtml }, rolechange: function (obj) { var roleId = $(obj).attr("value"), roleName = $(obj).find("span").text(); if (ZPForm.LAYOUT.find("#heading").find("#roleExist").text(ZPI18N.getString("zp.showingas") + " " + roleName), "-1" == roleId) ZPForm.isRoleBasedPreview = !0, ZPForm.isAdminRedirect = !0, ZPForm.load({ formId: ZPForm.getAllRolesformId, formMode: "ADD", roleId: -1 }, !0), ZPForm.LAYOUT.find("#zp_forms_addnew_btn").remove(), ZPForm.LAYOUT.find("#zp_forms_add_btn").remove(); else { ZPForm.roleId = roleId, ZPForm.isRoleBasedPreview = !0; var json = { formId: ZPForm.getAllRolesformId, formMode: "ADD" }; json.isRoleBasedPreview = !0, ZPForm.isAdminRedirect && (json.isAdminRedirect = !0), ZPForm.load(json, !0), ZPForm.LAYOUT.find("#zp_forms_addnew_btn").remove(), ZPForm.LAYOUT.find("#zp_forms_add_btn").remove() } }, constructFields: function (formCompObj, params) { Layout.Page.container.find("#tt_hours_summary").length > 0 && Layout.Page.container.find("#tt_hours_summary").addClass("DN"), ZPForm.cancelmsgactive = !1, formCompObj.lastprev = !1, ZPForm.isPreviewForm && (formCompObj.lastprev = !0); var formComp = formCompObj.message; if (ZPForm.isDraftrec = !1, formCompObj.hasOwnProperty("ruleArray") && ZPFRules.constructRulesJson(formCompObj, params), !ZPForm.PRINT) { if (void 0 !== formCompObj.formDetails) { ZPForm.isAdminRedirect && (formCompObj.formDetails.addPerm = 3), ZPForm.updateFormConf(formCompObj.formDetails); var tableName = ZPForm.getTableName(); if ("P_PerformanceAppraisal" === tableName) ZPForm.LAYOUT.find("#zp_form_header_name").html(ZPForm.getFormDisplayName()); else if ("P_MultiRater" === ZPForm.getTableName()) { var headerStr = ZPI18N.getString("zp.multiraterfeedback"); ZPForm.LAYOUT.find("#zp_form_header_name").html(headerStr), -1 !== Layout.Page.hash.indexOf("#performance/myteam/review") && ZPForm.LAYOUT.find("#zp_form_editin_singlerec").remove() } else if ("P_MultiRater_Approval" === ZPForm.getTableName()) ZPForm.LAYOUT.find("#zp_form_header_name").html(Appraisal.MultiRater.modalTitle), ZPForm.LAYOUT.find("#zp_form_editin_singlerec").remove(); else if ("P_TimesheetJob" === tableName || "P_TimesheetJobsList" === tableName || "P_ClientDetails" === tableName || "P_Timesheet" === tableName) { var dispName = Timetracker.forms.getSingularDisplayNameForForms(tableName, ZPForm.getFormDisplayName()); ZPForm.LAYOUT.find("#zp_form_header_name").html(ZPForm.getCurrentFormMode() + "&nbsp;" + dispName) } else if (ZPForm.isViewMode() && "P_Employee" === ZPForm.getTableName()) { var userDtls = ZPeople.getUserDetailsById(ZPForm.CURRFORM_PARAM.recordId), empFormHeader = '<img src="' + userDtls.avatar + '" class="Usrimg FL"><span class="ssp-un">' + userDtls.fname + " " + userDtls.lname + " <span>" + userDtls.empid + "</span></span>"; ZPForm.LAYOUT.find("#zp_form_headerdisp").html(empFormHeader) } else ZPForm.LAYOUT.find("#zp_form_header_name").length <= 0 && ZPForm.LAYOUT.find("#zp_form_headerdisp").html('<span class="ssp-un" id="zp_form_header_name"></span>'), ZPForm.LAYOUT.find("#zp_form_header_name").html(ZPForm.getCurrentFormMode() + "&nbsp;" + ZPForm.getFormDisplayName()) } if (ZPForm.isPreviewForm) { ZPForm.LAYOUT.find("#heading").find("#prerole").remove(); var selectHtml = '<div class="FR PR MR25 MT2" id="prerole"><a class="btn btn-default btn-small dropdown-toggle" id="roleExist" data-toggle="dropdown"><span class="IC-ar-dwn S9 ML3"></span></a><ul class="dropdown-menu bullet pull-left MT5" role="menu">' + ZPForm.getPermissionBasedRoleList(params.formId) + "</ul></div>"; if (ZPForm.LAYOUT.find("#heading").append(selectHtml), ZPForm.isAdminRedirect) ZPForm.LAYOUT.find("#heading").find("#roleExist").text(ZPI18N.getString("zp.showingas") + " " + ZPI18N.getString("zp.admin")); else { var roleName = ZPForm.ALL_ROLE_LIST[ZPForm.roleId]; void 0 == roleName && (roleName = ZPeople.CURR_USER.roleName), ZPForm.LAYOUT.find("#heading").find("#roleExist").html(ZPI18N.getString("zp.showingas") + " " + roleName) } } if (formCompObj.code !== ZPeople.ResponeCodes.SUCCESS) return 7040 == formCompObj.code && ZPForm.isPreviewForm ? (ZPForm.isRoleBasedPreview = !0, ZPForm.roleId = "-1", void ZPForm.load({ formId: params.formId, formMode: "ADD", isAdminRedirect: !0, isRoleBasedPreview: !0 }, !0)) : void ZPForm.showFormError(formCompObj.message, !0, !1); void 0 === ZPForm.CURRFORM_PARAM.formId && (ZPForm.CURRFORM_PARAM.formId = ZPForm.CONF.formId) } if (ZPForm.isEditMode() || ZPForm.isViewMode()) { ZPForm.getSingleRecordDetail(); var singledet = ZPForm.getSingleRecord(); if (singledet.record.code != zpconst.ResponseCodes.API_ERR_NO_ERROR) return void ZPForm.showFormError(singledet.message, !0, !1); (void 0 != singledet && 4 == singledet.record.message.approvalStatus || ZPUtil.checkIsExistInArray(ZPView.draftrecids, ZPView.recid)) && (ZPForm.isDraftrec = !0), ZPForm.constructSingleFieldRecordDetails(singledet) } if (!(ZPForm.PRINT || void 0 == ZPForm.CONF || ZPForm.isLocAdmin() || ZPForm.isDraftrec || ZPForm.Record.isDraft || ZPForm.isProjectManager())) { if (ZPForm.isAddMode() && (formCompObj.code === ZPeople.ResponeCodes.PERMISSION_ERR || 0 === ZPForm.Permission.getAddPerm())) return void ZPForm.showErrMsg(ZPI18N.getString("zp.permdeniedtoadd")); if (ZPForm.isEditMode() && (formCompObj.code === ZPeople.ResponeCodes.PERMISSION_ERR || 0 === ZPForm.Permission.getEditPerm())) return void ZPForm.showErrMsg(ZPI18N.getString("zp.permdeniedtoedit")) } if (ZPForm.Record.isDraft = !1, ZPForm.isPreviewForm) { ZPForm.LAYOUT.find("#heading").find("#prerole").remove(); var selectHtml = '<div class="FR PR MR25 MT2" id="prerole"><a class="btn btn-default btn-small dropdown-toggle" id="roleExist" data-toggle="dropdown"><span class="IC-ar-dwn S9 ML3"></span></a><ul class="dropdown-menu bullet pull-left MT5" role="menu">' + ZPForm.getPermissionBasedRoleList(params.formId) + "</ul></div>"; if (ZPForm.LAYOUT.find("#heading").append(selectHtml), ZPForm.isAdmin() || ZPForm.isAdminRedirect) ZPForm.LAYOUT.find("#heading").find("#roleExist").text(ZPI18N.getString("zp.showingas") + " " + ZPI18N.getString("zp.admin")); else { var roleName = ZPForm.ALL_ROLE_LIST[ZPeople.CURR_USER.roleId]; ZPForm.LAYOUT.find("#heading").find("#roleExist").text(ZPI18N.getString("zp.showingas") + " " + roleName) } } formCompObj.formDetails.isExportAllowed || (ZPForm.LAYOUT.find("#download_grp").addClass("DN"), ZPForm.LAYOUT.find("#li_downloadAsPDF,#mailmerge_download").hide()); var tableName = ZPForm.getTableName(); if (ZPForm.isAddMode() && !ZPUtil.checkIsExistInArray(ZPForm.primLkpChangeRestrictedForms, tableName) && null == ZPForm.primLkpType && null == ZPForm.primLkpVal && ((isAdminProfile || ZPForm.isLocAdmin()) && ZPUtil.checkIsExistInArray(formComp.locUsers, erecno) ? ZPForm.primLkpVal = erecno : ZPForm.Permission.getAddPerm() > zpconst.Permission.NO_DATA && (ZPForm.primLkpVal = ZPForm.Permission.getAddPerm() == zpconst.Permission.SUB_DATA ? null : erecno, ZPForm.primLkpType = ZPForm.Permission.getAddPerm() == zpconst.Permission.SUB_DATA ? zpconst.Permission.SUB_DATA : zpconst.Permission.MY_DATA)), ZPForm.isFieldsChange = !1, ZPForm.primLkpId = null, ZPForm.PRINT || (void 0 === ZPeople.EMP_FORMID && "P_Employee" === tableName && (ZPeople.EMP_FORMID = ZPForm.CONF.formId), "ADD" == ZPForm.MODE && "P_Employee" == tableName ? null !== formCompObj.domainsList && "" !== formCompObj.domainsList && 1 == formCompObj.isOrgAdmin && (ZPForm.LAYOUT.find("div#inviteRadio").remove(), ZPForm.LAYOUT.find("div#heading").append('<div class="MT10 PL40" id="inviteRadio"> <label class="radio DIB ML30"><input type="radio" name="invitation" value="' + ZPI18N.getString("zp.inviteUserType") + '" onchange="ZPForm.addUserDirectly(\'invite\');" checked/><span>Invite User</span></label> <label class="radio DIB ML10"><input type="radio" name="invitation" value="' + ZPI18N.getString("zp.directAddType") + '" onchange="ZPForm.addUserDirectly(\'direct\');"/><span>Add User Directly</span></label></div>')) : ZPForm.LAYOUT.find("div#inviteRadio").remove()), ZPForm.LAYOUT.data("preparam", ZPForm.preparam), ZPForm.LAYOUT.data("prepageid", ZPForm.prepageid), ZPForm.LAYOUT.data("curpageid", ZPForm.PAGEID), ZPForm.LAYOUT.data("premode", ZPForm.MODE), ZPForm.isQuickAdd || ZPForm.isrelformrelfields ? (ZPForm.CURRFORM_PARAM.tableName = void 0 !== formCompObj.formDetails && formCompObj.formDetails.hasOwnProperty("tableName") ? formCompObj.formDetails.tableName : "", ZPForm.LAYOUT.attr("id", "zp_quickadd_record_" + ZPForm.CURRFORM_PARAM.formId)) : ZPForm.isrelfieldsingelrecview ? (ZPForm.CURRFORM_PARAM.tableName = void 0 !== formCompObj.formDetails && formCompObj.formDetails.hasOwnProperty("tableName") ? formCompObj.formDetails.tableName : "", ZPForm.LAYOUT.attr("id", "zp_relfielsingle_record_" + ZPForm.CURRFORM_PARAM.formId)) : ZPForm.isfromrelfieldedit ? ZPForm.LAYOUT.attr("id", "zp_relfieledit_record_" + ZPForm.CURRFORM_PARAM.formId) : ZPForm.LAYOUT.attr("id", "zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId), !ZPForm.PRINT) { ZPForm.isDraftrec || ZPForm.isRecordAdmin() || ZPForm.isProjectManager() || !(ZPForm.isAddMode() && 0 === ZPForm.Permission.getAddPerm() || ZPForm.isEditMode() && 0 === ZPForm.Permission.getEditPerm()) || (formComp.isFieldEditable = !1), (void 0 === ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId] && formComp.isFieldEditable !== !1 || ZPForm.isRoleBasedPreview || ZPForm.isEmbedForm || "undefined" != typeof SelfService && SelfService.Info.ISFORM_COMPLOADED) && (ZPForm.formatFields(formComp), ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId] = formCompObj, ZPForm.populateFields(formComp), "undefined" != typeof SelfService && (SelfService.Info.ISFORM_COMPLOADED = !1)); var isPAComEnabled = "P_MultiRater" === ZPForm.getTableName() && 0 !== Object.keys(formCompObj.enabledComponents).length, reviewHist = "P_PerformanceAppraisal" === ZPForm.getTableName() && params.viewmyratings; if (!(!formComp.noField && (ZPForm.isViewMode() || formComp.hasEditableField && (ZPForm.isRecordAdmin() || formComp.isFieldEditable) || isPAComEnabled) || reviewHist)) return void ZPForm.showFormError(formCompObj.message, formComp.isFieldEditable, formComp.noField) } var isSingleCol = formComp.singleColumn; ZPForm.CURRFORM_PARAM.hasLookUp = formComp.hasLookUp; var formPageType = ZPForm.getPaginationType(); ZPForm.PRINT && (formPageType = 0), 1 == formPageType && (ZPForm.FORM_CLASS = $("body").attr("class"), $("body").addClass("ZPsbarMini")), ZPForm.CURRFORM_PARAM.isSingleCol = isSingleCol, ZPForm.PAGEMODE || (ZPForm.setFormOuterContent(formPageType, isSingleCol), formComp.iCache || (isSingleCol && 1 === formPageType ? ZPForm.LAYOUT.addClass("PopMdModel") : 1 == formPageType && (ZPForm.LAYOUT.addClass("PopMulModel"), ZPForm.LAYOUT.removeClass("PopSsModel")))), isSingleCol && ZPForm.LAYOUT.addClass("PopSgModel"); var fieldHtml = ""; fieldHtml += ZPForm.PRINT ? '<div class="ZPSSlft"><div class="ZPTcont"><div class="ZPSEdt">' : ZPForm.isViewMode() ? '<div class="' + (1 === formPageType ? "" : "zpcont-dt zpnew-recview") + (isSingleCol ? " ZPSCol" : "") + (ZPForm.PAGEMODE ? " M0" : "") + '">' : '<form class="' + (1 == formPageType ? "" : "zpcont-dt ") + (ZPForm.PAGEMODE ? "PT20 ZPviw " : "") + (isSingleCol ? "zpnew-recedit ZPSCol " : "zpnew-recedit") + '" id="zp_form_container" action=' + (ZPForm.isEmbedForm ? "embedFormaddUpdateRecord.hr" : "/addUpdateRecord.zp") + ' target="zp_form_response" method="post" enctype="multipart/form-data">'; var sectionLst = "", visibleIndex = 0; if ($.each(formComp.formComponentDetails, function (index) { ZPForm.isTabularsecForQuicAdd = !1, !this.hasField || !this.isFieldEditable && ZPForm.isAddMode() || this.isTabular && ZPForm.isQuickAdd || (null == ZPForm.primLkpType || !ZPForm.isAddMode() || ZPForm.checkSectionEditableWithPerm(this)) && (visibleIndex++, 0 === formPageType || ZPForm.PAGEMODE ? (ZPForm.PRINT ? fieldHtml += '<h3 class="MT0I PR">' + this.sectionName + '</h3><div class="ZPSScont"><div class="form-horizontal  ZPprtviw ZPviw">' : ZPForm.isQuickAdd && this.isTabular || (fieldHtml += ZPForm.PAGEMODE && !$("#onBoardingRightPane").is(":visible") ? '<h3 class="zpcont-title">' + this.sectionName + ("VIEW" !== ZPForm.MODE && this.isTabular ? '<div class="IC-plus-big S18 blu CP FR MR20"  data-placement="top" data-toggle="tooltip" title="' + ZPI18N.getString("zp.addrow") + '" istabadd="true" onclick="ZPForm.addTabularSectionRow(\'' + this.sectionId + "');\"></div>" : "") + '</h3><div class="ZPSScont">' : '<h3 issec="true" id="' + this.sectionId + '" class="zpcont-title"><span class="ZPbold">' + this.sectionName + "</span>" + ("VIEW" !== ZPForm.MODE && this.isTabular ? '<a class="IC-plus-big" istabadd="true" onclick="ZPForm.addTabularSectionRow(\'' + this.sectionId + "');\"></a>" : "") + "</h3>"), this.isGridType ? fieldHtml += '<div class="table-responsive label-body" id="zp_section_fields_' + this.sectionId + '" row="1" istabular="' + this.isTabular + '" isgrid="' + this.isGridType + '"><table class="table table-hover' + (ZPForm.PAGEMODE ? "" : " Vlis bgc") + '">' : (fieldHtml += '<div class="row" id="zp_section_fields_' + this.sectionId + '" secid="' + this.sectionId + '" row="1" istabular="' + this.isTabular + '" isgrid="' + this.isGridType + '">', !ZPForm.isViewMode() && this.isTabular && (fieldHtml += '<div class="row ZPFrow">'))) : (sectionLst += '<li id="zp_form_section_' + this.sectionId + '" row="1" secid="' + this.sectionId + '" title="' + this.sectionName + '">' + this.sectionName + "</li>", ZPForm.isViewMode() || 1 !== formPageType || !this.isTabular || ZPForm.isQuickAdd || (fieldHtml += '<h6 class="MT0 DN" id="zp_tabular_sec_header_' + this.sectionId + '"><div class="FR"  istabadd="true" onclick="ZPForm.addTabularSectionRow(\'' + this.sectionId + '\');"><div class="IC-plus-big S14 blu CP MR5 FL"></div><a href="javascript:;">' + ZPI18N.getString("zp.addrow") + '</a></div><div class="clearfix"></div></h6>'), fieldHtml += this.isGridType ? '<div class="table-responsive label-body DN" id="zp_section_fields_' + this.sectionId + '" row="1" istabular="' + this.isTabular + '" isgrid="' + this.isGridType + '"><table class="table table-hover Vlis bgc" >' : '<div class="row DN" id="zp_section_fields_' + this.sectionId + '" row="1" istabular="' + this.isTabular + '" isgrid="' + this.isGridType + '">'), this.isGridType ? ((ZPForm.isAddMode() || ZPForm.PRINT) && (this.isTabular && (ZPForm.isTabularsecForQuicAdd = !0), fieldHtml += ZPForm.getTabularGridHeaders(this.column1, [erecno]) + '<tbody id="zp_forms_tabluar_' + this.sectionId + '" >' + ZPForm.getFieldFormat(this.column1, this.isGridType, this.sectionId)), fieldHtml += "</tbody></table></div>") : (this.isTabular && (ZPForm.isTabularsecForQuicAdd = !0), (ZPForm.isAddMode() || !this.isTabular) && (fieldHtml += ZPForm.getFieldFormat(this.column1, this.isGridType) + ZPForm.getFieldFormat(this.column2, this.isGridType, this.sectionId)), !ZPForm.isViewMode() && this.isTabular && (fieldHtml += '<td><i class="IC-cls-frm  S18 gry Rmicon ML10" id="zp_form_deletetabular_row" secId="' + this.sectionId + '" onclick="ZPForm.Record.removeinlineTabularRow(this);"></i></td></div>'), (!this.isGridType && (!isSingleCol || this.isTabular) || 0 !== formPageType && isSingleCol) && (fieldHtml += "</div>")), ZPForm.PAGEMODE && !ZPForm.PRINT && (fieldHtml += "</div>"), ZPForm.PRINT && (fieldHtml += "</div></div>"), isSingleCol && 0 == formPageType && !this.isTabular && (fieldHtml += "</div>")) }), ZPForm.isViewMode() && !ZPForm.PRINT && !ZPForm.isrelfieldsingelrecview && 0 !== formComp.relatedFields.length && (!ZPForm.CURRFORM_PARAM.isProfile || ZPForm.isDashcal)) if (ZPForm.isDashcal = !1, 0 === formPageType || ZPForm.PAGEMODE) { fieldHtml += '<h3 class="zpcont-rel-title" relformhead="true"><span class="ZPbold">' + ZPI18N.getString("zp.relatedforms") + '</span><div class="clearfix"></div></h3>'; var tst = ""; $.each(formComp.relatedFields, function (index) { var relatedfield = formComp.relatedFields[index]; (0 === formPageType || ZPForm.PAGEMODE) && (tst += '<div><div class="label-main ZPExpCl"><div class="label-head PL0I"><a data-toggle="collapse"  onclick="RelatedFields.constructrelatedfieldsviewinsiglerecord(this)" data-target="#zp_dash_rfdata_' + relatedfield.formCompid + '" aria-expanded="false" class="collapsed" fcid="' + relatedfield.formCompid + '" viewId="' + relatedfield.viewId + '" formId="' + relatedfield.formId + '" linkedFcid="' + relatedfield.linked_fcid + '" order="' + relatedfield.order + '">' + relatedfield.title + "</a>" + (relatedfield.isLocAdmin || 0 !== relatedfield.addPerm && (4 !== relatedfield.addPerm || 0 !== ZPeople.getSubUsers().length) ? '<div class="IC-plus-big togg-plus" linkedFcid="' + relatedfield.linked_fcid + '" onclick=' + (-1 === relatedfield.linked_fcid ? "Task.showQuickTask(this)" : "RelatedFields.addRecordPage(this)") + "></div>" : "") + "</div></div></div>") }), fieldHtml += tst } else sectionLst += '<li id="zp_form_section_' + ZPForm.CURRFORM_PARAM.formId + '" secid="' + ZPForm.CURRFORM_PARAM.formId + '" onclick="RelatedFields.constructmultipagerelfields()">' + ZPI18N.getString("zp.relatedforms") + "</li>", ZPForm.relformComp = formComp; if (ZPForm.PRINT && (fieldHtml += "</div>"), fieldHtml += "</div>", ZPForm.FORM_PAGED && (fieldHtml += "</div>"), (ZPForm.isAddMode() || ZPForm.isEditMode()) && (fieldHtml += '<input type="hidden" value="' + tableName + '" name="zp_tableName"/>', isAuthreq && (fieldHtml += '<input type="hidden" value="' + _LOGGEDIN_ZUID + '" name="loginUserZUID"/>', fieldHtml += '<input type="hidden" value="' + csrfToken + '" name="' + csrfParamName + '"/>'), fieldHtml += '<input type="hidden" value="' + ZPForm.CURRFORM_PARAM.formId + '" name="zp_formId"/>', ZPForm.isEditMode() && !ZPForm.IS_RESUBMIT ? (fieldHtml += '<input type="hidden" value="updateRecord" name="zp_mode"/>', fieldHtml += '<input type="hidden" value="' + ZPForm.CURRFORM_PARAM.recordId + '" name="zp_recordId"/>', "P_PerformanceAppraisal" === tableName && ZPForm.isEditMode() && (fieldHtml += '<input type="hidden" name="islocallysaved" id="islocallysaved" value="false"/>')) : fieldHtml += '<input type="hidden" value="addRecord" name="zp_mode"/>'), fieldHtml += ZPForm.isViewMode() ? "</div>" : "</form>", ZPForm.PAGEMODE && !ZPForm.isViewMode() && $("#onBoardingRightPane").is(":visible") && !ZPOnboarding.readOnly && (fieldHtml += '<div class="ZPSScont ZPPcrdiv"><button class="btn btn-primary" type="button" onclick="ZPForm.Record.validateAndSubmit();">' + ZPI18N.getString("zp.submit") + '</button><button onclick="ZPForm.editProfileCancelCallback()" class="btn btn-default ML10" type="button">' + ZPI18N.getString("zp.cancel") + "</button></div>"), (ZPForm.isAddMode() || ZPForm.isEditMode() || ZPForm.IS_RESUBMIT) && ZPForm.isApprovalEnabled() && "APPROVER_CHOOSEN_BY_USER" === ZPForm.getApproverType()) { var approvalHtml = $('<div class="row"><div class="col-md-8 col-md-offset-2"><div><div class="zp-label" id="zp_form_chooseappr_cont"><label class="zplt-label">' + ZPI18N.getString("zp.chooseapprover") + '</label><div class="zprt-label" name="approverSelectBox"><select id="zp_form_chooseapprover" name="zp_approverId">' + ZPeople.User.getEmployeeListFormatByType("option") + "</select></div></div></div></div></div>"); fieldHtml = $(fieldHtml).append(approvalHtml) } if (ZPForm.PRINT ? ZPForm.PRINTPAGE_DATA = $(fieldHtml) : ZPForm.FIELD_LAYOUT = $(fieldHtml), !ZPForm.PAGEMODE && !ZPForm.CURRFORM_PARAM.modalPopupView) { var footer = ZPForm.FOOTER; ZPForm && "P_Timesheet" === ZPForm.getTableName() && (footer = ZPForm.TIMELOG_FOOTER), ZPForm.isViewMode() && ZPForm.isApprovalEnabled() && !ZPForm.isDraftrec && (footer = ZPForm.APPROVALFOOTER), ZPForm.LAYOUT.find(".modal-footer").length > 0 ? ZPForm.LAYOUT.find(".modal-footer").replaceWith(footer) : ZPForm.LAYOUT.find(".modal-body").after(footer), 1 === formPageType && ZPForm.LAYOUT.find("#zp_form_section_list").append(sectionLst), (1 == ZPForm.isQuickAdd || ZPForm.isrelformrelfields) && (ZPForm.LAYOUT.find("#zp_forms_addnew_btn").remove(), ZPForm.LAYOUT.find("#zp_forms_savedraft_btn").addClass("DN")), (ZPForm.isRoleBasedPreview || ZPForm.isPreviewForm) && (ZPForm.LAYOUT.find("#zp_forms_addnew_btn").remove(), ZPForm.LAYOUT.find("#zp_forms_add_btn").remove(), ZPForm.LAYOUT.find("#zp_forms_savedraft_btn").remove()) } (ZPForm.isEditMode() || ZPForm.isAddMode()) && (ZPForm.isAddMode() && (ZPForm.primLkpVal = null, ZPForm.isAdmin() && !ZPForm.isLocAdmin() || ZPUtil.checkIsExistInArray(ZPForm.primLkpChangeRestrictedForms, tableName) || (ZPForm.primLkpId = ZPForm.getPrimaryLookupId(), null != ZPForm.primLkpId && ZPForm.FIELD_LAYOUT.find(":input").on("change", function (event) { var formObj = ZPForm.Field.getFieldComponent(ZPForm.primLkpId); formObj.labelName != $(event.target).attr("name") ? ZPForm.isFieldsChange = !0 : ZPForm.isFieldsChange || ZPForm.handlePrimaryLookupChange($(event.target).val()) }))), ZPForm.FORMFILEUPLOAD = [], ZPForm.registerFieldChangeFun()), ZPForm.isEditMode() || ZPForm.isViewMode() ? ZPForm.getSingleRecordDetails() : (ZPForm.toggleCommonActions(), ZPForm.showFields(), ("P_SelfAppraisal" === ZPForm.getTableName() || "P_MultiRater" === ZPForm.getTableName() || "P_PerformanceAppraisal" === ZPForm.getTableName()) && Appraisal.KRAVsGoals.constructEnabledComponents(ZPForm), ZPForm.getLookupOptionsBasedOnDependentFields()), "P_SelfAppraisal" == ZPForm.CURRFORM_PARAM.tableName && ZPForm.isAddMode() ? Appraisal.getMycycles() : "P_EmployeeLeave" === tableName && ZPForm.isAddMode() && Leave.Util.showHideDocument(!1), ZPForm.CURRFORM_PARAM.modalPopupView && (ZPForm && "P_Timesheet" === ZPForm.getTableName() ? ZPForm.LAYOUT.find(".modal-body").find("#zp_form_container").append(ZPForm.TIMELOG_FOOTER) : ZPForm.LAYOUT.find(".modal-body").find("#zp_form_container").append(ZPForm.MODAL_FOOTER_TEMPLATE)), ZPForm.isAddMode() && (ZPFRules.evaluateRulesForAllFields(ZPForm.isQuickAdd), ZPForm.Field.fillCurrentDateAndTime()), ZPForm.LAYOUT.find('[data-toggle="popover"]').popover() }, getPrimaryLookupId: function (isMultiAllowed) { var primLkpId = null, formComp = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId].message; return $.each(formComp.formComponentDetails, function () { return void 0 !== this.column1 && this.column1.length > 0 && $.each(this.column1, function () { return this.fieldType === ZPForm.Field.LOOKUP && this.isPrimary && (isMultiAllowed || this.displayType == ZPForm.Field.SELECT_DISPLYTYPE || this.displayType == ZPForm.Field.RADIO_DISPLYTYPE) ? (primLkpId = this.formComponentId, !1) : void 0 }), void 0 !== this.column2 && this.column2.length > 0 && $.each(this.column2, function () { return this.fieldType === ZPForm.Field.LOOKUP && this.isPrimary && (isMultiAllowed || this.displayType == ZPForm.Field.SELECT_DISPLYTYPE || this.displayType == ZPForm.Field.RADIO_DISPLYTYPE) ? (primLkpId = this.formComponentId, !1) : void 0 }), null == primLkpId }), primLkpId }, handlePrimaryLookupChange: function (primLkpVal) { ZPForm.isFieldsChange || (primLkpType = zpconst.Permission.ALL_DATA, "-Select-" == primLkpVal || primLkpVal == erecno ? primLkpType = zpconst.Permission.MY_DATA : ZPUtil.checkIsExistInArray(ZPeople.getSubUsers(), primLkpVal) && (primLkpType = zpconst.Permission.SUB_DATA), ZPForm.isLocAdmin() && ZPUtil.checkIsExistInArray(ZPForm.getLocUsers(), primLkpVal) && (primLkpType = null), ZPForm.primLkpType != primLkpType && (ZPForm.primLkpType = primLkpType, ZPForm.primLkpVal = primLkpVal, "P_Task" !== ZPForm.getTableName() && ZPForm.setUp(ZPForm.getFormComponents))) }, toggleCommonActions: function () { var formPageType = ZPForm.getPaginationType(), tableName = ZPForm.getTableName(); if (!ZPForm.PAGEMODE) { if (1 === formPageType) { if (ZPForm.LAYOUT.find("#zp_form_section_list").parent().removeClass("DN"), void 0 != ZPForm.lastActiveSec && "" != ZPForm.lastActiveSec && void 0 != ZPForm.LAYOUT.find("#zp_form_section_" + ZPForm.lastActiveSec)) { var fieldsid = "zp_section_fields_" + ZPForm.lastActiveSec, secid = "zp_form_section_" + ZPForm.lastActiveSec; $(ZPForm.LAYOUT.find('li[id^="zp_form_section_"][class^="sel"]')[0]).removeClass("sel"), ZPForm.LAYOUT.find("#" + secid).addClass("sel"), ZPForm.LAYOUT.find("div[id^='zp_section_fields_'][class='row']").addClass("DN"), ZPForm.LAYOUT.find("div[id^='zp_tabular_sec_header_']").addClass("DN"), ZPForm.LAYOUT.find("div[id='zp_tabular_sec_header_" + ZPForm.lastActiveSec + "']").removeClass("DN"), ZPForm.LAYOUT.find("div[id^='" + fieldsid + "']").removeClass("DN") } else ZPForm.LAYOUT.find("#zp_form_section_list").find("li:first").addClass("sel"); ZPForm.LAYOUT.find("#zp_form_section_list").find("li").click(function () { ZPForm.toggleSection(this) }), ZPForm.LAYOUT.find("#zp_form_section_list").children().length > 1 && ZPForm.LAYOUT.find("#zp_forms_prev_btn, #zp_forms_next_btn").removeClass("DN"), ZPForm.LAYOUT.find("#zp_forms_prev_btn, #zp_forms_next_btn").click(function () { ZPForm.prevNextSection(this) }) } else ZPForm.LAYOUT.find("#zp_forms_prev_btn, #zp_forms_next_btn").addClass("DN"); ZPForm.LAYOUT.find(".modal-footer").removeClass("DN") } var container = ZPForm.LAYOUT; if (ZPForm.PAGEMODE && (container = Layout.Page.container), ZPForm.isViewMode() && !ZPForm.PRINT) container.find("#zp_forms_add_btn").addClass("DN"), container.find("#zp_forms_addnew_btn").addClass("DN"), container.find("#zp_forms_savedraft_btn").addClass("DN"), container.find("#zp_form_cancel_close_btn").html(ZPI18N.getString("zp.close")), container.find("#ZP_Form_MoreOpt").show(), ZPForm.isRecordAdmin() && ZPForm.isAuditHistoryEnabled() ? container.find("#zp_form_audithistory").removeClass("DN") : container.find("#zp_form_audithistory").addClass("DN"); else if (!ZPForm.PRINT) { if (container.find("#zp_form_header #headerApprovalBtn").addClass("zp_dyn"), container.find("#zp_form_header #headerTaskBtn").addClass("zp_dyn"), container.find("#zp_form_header").find("[name='apprRelBtn']").addClass("zp_dyn"), container.find("#zp_form_cancel_close_btn").html(ZPI18N.getString("zp.cancel")), container.find("#zp_forms_add_btn").removeClass("DN"), container.find("#zp_forms_addnew_btn").removeClass("DN"), container.find("#zp_cbutton").addClass("DN"), ZPForm.isEditMode()) { container.find("#zp_forms_addnew_btn").addClass("DN"), container.find("#zp_forms_savedraft_btn").addClass("DN"); var recordDtl = ZPForm.getSingleRecord(); recordDtl = recordDtl.record.message.isDraft, recordDtl && container.find("#zp_forms_savedraft_btn").removeClass("DN") } (ZPForm.isViewMode() || "P_Timesheet" === tableName || "P_TimesheetJobsList" === tableName || "P_TimesheetJob" === tableName || "P_PerformanceAppraisal" === tableName || "P_EmployeeSalary" === tableName || "P_EmployeeLeave" === tableName || "P_ClientDetails" === tableName || "P_Employee" === tableName || "P_Department" === tableName || "P_Designation" === tableName || "P_Location" === tableName || "P_Task" === tableName) && container.find("#zp_forms_savedraft_btn").addClass("DN"), ("P_Timesheet" === tableName || "P_TimesheetJobsList" === tableName || "P_TimesheetJob" === tableName || "P_EmployeeLeave" === tableName || "P_Goals" === tableName || "P_EmployeeSalary" === tableName || "P_ClientDetails" === tableName || "P_SelfAppraisal" === tableName) && container.find("#zp_forms_addnew_btn").addClass("DN"), container.find("#zp_form_createinfo").parent().addClass("DN"), container.find("#zp_form_editin_singlerec, #zp_form_audithistory").addClass("DN"), container.find("#ZP_Form_MoreOpt").hide() } "P_PerformanceAppraisal" === tableName && (ZPForm.isEditMode() && void 0 == ZPForm.CURRFORM_PARAM.addmodclass && container.find("#zp_forms_draft_btn").removeClass("DN"), container.find("#zp_forms_next_btn").addClass("DN"), container.find("#zp_forms_prev_btn").addClass("DN")), (ZPForm.isAddMode() || ZPForm.isEditMode()) && (container.find("#zp_form_header_PrintBtn").addClass("DN"), container.find("#zp_form_otherDetails").addClass("DN")), ZPForm.isViewMode() && (container.find("#zp_form_header_PrintBtn").removeClass("DN"), container.find("#zp_form_otherDetails").removeClass("DN")) }, prevNextSection: function (Obj) { var acttype = $(Obj).attr("acttype"), currObj = ZPForm.LAYOUT.find("#zp_form_section_list").children(".sel"); "1" === acttype ? currObj.next().click() : currObj.prev().click() }, showSection: function (sectionId) { if (void 0 === sectionId) { var firstSec = ZPForm.LAYOUT.find("[id^=zp_section_fields_]:first"); if (0 === firstSec.length) return; sectionId = firstSec.attr("id").split("_").pop() } ZPForm.LAYOUT.find("[id=zp_section_fields_" + sectionId + "]").each(function () { $(this).removeClass("DN").prev("h6").removeClass() }) }, showFields: function (ownersId, isDraft) { var editoption = !1; Layout.Page.container.find("[id=zp_page_loading]").length > 0 && (ZPForm.PAGEMODE && Layout.Page.container.find("#zp_page_loading").siblings().removeClass("DN"), Layout.Page.container.find("[id=zp_page_loading]").remove()); var formPageType = ZPForm.getPaginationType(); if (ZPForm.PAGEMODE ? $("#onBoardingRightPane").is(":visible") ? ($("#onBoardingRightPane").find("#" + ZPForm.PAGEID).html(ZPForm.FIELD_LAYOUT), $("#onBoardingRightPane").find("[id*=zp_addedit_record_]").hide(), $("#onBoardingRightPane").find("#" + ZPForm.PAGEID).show()) : ZPForm.LAYOUT.html(ZPForm.FIELD_LAYOUT).removeClass("DN") : ZPForm.CURRFORM_PARAM.isSingleCol && 0 === formPageType ? ZPForm.LAYOUT.find("#zp_form_outer_container").html(ZPForm.FIELD_LAYOUT) : (ZPForm.LAYOUT.find("#zp_form_body").html(ZPForm.FIELD_LAYOUT), ZPForm.showSection()), (ZPForm.isAddMode() || ZPForm.isEditMode()) && (ZPForm.LAYOUT.find("form").on("keyup keypress", function (event) { 13 === event.keyCode && "TEXTAREA" !== event.target.nodeName && event.preventDefault() }), ZPForm.LAYOUT.find('[istabular="true"]').find("table.Vlis").addClass("edit")), "function" == typeof ZPForm.CURRFORM_PARAM.onloadCallback && ZPForm.CURRFORM_PARAM.onloadCallback(), ZPForm.isViewMode()) { void 0 != ZPForm.FORM_DETAILS[ZPForm.CURRFORM_PARAM.formId] && ZPForm.FORM_DETAILS[ZPForm.CURRFORM_PARAM.formId].isCheckListEnabled && ZPForm.CURRFORM_PARAM.disableChecklist !== !0 ? ZPForm.LAYOUT.find("#headerTaskBtn").removeClass("zp_dyn") : ZPForm.LAYOUT.find("#headerTaskBtn").addClass("zp_dyn"); var editOpt = Layout.Page.container.find("#zp_form_editin_singlerec"); ZPForm.PAGEMODE || (editOpt = ZPForm.LAYOUT.find("#zp_form_editin_singlerec")), isDraft || "P_PerformanceAppraisal" !== ZPForm.getTableName() && "P_Goals" !== ZPForm.getTableName() && ((ZPForm.Permission.isPermitted(ZPForm.Permission.getEditPerm()) || ZPForm.isApprover() || ZPForm.isProjectManager()) && ZPForm.isApprovalStarted() || ZPForm.isTaskOwnerCanEdit()) && ("P_EmployeeLeave" !== ZPForm.getTableName() || !ZPForm.CURRFORM_PARAM.isEditDisabled && Leave.View.allowedit) ? (editOpt.removeClass("DN"), ZPForm.CURRFORM_PARAM.skipEditCallback || (editOpt.unbind("click"), editOpt.click(function () { ZPForm.isrelfieldsingelrecview ? (ZPForm.toggleFormPage(!1, Layout.Page.container.find("#zp_relfielsingle_record_" + ZPForm.CURRFORM_PARAM.formId)), ZPForm.load({ formId: ZPForm.CURRFORM_PARAM.formId, formMode: "EDIT", isfromrelfieldedit: !0, recordId: ZPForm.CURRFORM_PARAM.recordId })) : void 0 !== ZPForm.CURRFORM_PARAM.editCallback && "function" == typeof ZPForm.CURRFORM_PARAM.editCallback ? ZPForm.CURRFORM_PARAM.editCallback(ZPForm.CURRFORM_PARAM.formId, ZPForm.CURRFORM_PARAM.recordId) : (1 == ZPForm.getPaginationType() && (ZPForm.lastActiveSec = ZPForm.LAYOUT.find("#zp_form_section_list").find(".sel").attr("secid")), ZPForm.showForm("edit")) }))) : editOpt.addClass("DN").off("click"), "P_SelfAppraisal" == ZPForm.getTableName() ? (void 0 != ZPForm.LAYOUT.data().record.extraDetails && ZPForm.Permission.isPermitted(ZPForm.Permission.getEditPerm()) && (editoption = ZPForm.LAYOUT.data().record.extraDetails.editoption), editoption || isDraft ? (editOpt.unbind(), editOpt.show().click(function () { Appraisal.editselfAppRec(ZPForm.CURRFORM_PARAM.recordId) })) : editOpt.hide().unbind("click")) : "P_Goals" == ZPForm.getTableName() && (isDraft || ZPForm.isApprovalEnabled() && ZPForm.isApprover() || Appraisal.Goals.GOALSHEETAPPROVER) && (editOpt.removeClass("DN"), editOpt.unbind(), editOpt.show().click(function () { Appraisal.Goals.editDraftGoals(ZPForm.CURRFORM_PARAM.recordId, ZPForm.CURRFORM_PARAM.formId) })), "P_PerformanceAppraisal" == ZPForm.getTableName() && (isPAdmin || appdataadmin || isSuperAdmin) && -1 == Layout.Page.currentmode.indexOf("performance/myreview/myratings") && (editoption = !0, editoption ? (editOpt.removeClass("DN"), editOpt.unbind(), editOpt.show().click(function () { ZPForm.CURRFORM_PARAM.formMode = "EDIT", ZPForm.CURRFORM_PARAM.addmodclass = "DN", ZPForm.CURRFORM_PARAM.readOnlyFields = ["CurrentCTC", "Appraisee", "CurrentDesignation", "Department", "EmployeeSalary"], ZPForm.load(ZPForm.CURRFORM_PARAM) })) : editOpt.hide().unbind("click")), "P_MultiRater" == ZPForm.getTableName() && (editoption = !0, editoption ? (editOpt.unbind(), editOpt.show().click(function () { Appraisal.MultiRater.showRecordRate(ZPForm.CURRFORM_PARAM.recordId, !1, !0, ZPForm.CURRFORM_PARAM.configId, ZPForm.CURRFORM_PARAM.selUser, ZPForm.CURRFORM_PARAM.raterId) })) : editOpt.hide().unbind("click")), "P_Employee" == ZPForm.getTableName() && void 0 !== ZPForm.addedIsZohoUser && null !== ZPForm.addedIsZohoUser && (ZPeople.confirm(null, "", "zp.existingzohouser", "", !0, !1), $("#textConfirmationPopupBody").addClass("dvExecutescript"), $("#textConfirmationPopupBody").append('<div class=dvinfo id="emailInfo">'), $("#emailInfo").append('<p class="text-left">' + ZPForm.addedIsZohoUser + "</p>"), $("#textConfirmationPopupBody").append("</div>"), $("#confirmationPopup").modal()), ZPForm.addedIsZohoUser = null, ZPForm.CURRFORM_PARAM.isProfile && "function" == typeof ZPForm.CURRFORM_PARAM.onloadProfileCallback && ZPForm.CURRFORM_PARAM.onloadProfileCallback() } }, isFieldDependent: function (mappings, fcid) { return void 0 != mappings[fcid] }, registerDependentFieldsLookup: function () { ZPForm.FIELD_LAYOUT.find("[isFieldDependent=true]").each(function () { var findvar = ":input"; $(this).attr("displaytype"); void 0 === $(this).find(findvar).attr("depreg") && ($(this).find(findvar).attr("depreg", "true"), $(this).find(findvar).on("change", function () { var displaytype = $(this).attr("displaytype"); ZPForm.getLookupOptionsBasedOnDependentFields(this, displaytype) })) }) }, getLookupOptionsBasedOnDependentFields: function (clickedObj, displaytype) { var formDtl = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], depedentFlds = [], others = {}, row = 0; if (clickedObj) { var fcId = ""; fcId = parseInt(displaytype) === ZPForm.Field.SELECT_DISPLYTYPE || parseInt(displaytype) === ZPForm.Field.MULTISELECT_DISPLYTYPE ? clickedObj.id.split("_").pop() : $(clickedObj).closest('[id^="zp_field_outer_"]').attr("id").split("_").pop(), depedentFlds = formDtl.message.dependntFieldMappings[fcId]; var tabularelement = ""; ZPForm.FORM_COMPONENTS[fcId].isTabular && !ZPForm.FORM_COMPONENTS[fcId].isGridType ? tabularelement = $(clickedObj).closest('[istabular=true][class^="row"]') : ZPForm.FORM_COMPONENTS[fcId].isTabular && ZPForm.FORM_COMPONENTS[fcId].isGridType && (tabularelement = $(clickedObj).closest('tr[id="zp_tabular_row"]')), void 0 != tabularelement && tabularelement.length > 0 && (row = parseInt($(tabularelement).attr("row")) - 1, others.row = row) } var fields = [], fieldValues = {}; if ($.each(formDtl.message.formComponentDetails, function () { (!this.isTabular || clickedObj) && (void 0 !== this.column1 && this.column1.length && $.each(this.column1, function () { this.fieldType === ZPForm.Field.LOOKUP && (clickedObj && ZPUtil.checkIsExistInArray(depedentFlds, this.formComponentId) || void 0 != this.dependentFiledList && 0 != this.dependentFiledList.length) && (clickedObj || depedentFlds.push(this.formComponentId), fields = $.merge(fields, this.dependentFiledList)) }), void 0 !== this.column2 && this.column2.length > 0 && $.each(this.column2, function () { this.fieldType === ZPForm.Field.LOOKUP && (clickedObj && ZPUtil.checkIsExistInArray(depedentFlds, this.formComponentId) || void 0 != this.dependentFiledList && 0 != this.dependentFiledList.length) && (clickedObj || depedentFlds.push(this.formComponentId), fields = $.merge(fields, this.dependentFiledList)) })) }), 0 != depedentFlds.length) { $.each(formDtl.message.formComponentDetails, function () { void 0 !== this.column1 && this.column1.length > 0 && ZPForm.getFieldValues(this.column1, fields, fieldValues), void 0 !== this.column2 && this.column2.length > 0 && ZPForm.getFieldValues(this.column2, fields, fieldValues) }), $.each(depedentFlds, function (ind, value) { formcomp = ZPForm.FORM_COMPONENTS[value], formcomp.displayType === ZPForm.Field.SELECT_DISPLYTYPE ? $(ZPForm.FIELD_LAYOUT.find("input[fieldtype='26'][name='" + formcomp.labelName + "']")[row]).select2(ZPForm.select2.getSelect2Properties({ defSelection: !0 })) : formcomp.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE && $(ZPForm.FIELD_LAYOUT.find("input[fieldtype='26'][name='" + formcomp.labelName + "']")[row]).select2(ZPForm.select2.getSelect2Properties({ multiple: !0, defSelection: !0 })) }); var params = { mode: "fetchFormLookupOtions", luFcIds: JSON.stringify(depedentFlds), formId: ZPForm.CURRFORM_PARAM.formId }; Object.keys(fieldValues).length > 0 ? (params.fieldValues = JSON.stringify(fieldValues), ZPUtil.Validation.isEmpty(ZPForm.CURRFORM_PARAM.recordId) || (params.recordId = ZPForm.CURRFORM_PARAM.recordId), "P_Timesheet" === ZPForm.getTableName() && (params.selUser = null === Timetracker.timelogs.tserecno || void 0 === Timetracker.timelogs.tserecno ? ZPeople.CURR_USER.usererec : Timetracker.timelogs.tserecno), "P_PerformanceAppraisal" === ZPForm.getTableName() && (params.configId = Layout.Page.urlparam.configId), ZPForm.isEmbedForm && !isAuthreq ? (params.digest = params.digest = Embed_digest, ZPeople.Request.send("/embedFormAction.hr", params, ZPForm.dependentFieldData, others)) : ZPeople.Request.send(ZPForm.URL, params, ZPForm.dependentFieldData, others)) : ZPForm.dependentFieldData({}, params, others) } }, dependentFieldData: function (data, params, others) { var fcids = JSON.parse(params.luFcIds), options = {}; data.code == ZPeople.ResponeCodes.SUCCESS && (options = data.message); var formDtl = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; $.each(formDtl.message.formComponentDetails, function () { void 0 !== this.column1 && this.column1.length && $.each(this.column1, function () { this.fieldType === ZPForm.Field.LOOKUP && ZPUtil.checkIsExistInArray(fcids, this.formComponentId) && ZPForm.updateDependentFieldOptions(this, options[this.formComponentId], others) }), void 0 !== this.column2 && this.column2.length > 0 && $.each(this.column2, function () { this.fieldType === ZPForm.Field.LOOKUP && ZPUtil.checkIsExistInArray(fcids, this.formComponentId) && ZPForm.updateDependentFieldOptions(this, options[this.formComponentId], others) }) }), ZPForm.registerRelatedFieldsLookup(), ZPForm.registerDependentFieldsLookup() }, updateDependentFieldOptions: function (formcomp, options, others) { void 0 == options && (options = []); var fieldObj = ZPForm.FIELD_LAYOUT.find(":input[name=" + formcomp.labelName + "]"); void 0 != others && void 0 != others.row && $(fieldObj).length > 0 && (fieldObj = $(fieldObj)[others.row]), formcomp.displayType === ZPForm.Field.SELECT_DISPLYTYPE || formcomp.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE ? $(fieldObj).empty() : fieldObj.length > 0 ? (fieldObj = fieldObj.closest("div[fieldtype=" + ZPForm.Field.LOOKUP + "]"), fieldObj.empty()) : fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + formcomp.formComponentId).find("div[fieldtype=" + ZPForm.Field.LOOKUP + "]"), $(fieldObj).append(ZPForm.Field.getOptionsByType(formcomp, void 0, void 0, options)), formcomp.displayType === ZPForm.Field.SELECT_DISPLYTYPE ? $(fieldObj).select2(ZPForm.select2.getSelect2Properties({ defSelection: !0 })) : formcomp.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE && $(fieldObj).select2(ZPForm.select2.getSelect2Properties({ multiple: !0, defSelection: !0 })), (ZPForm.isEditMode() || ZPForm.isAddMode()) && (void 0 != formcomp.relatedFieldDetails && formcomp.relatedFieldDetails.length > 0 && ZPForm.Field.setRelatedFieldsData(formcomp.relatedFieldDetails, formcomp.formComponentId, !0, others.row), (void 0 == others || void 0 == others.row) && ZPForm.setValueForFields([ZPForm.Field.getFieldValueData(formcomp.formComponentId)], !0)) }, getFieldValues: function (section, fields, fieldValues, rowno) { $.each(section, function () { if (ZPUtil.checkIsExistInArray(fields, this.formComponentId)) { (null == rowno || void 0 == rowno) && (rowno = 0); var formField = $(ZPForm.FIELD_LAYOUT.find(":input[name=" + this.labelName + "]")); if (formField.length > 1 && (formField = $(ZPForm.FIELD_LAYOUT.find(":input[name=" + this.labelName + "]")[rowno])), 0 === formField.length) { var id = ZPForm.Field.getFieldValueData(this.formComponentId); if (void 0 != id) { var value = id.componentValue_ID; fieldValues[this.formComponentId] = value } return } var res = { errorList: [] }, returnObj = ZPForm.Validation.validateField(res, this, formField, !1); void 0 !== returnObj && 0 == returnObj.result.errorList.length && (fieldValues[this.formComponentId] = returnObj.value) } }) }, registerRelatedFieldsLookup: function () { ZPForm.FIELD_LAYOUT.find("[relateddata=true]").each(function () { var displaytype = $(this).attr("displaytype"); if (parseInt(displaytype) === ZPForm.Field.SELECT_DISPLYTYPE || parseInt(displaytype) === ZPForm.Field.RADIO_DISPLYTYPE) { var findvar = ":input"; parseInt(displaytype) === ZPForm.Field.SELECT_DISPLYTYPE && (findvar = "[fieldtype='26']"), void 0 === $(this).find(findvar).attr("reg") && ($(this).find(findvar).attr("reg", "true"), $(this).find(findvar).on("change", function () { ZPForm.Field.getRelatedFieldsValue(this, displaytype) })) } }) }, registerFieldChangeFun: function (fieldHtml) { void 0 === fieldHtml && (fieldHtml = ZPForm.FIELD_LAYOUT); var callBackObj = ZPForm.CURRFORM_PARAM.fieldCallback; if (void 0 !== callBackObj) for (var labelName in callBackObj) void 0 !== callBackObj[labelName] && "function" == typeof callBackObj[labelName] && fieldHtml.find(":input[name='" + labelName + "']").change(function () { callBackObj[$(this).attr("name")]($(this).val(), $(this).attr("name")) }); ZPForm.registerRelatedFieldsLookup(), fieldHtml.find("select").select2(), fieldHtml.find("input[fieldtype='26'][multi='true']").select2(ZPForm.select2.getSelect2Properties({ multiple: !0 })), fieldHtml.find("input[fieldtype='26'][multi='false']").select2(ZPForm.select2.getSelect2Properties()); ZPForm.getTableName(); (ZPForm.isAddMode() || ZPForm.isEditMode()) && (fieldHtml.find(":input[type=file]").length > 0 && (0 === Layout.Page.container.find("[name=zp_form_fileupload]").length && Layout.Page.container.append($('<form action="' + (ZPForm.isEmbedForm && !isAuthreq ? "embedfileUploadAction.hr" : "fileUploadAction.zp") + '" target="zp_form_fileupload_response" enctype="multipart/form-data" method="post" style="display: none;" name="zp_form_fileupload"></form><iframe frameborder="0" style="height: 0px;width: 0px; display: none;" name="zp_form_fileupload_response"></iframe>')), Layout.Page.container.find("[name=zp_form_fileupload]").empty()), fieldHtml.find(":input[type=file]").change(function () { var fileName = ZPUtil.newUifileFieldChange(this); if (null == fileName) $(this).siblings("#filename").val(""); else { if ($(this).after($(this).clone(!0)), $(this).hide(), 0 === $(this).siblings("#filename").length) { var inpEle = $('<input type="hidden" value="" id="filename"/>'); $(this).after(inpEle) } $(this).siblings("#filename").val(fileName); for (var labelName = $(this).attr("name"), fileConsHtml = "", i = 0; i < fileName.length; i++) fileConsHtml += "<div>" + ZPeople.escapeHtml(fileName[i]) + '<i class="IC-cls-1px" onclick="ZPForm.Field.toggleFileFieldDisplay(this, \'' + labelName + "')\"></i></div>"; $(this).closest("div[folabel=" + labelName + "]").find("#afterUpload").html(fileConsHtml), $(this).closest("div[folabel=" + labelName + "]").find("#beforeUpload,#afterUpload").toggleClass("DN"), ZPForm.Field.removeFileUploadDoc(labelName); var formObj = Layout.Page.container.find("[name=zp_form_fileupload]"); $(this).appendTo(formObj) } })), fieldHtml.find(":input[isTimeField='true']").click(function () { var fcid = $(this).attr("fcid"), props = ZPForm.time_Field_Prop[fcid]; props.callback = "ZPForm.setTime(this)", TimePicker.init(this, props) }), fieldHtml.find(":input[isTimeField='true']").blur(function () { var fcid = $(this).attr("fcid"), props = ZPForm.time_Field_Prop[fcid]; TimePicker.setTime(this, props) }), fieldHtml.find(":input[fieldtype=" + ZPForm.Field.DATE + "]").click(function (event) { var tableName = ZPForm.getTableName(); "P_EmployeeLeave" !== tableName || "From" !== $(this).attr("name") && "To" !== $(this).attr("name") ? $(this).parents("[isconditionfield=true]").length > 0 ? Calendar.setUpCalendar(event, this, null, null, ZPFRules.evaluateRulesForField) : Calendar.setUpCalendar(event, this) : Calendar.setUpCalendar(event, this, void 0, void 0, callBackObj.From) }), fieldHtml.find(":input[fieldtype=" + ZPForm.Field.DATE_TIME + "]").click(function (event) { $(this).parents("[isconditionfield=true]").length > 0 ? Calendar.setUpCalendar(event, this, 1, null, ZPFRules.evaluateRulesForField) : Calendar.setUpCalendar(event, this, 1) }), fieldHtml.find(".select2-container").each(function () { var title = $(this).siblings("select").attr("title"); ZPUtil.Validation.isEmpty(title) || $(this).attr("title", title) }), ZPForm.LAYOUT.on("mouseenter", "[istabular=true]", function () { $(this).find("#zp_form_deletetabular_row").removeClass("DN") }), ZPForm.LAYOUT.on("mouseleave", "[istabular=true]", function () { $(this).find("#zp_form_deletetabular_row").addClass("DN") }), ZPForm.LAYOUT.on("mouseenter", "[id=zp_tabular_row]", function () { $(this).find("#zp_form_deletetabular_row").removeClass("DN") }), ZPForm.LAYOUT.on("mouseleave", "[id=zp_tabular_row]", function () { $(this).find("#zp_form_deletetabular_row").addClass("DN") }), fieldHtml.find('[addopt="enabled"]').click(function () { var fcId = $(this).attr("fcid"); ZPForm.QuickAdd.showQuickAddOption(fcId) }), ZPForm.registerDependentFieldsLookup() }, setTime: function (ele) { var value = Layout.Page.container.find(ele).attr("value"); Layout.Page.container.find(ele).parent().parent().siblings("input").val(value) }, getTabularGridHeaders: function (fieldsLst, ownerIds) { var headerHtml = "<thead><tr>"; return $.each(fieldsLst, function () { (!ZPForm.isAddMode() || null == ZPForm.primLkpType || this.componentType === ZPForm.Field.PLAIN_TEXT || ZPForm.Permission.isPermAllowed(ZPForm.primLkpType, this.editperm)) && (this.fieldType !== ZPForm.Field.SCRIPT && ZPForm.isAddMode() && (this.editperm > zpconst.Permission.NO_DATA || null == ZPForm.primLkpType && ZPForm.isLocAdmin()) || !ZPForm.isAddMode() && ZPForm.Permission.isPermitted(this.viewperm)) && (headerHtml += "<th " + (this.isMandatory ? 'class="Matry"' : "") + ">" + (this.isMandatory ? "<sup>*</sup>" : "") + this.displayName + "</th>") }), ZPForm.isViewMode() || (headerHtml += '<th width="45"></th>'), headerHtml += "</tr></thead>" }, toggleSection: function (Obj) { var sectionId = $(Obj).attr("secid"), isNext = 0 === $(Obj).nextAll(".sel").length ? !1 : !0; isNext ? (0 === $(Obj).prev().length ? ZPForm.LAYOUT.find("#zp_forms_prev_btn").addClass("DN") : ZPForm.LAYOUT.find("#zp_forms_prev_btn").removeClass("DN"), ZPForm.LAYOUT.find("#zp_forms_next_btn").removeClass("disabled")) : (0 === $(Obj).next().length ? ZPForm.LAYOUT.find("#zp_forms_next_btn").addClass("disabled") : ZPForm.LAYOUT.find("#zp_forms_next_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_prev_btn").removeClass("DN")), $(Obj).addClass("sel").siblings().removeClass("sel"), ZPForm.LAYOUT.find("#zp_section_fields_" + sectionId).siblings("[id^=zp_section_fields_]").addClass("DN").prev("h6").addClass("DN"), ZPForm.showSection(sectionId) }, toggleFormPage: function (show, Obj, currentTimerData) { if (Obj = void 0 == Obj ? ZPForm.LAYOUT : Obj, void 0 !== Obj && null !== Obj) { if (show) { $.each($('div[id^="zp_addedit_record_"]'), function () { $(this).removeClass("in") }); var callback = Obj.data("callback"); ZPForm.CURRFORM_PARAM.modalPopOverNeed ? $(Obj).modal("show") : $(Obj).addClass("in"), "function" == typeof callback && callback() } else ZPForm.CURRFORM_PARAM.modalPopOverNeed ? $(Obj).modal("hide") : (ZPForm.CURRFORM_PARAM.isFromSelfService && ZPForm.LAYOUT.removeAttr("style"), $(Obj).removeClass("in")), ZPForm.lastActiveSec = "", ZPForm.registerHiddenCallback(currentTimerData); ZPForm.isEmbedForm && $(".modal-backdrop").remove() } }, SINGLE_RECORD_DTL: {}, getSingleRecord: function (formId, recordId) { return (void 0 === formId || void 0 === recordId) && (formId = ZPForm.CURRFORM_PARAM.formId, recordId = ZPForm.CURRFORM_PARAM.recordId), ZPForm.SINGLE_RECORD_DTL[formId + "_" + recordId] }, isRecordAdmin: function (isOrgAdmin) { if (this.isLocAdmin() && (this.isViewMode() || this.isEditMode() || this.isSingleFiledEdit())) { var recDtls = ZPForm.getSingleRecord(); if (void 0 != recDtls) return recDtls.record.isRecordAdmin } return this.isAdmin(isOrgAdmin) }, isApprover: function () { var tableName = ZPForm.getTableName(); if ("P_Goals" == tableName && Appraisal.Goals.GOALSHEETAPPROVER) return !0; if (ZPForm.isApprovalEnabled()) { var recordDtl = ZPForm.getSingleRecord(); recordDtl.record.isRecordAdmin; if (7e3 === recordDtl.record.code && recordDtl.record.isPrimaryAppr) return recordDtl.record.isPrimaryAppr } return !1 }, isProjectManager: function () { if (Timetracker.generalSettings.isProjectManagerPerm()) { var recordDtl = ZPForm.getSingleRecord(); if (ZPForm.isAddMode()) return Timetracker.projects.Util.isProjectManager(void 0, !0); if (recordDtl && recordDtl.record && 7e3 === recordDtl.record.code && void 0 !== recordDtl.record.message) return void 0 !== recordDtl.record.message.isProjectManager && recordDtl.record.message.isProjectManager === !0 } return !1 }, isApprovalStarted: function () { if (ZPForm.isApprovalEnabled()) { var recordDtl = ZPForm.getSingleRecord(), isRecordAdmin = recordDtl.record.isRecordAdmin; if (7e3 === recordDtl.record.code) { var currentStatus = (recordDtl.record.message.ownerID, recordDtl.record.message.cAuditInfo.cInfo.user.ERECNO, recordDtl.record.message.approvalStatus); if (!(isRecordAdmin || ZPForm.CONF.approvalSettingsDetails.isEditAllow || recordDtl.record.isPrimaryAppr || currentStatus === zpconst.ApprovalStatus.NotSubmitedd || currentStatus === zpconst.ApprovalStatus.NoStatus || ZPForm.isDraftrec)) return !1 } } return !0 }, isTaskOwnerCanEdit: function () { return ZPForm.isApprovalEnabled() ? ZPForm.CONF.approvalSettingsDetails.isEditAllow ? ZPForm.getSingleRecord().record.isTaskOwner : !1 : ZPForm.getSingleRecord().record.isTaskOwner }, getRecordOwnerList: function () { var singlerecObj = ZPForm.getSingleRecord(); if (void 0 !== singlerecObj && void 0 !== singlerecObj.record) { var recDtl = singlerecObj.record; if (7e3 === recDtl.code) return recDtl.message.ownerID } return [] }, isRefresh: function () { var record = ZPForm.getSingleRecord(); return void 0 === record || record.refresh ? !0 : !1 }, refreshRecord: function (formId, recordId) { var record = ZPForm.getSingleRecord(formId, recordId); record.refresh = !0 }, getSingleRecordParams: function () { if (void 0 == ZPForm.CURRFORM_PARAM.recordId && void 0 !== ZPForm.CURRFORM_PARAM.zuid) { var zuparams = { zuid: ZPForm.CURRFORM_PARAM.zuid, mode: "getEmployeeErecNumFromZuid", conreqcsr: csrfToken }; $.ajax({ type: "POST", async: !1, url: ZPForm.URL, data: zuparams, success: function (data) { ZPForm.CURRFORM_PARAM.recordId = data.erecnum, Layout.Page.childUrlParam.recordId = data.erecnum } }) } var params = { mode: "fetchSingleRecord", formId: ZPForm.CURRFORM_PARAM.formId, recordId: ZPForm.CURRFORM_PARAM.recordId }; return params.isApprovalEnabled = ZPForm.isApprovalEnabled(), Appraisal.formcallback(params), void 0 != Layout.Page.urlparam.configId && -1 == Appraisal.prevconfigId && (params.configId = Layout.Page.urlparam.configId), void 0 != ZPForm.CURRFORM_PARAM.selUser && "" != ZPForm.CURRFORM_PARAM.selUser && (params.selUser = ZPForm.CURRFORM_PARAM.selUser), void 0 != ZPForm.CURRFORM_PARAM.configId && "" != ZPForm.CURRFORM_PARAM.configId && (params.configId = ZPForm.CURRFORM_PARAM.configId), ZPForm.CURRFORM_PARAM.isProfile && (params.isProfile = ZPForm.CURRFORM_PARAM.isProfile), "performance_myreview_myratings" === Layout.Page.urlmode && (params.viewMyRatings = !0), ZPForm.CURRFORM_PARAM.raterId && (params.raterId = ZPForm.CURRFORM_PARAM.raterId), ZPForm.CURRFORM_PARAM.ownerId && (params.ownerId = ZPForm.CURRFORM_PARAM.ownerId), params }, getSingleRecordDetails: function () { var singleRec = ZPForm.getSingleRecord(); ZPView.newRecordDetails.agreeid = singleRec.record.agreeid, ZPView.newRecordDetails.module = singleRec.record.module; var status = "null" != singleRec.record.agreeid ? "true" : "false"; ZPView.newRecordDetails.isAgreementSent = status; var params = ZPForm.getSingleRecordParams(); ZPForm.setFieldValues(singleRec.record, params) }, getSingleRecordDetail: function () { var singleRec = ZPForm.getSingleRecord(); if ((void 0 === singleRec || singleRec.refresh) && void 0 == ZPForm.CURRFORM_PARAM.recordId && void 0 !== ZPForm.CURRFORM_PARAM.zuid) { var zuparams = { zuid: ZPForm.CURRFORM_PARAM.zuid, mode: "getEmployeeErecNumFromZuid", conreqcsr: csrfToken }; $.ajax({ type: "POST", async: !1, url: ZPForm.URL, data: zuparams, success: function (data) { ZPForm.CURRFORM_PARAM.recordId = data.erecnum, Layout.Page.childUrlParam.recordId = data.erecnum } }), ZPeople.Request.sendAsyncPost(ZPForm.URL, zuparams) } var params = ZPForm.getSingleRecordParams(); (void 0 === singleRec || singleRec.refresh) && ZPeople.Request.sendAsyncPost(ZPForm.URL, params, ZPForm.setSingleRecordDetail) }, setSingleRecordDetail: function (resultData) { ZPForm.SINGLE_RECORD_DTL[ZPForm.CURRFORM_PARAM.formId + "_" + ZPForm.CURRFORM_PARAM.recordId] = { record: resultData, refresh: !1 } }, setFieldValues: function (resultData, params) { if (7040 === resultData.code) return ZPForm.LAYOUT.find(".modal-footer").remove(), Layout.Page.container.find("#ZP_Form_MoreOpt").addClass("DN"), void ZPForm.showNoData(resultData.message); var recDtl = resultData, formCompData = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], isDraft = (formCompData.message.relatedFields, resultData.message.isDraft); if (ZPForm.isDraftrec = isDraft, 7e3 === recDtl.code) { if (ZPForm.SINGLE_RECORD_DTL[ZPForm.CURRFORM_PARAM.formId + "_" + ZPForm.CURRFORM_PARAM.recordId] = { record: resultData, refresh: !1 }, ZPForm.isEditMode()) { if (!(isDraft || ZPForm.Permission.isPermitted(ZPForm.Permission.getEditPerm()) && ZPForm.isApprovalStarted() || ZPForm.isApprover() || ZPForm.isTaskOwnerCanEdit() || ZPForm.IS_RESUBMIT || ZPForm.isProjectManager())) return void (ZPForm.isApprovalEnabled() && resultData.message && resultData.message.approvalStatus == zpconst.ApprovalStatus.Cancelled ? ZPForm.showErrMsg(ZPI18N.getString("zp.cancelledRecordedit")) : ZPForm.isApprovalStarted() ? ZPForm.showErrMsg(ZPI18N.getString("zp.permissiondenied")) : ZPForm.showErrMsg(ZPI18N.getString("zp.approvedRecordedit"))); -1 !== Layout.Page.hash.indexOf("hrcase/") && HRCases.viewNotesComments(resultData); var isFieldEditable = !1; $.each(recDtl.message.recordDetails, function (index) { return isFieldEditable = this.isGridType ? ZPForm.checkGridSectionFieldEditable(this) : ZPForm.checkSectionFieldEditable(this), !isFieldEditable }), isFieldEditable || ZPForm.showFormError("", isFieldEditable) } else if (!ZPForm.PAGEMODE && !ZPForm.CURRFORM_PARAM.modalPopupView) { var footer = ZPForm.FOOTER; !ZPForm.isViewMode() || !ZPForm.isApprovalEnabled() && void 0 == resultData.approvalDetails || ZPForm.isDraftrec || (footer = ZPForm.APPROVALFOOTER), ZPForm.LAYOUT.find(".modal-footer").length > 0 ? ZPForm.LAYOUT.find(".modal-footer").replaceWith(footer) : ZPForm.LAYOUT.find(".modal-body").after(footer) } var ul = Layout.Page.container.find("#zp_cbutton_list"); ul.html(""), void 0 !== recDtl.message.customBtn && 0 !== recDtl.message.customBtn.length ? (Layout.Page.container.find("#zp_cbutton").removeClass("DN"), recDtl.message.customBtn.length > 1 ? Layout.Page.container.find("#zp_cbutton").addClass("more") : Layout.Page.container.find("#zp_cbutton").removeClass("more"), $.each(recDtl.message.customBtn, function (i, cusbtnObj) { var onClkMtd = "CustomAction.triggerCB('" + cusbtnObj.custombuttonId + "','" + params.recordId + "','" + cusbtnObj.type + "')"; if (0 === i) { var cbName = decodeHTML(cusbtnObj.name); Layout.Page.container.find("#zpcbnbtn").attr("onClick", onClkMtd).attr("title", cbName).text(cbName) } else ul.append('<li><a title="' + cusbtnObj.name + '" href="javascript:;" onClick="' + onClkMtd + '">' + cusbtnObj.name + "</a></li>") }), recDtl.message.customBtn.length > 1 ? Layout.Page.container.find("#zpcbnbtn_vmore").removeClass("DN") : Layout.Page.container.find("#zpcbnbtn_vmore").addClass("DN")) : Layout.Page.container.find("#zp_cbutton").addClass("DN"), $.each(recDtl.message.recordDetails, function (index) { this.isTabular ? ZPForm.setValuesForTabularSection(this, recDtl.message.ownerID, index) : (ZPForm.setValueForFields(this.column1, !1, recDtl.message.ownerID), ZPForm.setValueForFields(this.column2, !1, recDtl.message.ownerID)) }), ZPForm.isRecordAdmin() || ZPForm.Permission.isExportAllowed() ? (ZPForm.LAYOUT.find("#li_downloadAsPDF,#mailmerge_download").show(), ZPForm.LAYOUT.find("#download_grp").removeClass("DN"), ZPForm.LAYOUT.find("#ZP_Form_MoreOpt").removeClass("DN")) : (ZPForm.LAYOUT.find("#li_downloadAsPDF,#mailmerge_download").hide(), ZPForm.LAYOUT.find("#download_grp").addClass("DN"), ZPForm.LAYOUT.find("#ZP_Form_MoreOpt").addClass("DN")), ZPForm.FIELD_LAYOUT.find("[isallowed=false]").each(function () { for (var nexts = $(this).next() ; 0 != nexts.length && void 0 != nexts.attr("id") && nexts.attr("id").startsWith("zp_form_relfield_") ;) temp = nexts.next(), nexts.remove(), nexts = temp; $(this).remove() }); var secs = ZPForm.FIELD_LAYOUT.find("[id^='zp_section_fields']"); $.each(secs, function () { var isgrid = "true" == $(this).attr("isgrid"); "true" == $(this).attr("istabular") && 0 == $(this).find(":input").length && $(this).prev().find("[istabadd=true]").remove(), (isgrid && 0 == $(this).find("td").length || !isgrid && 0 == $(this).find("[isallowed=true]").length) && (ZPForm.PAGEMODE ? $(this).prev().remove() : ZPForm.LAYOUT.find("#zp_form_section_list #zp_form_section_" + $(this).attr("id").match(/[\d]+$/).toString()).remove(), $(this).remove()) }); var secs = ZPForm.FIELD_LAYOUT.find("[issec=true]"); $.each(secs, function () { var eles = $(this).next(); 0 == eles.length || "true" == eles.attr("issec") || eles.is("input") || "true" == eles.attr("relformhead") ? $(this).remove() : 0 == eles.find(":input").length && $(this).find("[istabadd=true]").remove() }), ZPForm.LAYOUT.data("record", resultData), ZPForm.PRINT || ZPForm.showFields(recDtl.message.ownerID, isDraft), !ZPForm.isViewMode() || !params.isApprovalEnabled && void 0 == resultData.approvalDetails || "P_EmployeeLeave" === ZPForm.getTableName() && resultData.extraDetails.isabsentRecord || ("P_EmployeeLeave" === ZPForm.getTableName() && 1 != recDtl.message.approvalStatus && 0 != recDtl.message.approvalStatus && resultData.extraDetails.recordImmutable ? Leave.Form.recordImmutableFooter(resultData.approvalDetails) : void 0 !== recDtl.message.approvalStatus && 2 == recDtl.message.approvalStatus && "P_EmployeeLeave" === ZPForm.getTableName() ? (ZPForm.LAYOUT.find("#headerApprovalBtn").addClass("zp_dyn"), ZPForm.LAYOUT.find(".modal-footer").length > 0 ? ZPForm.LAYOUT.find(".modal-footer").replaceWith(ZPForm.FOOTER) : ZPForm.LAYOUT.find(".modal-body").after(ZPForm.FOOTER), ZPForm.LAYOUT.find(".modal-footer").append(ZP.create("button", { "class": "btn NM btn-dgray ML8 FR", text: ZPI18N.getString("zp.leave.cancelledleave") }))) : (ZPApprovals.CREATE_ERECNO = recDtl.message.cAuditInfo.cInfo.user.ERECNO, ZPApprovals.OWNER_ERECNO = recDtl.message.ownerID, ZPApprovals.FORMID = ZPForm.CURRFORM_PARAM.formId, ZPApprovals.RECORDID = ZPForm.CURRFORM_PARAM.recordId, ZPApprovals.refresh && delete ZPApprovals.APPROVAL_DETAILS[ZPForm.CURRFORM_PARAM.recordId], ZPApprovals.showApprovalHeader(recDtl.message.approvalStatus, recDtl.isRecordApprover, recDtl.isPrimaryAppr, { isRecordAdmin: ZPForm.isRecordAdmin() }))), ZPForm.Record.updateCreatedInfo(recDtl.message.cAuditInfo), void 0 != resultData.extraDetails && "P_HR_Case" == resultData.extraDetails.tablename && HRCaseForm.fillDetailViewPage(resultData.extraDetails), void 0 != resultData.extraDetails && "P_Task" == resultData.extraDetails.formLinkName && (ZPTasks.fillDetailViewPage(), ZPForm.LAYOUT.find("#zp_form_outer_container").append('<div class="main-media CL FL MT20" id="commentContainer"><div class="media-comments"><div class="media" id="commentBodyDummy" style="display:none"><div class="media-left"> <img src="" class="media-object" /></div><div class="media-body"><div class="media-resize"><a><b></b></a> <span class="dt-time"></span><p class="post-content MT8"></p></div></div></div><div id="checklistComments"><div class="media" id="commentHead"><div class="media-left"> <span class="IC-chat S16"></span> </div><div class="media-body"><a id="cmtCount"></a></div></div></div></div></div>'), Task.loadComment(recDtl.comments)) } else isDraft || "P_Employee" === ZPForm.getTableName() && ZPForm.Permission.isSub(ZPForm.CURRFORM_PARAM.recordId) || (ZPForm.showNoData(resultData.message), Layout.Page.container.find("#ZP_Form_MoreOpt").addClass("DN")); Task.relatedTaskHeader = ZPForm.LAYOUT.find("[data-target=#zp_dash_rfdata_-1]").parent().parent().parent(), recDtl.message.isTaskAvailable ? (Task.relatedTaskHeader.show(), Task.relatedTaskHeader.prev().show()) : (Task.relatedTaskHeader.hide(), 0 === Task.relatedTaskHeader.next().length && Task.relatedTaskHeader.prev().hide()), "P_Employee" === ZPForm.getTableName() && ZPForm.isViewMode() && void 0 !== recDtl && recDtl.pendingEmployee === !0 && ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.pendinginvite")), ZPForm.IS_SUBMIT = !1, ZPForm.PRINT || "P_SelfAppraisal" !== ZPForm.getTableName() && "P_MultiRater" !== ZPForm.getTableName() && "P_PerformanceAppraisal" !== ZPForm.getTableName() || (Appraisal.KRAVsGoals.showEnabledComponents(resultData, ZPForm, params.configId, params.selUser, params.raterId), "P_MultiRater" === ZPForm.getTableName() && Appraisal.MultiRater.showHideEditIcon(ZPForm.LAYOUT, params)), ZPForm.toggleCommonActions(), void 0 !== resultData.treeObj && null != resultData.treeObj && Profile.loadTree(resultData.treeObj), (void 0 !== ZPForm.CURRFORM_PARAM.configId && null !== ZPForm.CURRFORM_PARAM.configId || null !== Layout.Page.urlparam.configId) && (void 0 === ZPForm.CURRFORM_PARAM.configId || "P_PerformanceAppraisal" != ZPForm.getTableName() && "P_SelfAppraisal" != ZPForm.getTableName() || Appraisal.getRatingsbyPAcycle(ZPForm.CURRFORM_PARAM.configId)), (ZPForm.isViewMode() || ZPForm.isEditMode()) && ZPFRules.evaluateRulesForAllFields(), ZPForm.isEditMode() && ZPForm.getLookupOptionsBasedOnDependentFields() }, registerRelatedFormAdd: function () { var formId = $(this).parent().data().formId, formdisplayName = $(this).parent().data().title; ZPForm.showRelatedRecordByMode(formId, void 0, "ADD", formdisplayName) }, checkGridSectionFieldEditable: function (secObj) { var isEditable = !1; return $.each(secObj.isEditable, function (value) { return secObj.isEditable[value] ? (isEditable = !0, !1) : void 0 }), isEditable }, checkSectionEditableWithPerm: function (secObj) { var isAllowed = !1; return void 0 !== secObj.column1 && secObj.column1.length > 0 && $.each(secObj.column1, function (index, fieldData) { return isAllowed = fieldData.componentType === ZPForm.Field.PLAIN_TEXT || fieldData.isPrimary || ZPForm.Permission.isPermAllowed(ZPForm.primLkpType, fieldData.editperm), !isAllowed }), !isAllowed && void 0 !== secObj.column2 && secObj.column2.length > 0 && $.each(secObj.column2, function (index, fieldData) { return isAllowed = fieldData.componentType === ZPForm.Field.PLAIN_TEXT || fieldData.isPrimary || ZPForm.Permission.isPermAllowed(ZPForm.primLkpType, fieldData.editperm), !isAllowed }), isAllowed }, checkSectionFieldEditable: function (secObj) { var isEditable = !1; return void 0 !== secObj.column1 && secObj.column1.length > 0 && $.each(secObj.column1, function () { return this.isEditable ? (isEditable = !0, !1) : void 0 }), void 0 !== secObj.column2 && secObj.column2.length > 0 && !isEditable && $.each(secObj.column2, function () { return this.isEditable ? (isEditable = !0, !1) : void 0 }), isEditable }, getSectionComponent: function (sectionId) { var secComp, formComp = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; return $.each(formComp.message.formComponentDetails, function () { return this.sectionId === sectionId ? (secComp = this, !1) : void 0 }), secComp }, getTabularColumn: function (fieldList, sectionId, tabularObj, ownerIds, index, isRemoveAllowed) { var columHtml = "", valueArr = void 0 != tabularObj ? tabularObj.datarows[index] : void 0, visibleIndex = 0, isFieldsAdded = !1; return $.each(fieldList, function (ind) { if ((void 0 == tabularObj || void 0 != tabularObj.labelnameheaders[visibleIndex] && tabularObj.labelnameheaders[visibleIndex] == this.labelName) && (!ZPForm.isAddMode() || null == ZPForm.primLkpType || this.componentType === ZPForm.Field.PLAIN_TEXT || ZPForm.Permission.isPermAllowed(ZPForm.primLkpType, this.editperm))) { var value; void 0 !== valueArr && (value = valueArr[visibleIndex]); var isEditable = ZPForm.isAddMode() && (this.editperm > zpconst.Permission.NO_DATA || null == ZPForm.primLkpType && ZPForm.isLocAdmin()) || ZPForm.isEditMode() && ZPForm.Permission.isPermitted(this.editperm); if (this.fieldType === ZPForm.Field.LOOKUP && (void 0 !== value && void 0 != value.Id ? (value = ZPForm.isViewMode() || !isEditable ? valueArr[visibleIndex].Value : valueArr[visibleIndex].Id, ZPForm.select2.ALL_OPTIONS[this.formComponentId + "_" + valueArr[visibleIndex].Id] = valueArr[visibleIndex].Value) : value = ""), visibleIndex++, this.fieldType !== ZPForm.Field.DATE_TIME || ZPUtil.Validation.isEmpty(value) || (value = Calendar.convertTo12Hours(ZPeople.decodeTxt(value))), this.fieldType === ZPForm.Field.URL && ZPForm.isViewMode() && "-" != ZPForm.Field.getNoValueString(value) && (value = '<a rel="noreferrer" href="' + value + '" target="_blank">' + ZPForm.Field.getNoValueString(value)), this.fieldType !== ZPForm.Field.SCRIPT && isEditable) { isFieldsAdded = !0, ZPForm.isAddMode() && !ZPUtil.Validation.isEmpty(this.autofillvalue) && (value = this.fieldType === ZPForm.Field.DATE_TIME ? Calendar.convertTo12Hours(this.autofillvalue) : this.autofillvalue), this.isTabular = !0, ZPForm.isEditMode() && this.fieldType === ZPForm.Field.TEXT_AREA && void 0 != value && null != value && (value = ZPeople.decodeTxt(value.replace(/<br[^>]*>/gi, "\n"))); var temp = '<td folabel="' + this.labelName + '" isFieldDependent="' + this.isFieldDependent + '" id="zp_field_outer_' + this.formComponentId + '" ' + (this.fieldType === ZPForm.Field.PICKLIST || this.fieldType === ZPForm.Field.LOOKUP || this.fieldType === ZPForm.Field.BLOODGROUP || this.fieldType === ZPForm.Field.GENDER || this.fieldType === ZPForm.Field.COUNTRY ? 'class="PR"' : this.fieldType === ZPForm.Field.TEXT_AREA ? 'class="txtarea-wid"' : "") + " >" + ZPForm.Field.create(this, value) + "</td>"; if (this.fieldType === ZPForm.Field.LOOKUP && void 0 != value && "" != value && $(temp).find("option[value='" + ZPeople.decodeTxt(value) + "']").length <= 0) { var temp1 = jQuery("<div />").append(temp); temp1.find(":input[name=" + this.labelName + "]").append("<option selected value='" + valueArr[ind].Id + "'>" + valueArr[ind].Value + "</option"), temp = temp1.html() } columHtml += temp } else !ZPForm.isAddMode() && ZPForm.Permission.isPermitted(this.viewperm) && (isFieldsAdded = !0, columHtml += "<td " + (this.fieldType === ZPForm.Field.TEXT_AREA || this.fieldType === ZPForm.Field.TEXT ? "class='ZPExpd'" : "") + ">" + (ZPUtil.Validation.isEmpty(value) || this.fieldType !== ZPForm.Field.TEXT_AREA && this.fieldType !== ZPForm.Field.TEXT ? ZPForm.Field.getNoValueString(value) : "<div class='popHover' data-popover='true' data-html='true' data-content=''>" + ZPForm.Field.getNoValueString(value) + "</div>") + "</td>") } }), ZPForm.isViewMode() || !isRemoveAllowed && tabularObj || (columHtml += '<td><div id="zp_form_deletetabular_row" secId="' + sectionId + '"class="IC-cls-frm S18 gry MR10 FL MT6 CP DN" onclick="ZPForm.Record.removeTabularRow(this);"></div></td>'), columHtml }, setValuesForTabularSection: function (tabularObj, ownerIds, index) { var secTableObj, tabularComponent = this.getSectionComponent(tabularObj.sectionId), rows = tabularObj.noOfRows, hasRow = !0; if (0 === rows && (rows = 1, hasRow = !1), tabularObj.isGridType) { secTableObj = ZPForm.FIELD_LAYOUT.find("#zp_section_fields_" + tabularObj.sectionId), ZPForm.PRINT && (secTableObj = ZPForm.PRINTPAGE_DATA.find("#zp_section_fields_" + tabularObj.sectionId)); var tabularRowHtml = (ZPForm.getTabularGridHeaders(tabularComponent.column1, ownerIds), ZPForm.getTabularGridHeaders(tabularComponent.column1, ownerIds) + '<tbody id="zp_forms_tabluar_' + tabularObj.sectionId + '">'); if (ZPForm.isViewMode() && 0 === tabularObj.noOfRows) tabularRowHtml += "<tr><td align='center' colspan='" + tabularObj.labelnameheaders.length + "'>" + ZPI18N.getString("zp.norowsfound") + "</td></tr>"; else { for (var innerHtml = "", index = 0; rows > index; index++) { tabularObj.datarows[index]; innerHtml += "<tr id = 'zp_tabular_row' row='" + (index + 1) + "' " + (hasRow ? "rowid='" + tabularObj.recordIdArray[index] + "' secid='" + tabularObj.sectionId + "'" : "") + ">", innerHtml += ZPForm.getTabularColumn(tabularComponent.column1, tabularObj.sectionId, tabularObj, ownerIds, index, tabularObj.isRemoveAllowed), innerHtml += "</tr>" } if (!hasRow && ZPForm.isEditMode() && 0 == $(innerHtml).find(":input").size()) return; tabularRowHtml += innerHtml } ZPForm.isViewMode() && void 0 !== tabularObj.summationRowValues && tabularObj.summationRowValues.length > 0 && (tabularRowHtml += '<tr id="zp_forms_summationrow">', $.each(tabularObj.summationRowValues, function (ind, value) { tabularRowHtml += "<td>" + (ZPUtil.Validation.isEmpty(value) ? "" : "<b>" + value + "</b>") + "</td>" }), tabularRowHtml += "</tr>"), tabularRowHtml += "</tbody>", secTableObj.find("table").html(tabularRowHtml) } else { secTableObj = ZPForm.FIELD_LAYOUT.find("#zp_section_fields_" + tabularObj.sectionId), ZPForm.PRINT && (secTableObj = ZPForm.PRINTPAGE_DATA.find("#zp_section_fields_" + tabularObj.sectionId)); var sectionHtml = "", secComp = ZPForm.getSectionComponent(tabularObj.sectionId); for (i = 0; i < rows; i++) { 0 !== i && (sectionHtml += "<h6 " + (1 === ZPForm.getPaginationType() ? 'class="DN"' : "") + "></h6>"), sectionHtml += '<div id="zp_section_fields_' + secComp.sectionId + '" secid="' + tabularObj.sectionId + '" class="row' + (1 !== ZPForm.getPaginationType() || ZPForm.PRINT ? "" : " DN") + '" ' + (hasRow ? "rowid='" + tabularObj.recordIdArray[i] + "'" : "") + ' row="' + (i + 1) + '" istabular="true" isgrid="' + tabularObj.isGridType + '">'; var rowId = tabularObj.recordIdArray[i]; ZPForm.isViewMode() || (sectionHtml += '<div class="row ZPFrow">'), void 0 !== tabularObj.column1 && (sectionHtml += this.getFieldFormat(secComp.column1, secComp.isGridType, tabularObj.sectionId, tabularObj.column1, i, void 0, rowId)), void 0 !== tabularObj.column2 && (sectionHtml += this.getFieldFormat(secComp.column2, secComp.isGridType, tabularObj.sectionId, tabularObj.column2, i, void 0, rowId)), ZPForm.isViewMode() || (tabularObj.isRemoveAllowed && (sectionHtml += '<td><i class="IC-cls-frm  S18 gry Rmicon ML10" id="zp_form_deletetabular_row" secId="' + secComp.sectionId + '" onclick="ZPForm.Record.removeinlineTabularRow(this);"></i></td>'), sectionHtml += "</div>"), sectionHtml += "</div>" } if (!hasRow && ZPForm.isEditMode() && 0 == $(sectionHtml).find(":input").size()) return; secTableObj.replaceWith(sectionHtml), secTableObj = ZPForm.FIELD_LAYOUT.find("#zp_section_fields_" + tabularObj.sectionId), ZPForm.PRINT && (secTableObj = ZPForm.PRINTPAGE_DATA.find("#zp_section_fields_" + tabularObj.sectionId)) } secTableObj.find("[isallowed=false]").attr("isallowed", !0), void 0 !== secTableObj && (secTableObj.find('[data-popover="true"]').each(function () { $(this).data("content", $(this).html()) }), secTableObj.popover({ selector: "[data-popover].popHover", trigger: "click hover", placement: "bottom", delay: { show: 50, hide: 50 } }), ZPForm.registerFieldChangeFun(secTableObj)) }, setValueForFields: function (fieldsLst, isSingleEdit, ownerIds) { if (void 0 !== fieldsLst) { var tableName = (ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], ZPForm.getTableName()); $.each(fieldsLst, function (ind, fieldData) { var value = this.componentValue + "", labelName = this.componentName, formC = ZPForm.Field.getFieldComponent(this.formComponentId); if (void 0 != formC && formC.fieldType == ZPForm.Field.MULTI_FILE_UPLOAD && (value = this.componentValue), ("EDIT" === ZPForm.MODE || isSingleEdit) && (this.isEditable || ZPForm.IS_RESUBMIT && void 0 != formC && null != formC.isPrimaryLookup && formC.isPrimaryLookup) && this.componentType != zpconst.FieldType.AUTONUMBER && this.componentType != zpconst.FieldType.SCRIPT) if (void 0 !== this.componentValue_ID && this.componentType !== ZPForm.Field.PICKLIST && (value = this.componentValue_ID, ("object" == typeof value && 0 === value.length || "string" == typeof value && "" === value.trim()) && (value = void 0)), this.isEditable || ZPForm.IS_RESUBMIT && null != formC.isPrimaryLookup && formC.isPrimaryLookup) { "P_SelfAppraisal" === tableName && "AppriasalConfiguration" === labelName && (ZPForm.CURRFORM_PARAM.configId = value); var fieldObj = ZPForm.FIELD_LAYOUT.find(":input[name=" + labelName + "]"); if (0 == fieldObj.length && (ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + this.formComponentId).append("<input name='" + labelName + "' style='display:none'></input>"), fieldObj = ZPForm.FIELD_LAYOUT.find(":input[name=" + labelName + "]")), fieldObj.closest("div[isallowed=false]").attr("isallowed", !0), this.componentType === ZPForm.Field.PLAIN_TEXT && fieldObj.attr("isallowed", !0), void 0 !== value) { var fldCreateFun = ZPForm.CURRFORM_PARAM.createFldFunctions; if (void 0 !== fldCreateFun && void 0 !== fldCreateFun[labelName] && "function" == typeof fldCreateFun[labelName]) fldCreateFun[labelName](this, "EDIT"); else { if (this.componentType == ZPForm.Field.COUNTRY) { fieldObj.find("option[value='" + ZPeople.decodeTxt(value) + "']").length <= 0 && fieldObj.append("<option value='" + this.componentValue + "'>" + this.componentValue + "</option"); var eles = ZPForm.FIELD_LAYOUT.find("select[refCountryId='" + this.formComponentId + "']"), result = this.state_options; if (void 0 != eles) { var ophtml = '<option value="-Select-">Select</option>'; if (void 0 != result && 0 != result.data.length) { var states = result.data; $.each(states, function () { ophtml += '<option value="' + this.state_name + '">' + this.state_name + "</option>" }) } $.each(eles, function () { $(this).select2("destroy"), ZPForm.FIELD_LAYOUT.find(this).html(ophtml), ZPForm.FIELD_LAYOUT.find(this).select2() }) } fieldObj.select2("val", ZPeople.decodeTxt(value)) } if (0 !== fieldObj.length || this.componentType === ZPForm.Field.LOOKUP) if (this.componentType === ZPForm.Field.PICKLIST || this.componentType === ZPForm.Field.LOOKUP || this.componentType === ZPForm.Field.GENDER || this.componentType === ZPForm.Field.BLOODGROUP || this.componentType === ZPForm.Field.COUNTRY || this.componentType === ZPForm.Field.STATES || this.componentType === ZPForm.Field.TIME_ZONE) if (ZPForm.FORM_COMPONENTS[this.formComponentId] && (this.displayType = ZPForm.FORM_COMPONENTS[this.formComponentId].displayType), this.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE || this.displayType === ZPForm.Field.SELECT_DISPLYTYPE && "" !== value.trim()) if (this.componentType === ZPForm.Field.PICKLIST && this.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE && (value = value.split(",")), this.displayType === ZPForm.Field.SELECT_DISPLYTYPE && "" !== value.trim()) "Role" === labelName && "P_Employee" == tableName && 3 !== ZPForm.Permission.getEditPerm() ? (fieldObj.select2("val", ZPeople.decodeTxt(value)), ZPForm.FIELD_LAYOUT.find("[folabel=" + labelName + "]").children("div").hide(), fieldObj.after("<span>" + this.componentValue + "</span>")) : (this.componentType === ZPForm.Field.LOOKUP && fieldObj.find("option[value='" + ZPeople.decodeTxt(value) + "']").length <= 0 && fieldObj.append("<option value='" + this.componentValue_ID + "'>" + this.componentValue + "</option"), ZPForm.select2.ALL_OPTIONS[this.formComponentId + "_" + this.componentValue_ID] = this.componentValue, fieldObj.select2("val", ZPeople.decodeTxt(value))); else { if (this.componentType === ZPForm.Field.LOOKUP) { var cmp_values_Id = this.componentValue_ID, cmp_values = this.componentValue, lkfcid = this.formComponentId; $.each(this.componentValue, function (key, value) { fieldObj.find("option[value='" + cmp_values_Id[key] + "']").length <= 0 && fieldObj.append("<option value='" + cmp_values_Id[key] + "'>" + cmp_values[key] + "</option"), ZPForm.select2.ALL_OPTIONS[lkfcid + "_" + cmp_values_Id[key]] = cmp_values[key] }) } fieldObj.select2("val", value) } else if (this.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE && value.length > 0) { this.componentType === ZPForm.Field.PICKLIST && (value = value.split(",")); var cmpType = this.componentType, cmp_values_Id = this.componentValue_ID, cmp_values = this.componentValue, componentName = this.componentName, tempfcid = this.formComponentId; $.each(value, function (index) { var val = this + ""; if (cmpType === ZPForm.Field.LOOKUP && fieldObj.filter("[value='" + val + "']").length <= 0) { var tempHtml = '<label class="checkbox DIB"><input type="checkbox" checked value="' + cmp_values_Id[index] + '" name="' + componentName + '"><span>' + cmp_values[index] + '</span></label><span class="clearfix"></span>'; fieldObj.length > 0 ? $(fieldObj[0]).closest("div").append(tempHtml) : (ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + tempfcid).find("div[fieldtype=" + ZPForm.Field.LOOKUP + "]").append(tempHtml), fieldObj = ZPForm.FIELD_LAYOUT.find(":input[name=" + labelName + "]")) } else fieldObj.filter(function () { val === $(this).val() && (this.checked = !0) }) }) } else if (this.displayType === ZPForm.Field.RADIO_DISPLYTYPE && "" !== value.trim()) if (this.componentType === ZPForm.Field.LOOKUP && fieldObj.filter("[value='" + value + "']").length <= 0) { var tempHtml = '<label class="radio DIB"><input type="radio" checked value="' + this.componentValue_ID + '" name="' + this.componentName + '"><span>' + this.componentValue + '</span></label><span class="clearfix"></span>'; fieldObj.length > 0 ? $(fieldObj[0]).closest("div").append(tempHtml) : (ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + this.formComponentId).find("div[fieldtype=" + ZPForm.Field.LOOKUP + "]").append(tempHtml), fieldObj = ZPForm.FIELD_LAYOUT.find(":input[name=" + labelName + "]")) } else fieldObj.filter(function () { value + "" === $(this).val() && (this.checked = !0) }); else "" !== value.trim() && fieldObj.select2("val", ZPeople.decodeTxt(value)); else if (this.componentType === ZPForm.Field.CHECK_BOX) fieldObj[0].checked = "true" === value; else if (this.componentType === ZPForm.Field.FILE_UPLOAD || this.componentType === ZPForm.Field.IMAGE) { if (!ZPUtil.Validation.isEmpty(value)) { if (value = value.replace("Cropped", ""), void 0 === this.componentValue_fileId || "P_Timesheet" !== tableName && "P_TimesheetJob" !== tableName) fieldObj.parent().parent().parent().parent().addClass("DN").after('<div id="zp_form_fileuploadfield"><a class="pdf-text MR10" onclick="window.open(\'' + this.componentValue_downloadUrl + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(value) + '</a><a href="javascript:;" change="true" onclick="ZPForm.Field.toggleFileUpload(this);" class="text-ovr">' + ZPI18N.getString("zp.change") + "</a></div>"); else { var recordId = "P_TimesheetJob" === tableName ? ZPForm.CURRFORM_PARAM.recordId : null, source = "P_TimesheetJob" === tableName ? null : "timelogs"; fieldObj.parent().parent().parent().parent().addClass("DN").after('<div id="zp_form_fileuploadfield"><a class="pdf-text MR10" onclick="Timetracker.util.retrieveFile(\'' + this.componentValue_fileId + "','" + recordId + "','" + source + '\');" href="javascript:;">' + ZPeople.decodeTxt(ZPForm.Field.getNoValueString(value)) + '</a><a href="javascript:;" change="true" onclick="ZPForm.Field.toggleFileUpload(this);" onclick="" class="text-ovr">' + ZPI18N.getString("zp.change") + "</a></div>") } var inputEle = $('<input type="hidden" value="" id="filename"/>'); inputEle.val(this.componentValue_filePath), fieldObj.after(inputEle) } } else if (this.componentType === ZPForm.Field.MULTI_FILE_UPLOAD) { for (var compva = [], i = 0; i < value.length; i++) { var val1 = value[i], compval = val1.componentValue + ""; if (!ZPUtil.Validation.isEmpty(compval)) { if (compval = compval.replace("Cropped", ""), void 0 === val1.componentValue_fileId || "P_Timesheet" !== tableName && "P_TimesheetJob" !== tableName) fieldObj.parent().parent().parent().parent().addClass("DN").after('<div id="zp_form_fileuploadfield_' + i + '"><a class="pdf-text MR10" id="filepa_' + i + '" filepath="' + val1.componentValue_filePath + '"onclick="window.open(\'' + val1.componentValue_downloadUrl + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(compval) + '</a><a href="javascript:;" change="true" onclick="ZPForm.Field.toggleFileUpload(this);" class="text-ovr">' + ZPI18N.getString("zp.remove") + "</a></div>"); else { var recordId = "P_TimesheetJob" === tableName ? ZPForm.CURRFORM_PARAM.recordId : null, source = "P_TimesheetJob" === tableName ? null : "timelogs"; fieldObj.parent().parent().parent().parent().addClass("DN").after('<div id="zp_form_fileuploadfield' + i + '"><a class="pdf-text MR10" onclick="Timetracker.util.retrieveFile(\'' + val1.componentValue_fileId + "','" + recordId + "','" + source + '\');" href="javascript:;">' + ZPeople.decodeTxt(ZPForm.Field.getNoValueString(compval)) + '</a><a href="javascript:;" change="true" onclick="ZPForm.Field.toggleFileUpload(this);" onclick="" class="text-ovr">' + ZPI18N.getString("zp.remove") + "</a></div>") } compva.push(val1.componentValue_filePath) } } value.length < 5 && (fieldObj.closest("div[folabel=" + labelName + "]").find(".ZPUFile").removeClass("DN"), fieldObj.closest("div[folabel=" + labelName + "]").find("#beforeUpload").removeClass("DN")); var inputEle = $('<input type="hidden" value="" id="filename"/>'); inputEle.val(JSON.stringify(compva)), fieldObj.after(inputEle) } else this.componentType === ZPForm.Field.EMAIL_ADDRESS ? "EmailID" != labelName || "P_Employee" != tableName || ZPForm.Employee.isNonUser() ? fieldObj.val(ZPeople.decodeTxt(value)) : (fieldObj.parent().addClass("ellipsis ZPMail"), ZPForm.FIELD_LAYOUT.find(":input[name=" + labelName + "]").hide().val(ZPeople.decodeTxt(value)), fieldObj.after("<span>" + value + "</span>")) : this.componentType === ZPForm.Field.DATE_TIME ? ZPUtil.Validation.isEmpty(value) || fieldObj.val(Calendar.convertTo12Hours(ZPeople.decodeTxt(value))) : this.componentType === ZPForm.Field.TEXT_AREA ? fieldObj.val(ZPeople.decodeTxt(value.replace(/<br[^>]*>/gi, "\n"))) : fieldObj.val(ZPeople.decodeTxt(value)) } } void 0 === value && -1 !== Timetracker.constants.tableNames.indexOf(ZPForm.CURRFORM_PARAM.tableName) && (ZPForm.CURRFORM_PARAM.tableName === Timetracker.constants.PROJECT_TABLE ? ZPForm.FIELD_LAYOUT.find("#project_user_picklist").closest("div[isallowed=false]").attr("isallowed", !0) : "", ZPForm.CURRFORM_PARAM.tableName === Timetracker.constants.JOB_TABLE ? ZPForm.FIELD_LAYOUT.find("#zp_assignees_picklist").closest("div[isallowed=false]").attr("isallowed", !0) : ""); var readOnlyFields = ZPForm.CURRFORM_PARAM.readOnlyFields; void 0 !== readOnlyFields && -1 !== readOnlyFields.indexOf(labelName) && (ZPForm.FIELD_LAYOUT.find(":input[name=" + labelName + "]").parent().children().hide(), fieldObj.after("<span>" + ZPForm.Field.getNoValueString(this.componentValue) + "</span>")), -1 !== labelName.indexOf("EmployeeSalary") && "P_PerformanceAppraisal" == tableName && ZPForm.FIELD_LAYOUT.find("[folabel=EmployeeSalary]").parent("div.form-group").addClass("DN") } else { for (var nexts = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + this.formComponentId).parent().next() ; 0 != nexts.length && void 0 != nexts.attr("id") && nexts.attr("id").startsWith("zp_form_relfield_") ;) temp = nexts.next(), nexts.remove(), nexts = temp; ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + this.formComponentId).parent().remove() } else { if (ZPForm.isEditMode() && ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + this.formComponentId).parent().addClass("zp-rdonly"), "P_Employee" === tableName && ZPForm.IS_SUBMIT) { var userDtl = ZPeople.getUserDetailsById(ZPForm.CURRFORM_PARAM.recordId, !0); void 0 == userDtl || userDtl.notFound || ZPForm.updateUserDetails(userDtl, this.componentName, value, this.componentValue_ID) } var fldCreateFun = ZPForm.CURRFORM_PARAM.createFldFunctions; if (void 0 !== fldCreateFun && void 0 !== fldCreateFun[labelName] && "function" == typeof fldCreateFun[labelName]) fldCreateFun[labelName](this, "VIEW"); else { var fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + this.formComponentId); if (ZPForm.PRINT && (fieldObj = ZPForm.PRINTPAGE_DATA.find("#zp_field_outer_" + this.formComponentId)), 0 === fieldObj.length) return; if (fieldObj.parent().attr("isallowed", !0), this.componentType === ZPForm.Field.PLAIN_TEXT) { try { value = decodeURI(value) } catch (e) { } fieldObj.attr("isallowed", !0) } if (this.componentType === ZPForm.Field.FILE_UPLOAD) if (ZPUtil.Validation.isEmpty(value)) fieldObj.html(ZPForm.Field.getNoValueString(value)); else if (value = value.replace("Cropped", ""), void 0 === this.componentValue_fileId || "P_Timesheet" !== tableName && "P_TimesheetJob" !== tableName) if ("#performance/myreview/myratings" == Layout.Page.hash) { var submode = "myratings"; fieldObj.html("<span><a onclick=\"window.open('" + this.componentValue_downloadUrl + "&submode=" + submode + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(value) + "</span>") } else fieldObj.html("<span><a onclick=\"window.open('" + this.componentValue_downloadUrl + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(value) + "</span>"); else { var recordId = "P_TimesheetJob" === tableName ? ZPForm.CURRFORM_PARAM.recordId : null, source = "P_TimesheetJob" === tableName ? null : "timelogs"; fieldObj.html("<span><a onclick=\"Timetracker.util.retrieveFile('" + this.componentValue_fileId + "','" + recordId + "','" + source + '\');" href="javascript:;">' + ZPeople.decodeTxt(ZPForm.Field.getNoValueString(value)) + "</span>") } else if (this.componentType === ZPForm.Field.MULTI_FILE_UPLOAD) for (var i = 0; i < value.length; i++) { var val = value[i], compval = val.componentValue + ""; if (ZPUtil.Validation.isEmpty(compval)) fieldObj.html(ZPForm.Field.getNoValueString(compval)); else if (compval = compval.replace("Cropped", ""), void 0 === val.componentValue_fileId || "P_Timesheet" !== tableName && "P_TimesheetJob" !== tableName) if ("#performance/myreview/myratings" == Layout.Page.hash) { var submode = "myratings"; fieldObj.html("<span><a onclick=\"window.open('" + val.componentValue_downloadUrl + "&submode=" + submode + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(compval) + "</span>") } else 0 == i ? fieldObj.html("<span><a onclick=\"window.open('" + val.componentValue_downloadUrl + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(compval) + "</span><br>") : fieldObj.append("<span><a onclick=\"window.open('" + val.componentValue_downloadUrl + '\');" href="javascript:;">' + ZPForm.Field.getNoValueString(compval) + "</span><br>"); else { var recordId = "P_TimesheetJob" === tableName ? ZPForm.CURRFORM_PARAM.recordId : null, source = "P_TimesheetJob" === tableName ? null : "timelogs"; fieldObj.html("<span><a onclick=\"Timetracker.util.retrieveFile('" + val.componentValue_fileId + "','" + recordId + "','" + source + '\');" href="javascript:;">' + ZPeople.decodeTxt(ZPForm.Field.getNoValueString(compval)) + "</span>") } } else if (this.componentType === ZPForm.Field.IMAGE) if (ZPUtil.Validation.isEmpty(value)) fieldObj.html(ZPForm.Field.getNoValueString(value)); else if (value = value.replace("Cropped", ""), "Photo" === labelName && "P_Employee" === tableName) fieldObj.html("-"); else if (ZPForm.PRINT) fieldObj.html('<span><img src="' + this.componentValue_downloadUrl.replace("original=true", "original=false") + '"/></span>'); else { var viewUrl = this.componentValue_downloadUrl.replace("original=true", "original=false"); ZPForm.Record.IMAGE_REFRESH && (ZPForm.Record.IMAGE_REFRESH = !1, viewUrl += "&time=" + (new Date).getTime()), fieldObj.html('<span><img src="' + viewUrl + '"/><div class="clearfix"></div><a class="pdf-text" onclick="window.open(\'' + this.componentValue_downloadUrl + '\');" href="javascript:;">' + ZPI18N.getString("zp.Download") + "</a></span>") } else if (this.componentType === ZPForm.Field.URL) fieldObj.html('<span><a rel="noreferrer" href="' + value + '" target="_blank">' + ZPForm.Field.getNoValueString(value) + "</span>"), ZPeople.redirectFix(fieldObj.find("a")[0]); else if (this.componentType === ZPForm.Field.EMAIL_ADDRESS) ZPForm.PRINT ? fieldObj.addClass("ZPMail") : fieldObj.find("span").addClass("ellipsis ZPMail"), fieldObj.html('<span title="' + value + '">' + ZPForm.Field.getNoValueString(value) + "</span>"); else if (this.componentType === ZPForm.Field.DATE_TIME) { var val = ZPeople.decodeTxt(value); val = ZPUtil.Validation.isEmpty(val) ? ZPForm.Field.getNoValueString(val) : Calendar.convertTo12Hours(val), fieldObj.html("<span>" + val + "</span>") } else if (this.componentType === ZPForm.Field.TIME_ZONE) value = this.dispname, fieldObj.html("<span>" + ZPForm.Field.getNoValueString(value) + "</span>"); else if ("P_HR_Case" == ZPForm.getTableName()) { var content = ZPFeeds.Activity.validateContent(value, !1, null); fieldObj.html("<span>" + content + "</span>") } else fieldObj.html("<span>" + ZPForm.Field.getNoValueString(value) + "</span>"); (ZPForm.isDraftrec || ZPForm.isApprover() || ZPForm.Permission.isPermitted(ZPForm.Permission.getEditPerm())) && this.isEditable && this.componentType !== ZPForm.Field.PLAIN_TEXT && this.componentType !== ZPForm.Field.FILE_UPLOAD && this.componentType !== ZPForm.Field.IMAGE && this.componentType !== ZPForm.Field.AUTONUMBER && this.componentType !== ZPForm.Field.SCRIPT && !ZPForm.FORM_VIEW_READONLY && !ZPForm.CURRFORM_PARAM.disableSingleEdit && ZPForm.isApprovalStarted() && this.componentType !== ZPForm.Field.MULTI_FILE_UPLOAD && ("P_Employee" !== tableName || "P_Employee" === tableName && (("EmailID" != labelName || "P_Employee" != tableName || ZPForm.Employee.isNonUser()) && "EmailID" === labelName || "Role" === labelName && ZPForm.isRecordAdmin() || "EmailID" !== labelName && "Role" !== labelName)) && fieldObj.parent().on("mouseenter", function () { ZPForm.Field.Edit.showOption(this) }).on("mouseleave", function () { ZPForm.Field.Edit.hideOption(this) }), fieldObj.parent().data(this) } } void 0 !== this.componentValue_RelatedFields && ZPForm.Field.setRelatedFieldsData(this.componentValue_RelatedFields, fieldData.formComponentId) }) } }, getMyFormsList: function (Obj) { if ($("#zpeople_forms_list").is(":visible") || "true" === $("#zpeople_forms_list").attr("isLoaded")) return void ZPeople.toggleDropdown("zpeople_forms"); var params = { mode: "GET_MY_FORMS" }, url = "peopleAction.zp"; ZPeople.Request.send(url, params, ZPForm.constructFormsList) }, constructFormsList: function (resultData) { var formLstObj = $("#zpeople_forms_list"); if (void 0 !== resultData && 0 !== resultData.length) { var listHtml = ""; $.each(resultData, function () { listHtml += '<li><div class="rowlst"><a href="#' + ZPForm.getUrl() + "add-formId:" + this.formId + '">' + this.formName + "</a></div></li>" }), formLstObj.html(listHtml).attr("isLoaded", "true"), ZPeople.toggleDropdown("zpeople_forms") } }, addTabularSectionRow: function (sectionId, isFirst) { var secHtmlObj, secComp = ZPForm.getSectionComponent(sectionId), prevSecObj = ZPForm.FIELD_LAYOUT.find("[id=zp_section_fields_" + sectionId + "]:last"), rowCnt = parseInt(prevSecObj.attr("row")) + 1; if (secComp.isGridType) rowCnt = parseInt(prevSecObj.find("#zp_forms_tabluar_" + sectionId).children("tr:last").attr("row")) + 1, isNaN(rowCnt) && (rowCnt = 1), secHtmlObj = $(this.getFieldFormat(secComp.column1, secComp.isGridType, sectionId)).attr("row", rowCnt), secHtmlObj = ZPFRules.hideFields(secHtmlObj, prevSecObj), prevSecObj.find("#zp_forms_tabluar_" + sectionId).append(secHtmlObj); else { if (isFirst) { rowCnt = 1; var prevSecObj = ZPForm.FIELD_LAYOUT.find("h6[id='" + sectionId + "']") } else var prevSecObj = ZPForm.FIELD_LAYOUT.find("[id=zp_section_fields_" + sectionId + "]:last"); var sectionHtml = '<div id="zp_section_fields_' + sectionId + '" secid="' + sectionId + '" class="row" isgrid="false" istabular="true" row = "' + rowCnt + '"><div class="row ZPFrow">'; sectionHtml += this.getFieldFormat(secComp.column1, secComp.isGridType, sectionId, void 0, void 0, !0), sectionHtml += this.getFieldFormat(secComp.column2, secComp.isGridType, sectionId, void 0, void 0, !0), sectionHtml += '<td><i class="IC-cls-frm  S18 gry Rmicon ML10" id="zp_form_deletetabular_row" secId="' + sectionId + '" onclick="ZPForm.Record.removeinlineTabularRow(this);"></i></td></div>', sectionHtml += "</div>", secHtmlObj = $(sectionHtml), secHtmlObj = ZPFRules.hideFields(secHtmlObj, prevSecObj), prevSecObj.after(secHtmlObj) } ZPForm.registerFieldChangeFun(secHtmlObj) }, getFieldFormat: function (fieldsLst, isGrid, sectionId, fieldValObj, rowNo, isTabRowAdd, rowId) { var sectionHtml = "", tableName = ZPForm.getTableName(); if (isGrid) sectionHtml = '<tr id="zp_tabular_row" row="' + (void 0 === rowNo ? 1 : rowNo) + '">', sectionHtml += ZPForm.getTabularColumn(fieldsLst, sectionId), sectionHtml += "</tr>"; else { sectionHtml = '<div class="col-sm-6">'; var fieldIndex = 0; $.each(fieldsLst, function (index, fieldData) { var isviewforquickAdd = !1, isviewforquickAddreffcid = !1, isDisplayField = !1; if ((!isTabRowAdd || !ZPForm.isEditMode() || this.isTabFieldEditable) && (isAdminProfile || !ZPForm.isAddMode() || null == ZPForm.primLkpType || fieldData.componentType === ZPForm.Field.PLAIN_TEXT || fieldData.isPrimary || ZPForm.Permission.isPermAllowed(ZPForm.primLkpType, fieldData.editperm))) { if (ZPForm.isQuickAdd) { isDisplayField = !0, (!this.isMandatory || "P_TimesheetJob" == tableName && "Assignees" == this.labelName) && (isviewforquickAdd = !0), (this.formComponentId != ZPForm.reffcid || "P_TimesheetJob" == tableName && "Assignees" == this.labelName) && (isviewforquickAddreffcid = !0); for (var i = 0; i < ZPForm.displayFields.length; i++) ZPForm.displayFields[i] == this.formComponentId && (isDisplayField = !1) } if (("P_EmployeeLeave" !== tableName || "Daystaken" !== this.labelName) && !("P_Goals" === tableName && "KRA" === this.labelName && ZPForm.isEditMode() || "P_EmployeeLeave" === tableName && "To" === this.labelName || void 0 === this || void 0 === fieldData || isviewforquickAdd && isviewforquickAddreffcid && isDisplayField || (this.fieldType === ZPForm.Field.AUTONUMBER || this.fieldType === ZPForm.Field.SCRIPT) && ZPForm.isAddMode())) { if (ZPForm.isAddMode() && ("P_EmployeeLeave" != tableName && this.editperm == zpconst.Permission.NO_DATA && !ZPForm.isLocAdmin() && !isAdminProfile || this.isSystemHiddenField)) return; var value = ""; if (ZPForm.isAddMode() && !ZPUtil.Validation.isEmpty(this.autofillvalue) || this.fieldType === ZPForm.Field.PLAIN_TEXT && !ZPUtil.Validation.isEmpty(this.autofillvalue)) if (this.fieldType === ZPForm.Field.DATE_TIME) value = Calendar.convertTo12Hours(this.autofillvalue); else if (value = this.autofillvalue, this.fieldType === ZPForm.Field.PLAIN_TEXT) { try { value = decodeURI(value) } catch (e) { } value = value.replace(/<ul>/, '<ul class="uleditorsty">'), value = value.replace(/<ol>/, '<ol class="oleditorsty">') } var cmpVal = "", isModeChange = !1; if (void 0 !== fieldValObj) { if (this.isTabFieldEditable = !1, void 0 == fieldValObj[fieldIndex] || fieldValObj[fieldIndex].formComponentId != this.formComponentId) return; !ZPForm.isEditMode() || this.fieldType != zpconst.FieldType.SCRIPT && fieldValObj[fieldIndex].isEditable || (isModeChange = !0), this.fieldType !== ZPForm.Field.SCRIPT && (this.isTabFieldEditable = !0); var tempVal = fieldValObj[fieldIndex].componentValue[rowNo]; ZPForm.isEditMode() && this.fieldType == ZPForm.Field.LOOKUP && void 0 != fieldValObj[fieldIndex].componentValue_ID & !isModeChange && (cmpVal = tempVal, tempVal = fieldValObj[fieldIndex].componentValue_ID[rowNo], ZPForm.select2.ALL_OPTIONS[this.formComponentId + "_" + tempVal] = cmpVal), null != tempVal && void 0 !== tempVal && "" !== tempVal.trim() && (value = tempVal), fieldIndex++ } var isRelFieldEnabled = !1, isFieldDependent = !1; if (this.isFieldDependent && (isFieldDependent = this.isFieldDependent), void 0 !== this.relatedFieldDetails && this.relatedFieldDetails.length > 0 && (isRelFieldEnabled = !0), this.fieldType === ZPForm.Field.PLAIN_TEXT) sectionHtml += '<div class="zp-label zp-notes" id="zp_field_outer_' + this.formComponentId + '">' + value + "</div>"; else { var manClass = ""; if ((ZPForm.Field.isMandatory(this.isMandatory, this.labelName) || "P_EmployeeLeave" === tableName && "ZP_Leave_File_Upload" === this.labelName) && (manClass = "Matry"), "P_EmployeeLeave" === tableName && "From" === this.labelName) this.isleave = !0, fieldsLst[index + 1].isleave = !0, sectionHtml += '<div class="zp-label zp-label-offset DN" id="available"><div class="zprt-label dgry">' + ZPI18N.getString("zp.leave.report.available") + ' <span class="Tclr" id="balancealert"></span></div></div>', sectionHtml += ZPForm.leaveFromToFields(this, fieldsLst[index + 1], value, manClass, isRelFieldEnabled, isFieldDependent); else if ("P_Compensatory" === tableName && "IsHalfday" === this.labelName) sectionHtml += '<div id="zp_formcompoff_extrainfo"></div>'; else if ("P_Employee" !== tableName || "Photo" !== this.labelName) { isModeChange && ZPForm.setViewMode(), ZPForm.isEditMode() && this.fieldType === ZPForm.Field.TEXT_AREA && void 0 != value && null != value && (value = ZPeople.decodeTxt(value.replace(/<br[^>]*>/gi, "\n"))); var tempHtml = ""; if (this.fieldType == ZPForm.Field.URL && this.isTabular && ZPForm.isViewMode() && (value = '<a rel="noreferrer" href="' + value + '" target="_blank">' + value + "</a>"), tempHtml += ZPForm.CURRFORM_PARAM.isSingleCol ? ZPForm.getSingleColumnFieldFormat(value, manClass, this, isRelFieldEnabled, isFieldDependent, isModeChange) : ZPForm.getDoubleColumnFieldFormat(value, manClass, this, isRelFieldEnabled, isFieldDependent, isModeChange), ZPForm.isEditMode() && this.fieldType == ZPForm.Field.COUNTRY && $(tempHtml).find("option[value='" + ZPeople.decodeTxt(value) + "']").length <= 0) { var temp1 = jQuery("<div />").append(tempHtml); temp1.find(":input[name=" + this.labelName + "]").append("<option selected value='" + value + "'>" + ZPeople.decodeTxt(value) + "</option"), tempHtml = temp1.html() } if (void 0 !== cmpVal && "" != cmpVal && ZPForm.isEditMode() && this.fieldType == ZPForm.Field.LOOKUP && $(tempHtml).find("option[value='" + ZPeople.decodeTxt(value) + "']").length <= 0) { var temp1 = jQuery("<div />").append(tempHtml); temp1.find(":input[name=" + this.labelName + "]").append("<option selected value='" + value + "'>" + cmpVal + "</option"), tempHtml = temp1.html() } isModeChange && ZPForm.setEditMode(), sectionHtml += tempHtml } } if (isRelFieldEnabled) { var relFieldVal, relFieldsHtml = "", optionslen = 1, isFillRelFields = !1; this.hasOwnProperty("AddOptions") && (optionslen = this.AddOptions, $.each(this.AddOptions, function (key, value) { value.Id == erecno && (isFillRelFields = !0) })), void 0 !== this.relatedFieldValues && 7e3 === this.relatedFieldValues.code && 0 != optionslen && isFillRelFields && (relFieldVal = this.relatedFieldValues.message[erecno]), $.each(this.relatedFieldDetails, function (index) { var value; if (void 0 !== relFieldVal && void 0 != relFieldVal[this.formComponentId] && (value = relFieldVal[this.formComponentId]), void 0 != rowId) { var id = fieldValObj[fieldIndex - 1].componentValue_ID[rowNo]; Object.keys(fieldValObj[fieldIndex - 1].tabularrelatedFieldValues[rowId]).length > 0 && void 0 != fieldValObj[fieldIndex - 1].tabularrelatedFieldValues[rowId][id] && Object.keys(fieldValObj[fieldIndex - 1].tabularrelatedFieldValues[rowId][id]).length > 0 && (value = fieldValObj[fieldIndex - 1].tabularrelatedFieldValues[rowId][id][index].Value) } relFieldsHtml += '<div class="zp-label Rflds" fieldtype="' + this.compType + '" labelname="' + this.labelName + '" id="zp_form_relfield_' + fieldData.formComponentId + "_" + this.formComponentId + '"><label class="zplt-label">' + this.displayName + '</label><div id="zp_form_relfield_value" class="zprt-label">' + (4 !== ZPForm.CONF.addPerm && ZPForm.isAddMode() || void 0 != rowId ? this.compType == ZPForm.Field.IMAGE && "-" != ZPForm.Field.getNoValueString(value) ? '<img class="rlflds-img" src="' + (ZPForm.isEmbedForm && !isAuthreq ? "embed" + value + "&digest=" + Embed_digest : value) + '"></img>' : ZPForm.Field.getNoValueString(value) : "-") + "</div></div>" }), sectionHtml += relFieldsHtml } } } }), sectionHtml += "</div>" } return sectionHtml }, getSingleColumnFieldFormat: function (value, manClass, fieldObj, isRelFieldEnabled, isFieldDependent, isModeChange) { var valueCss = "zprt-label"; ZPForm.CURRFORM_PARAM.modalPopupView && (valueCss = "col-sm-9"), isModeChange && (manClass += " zp-rdonly"); var timeFieldCls = ""; return '<div class="zp-label ' + timeFieldCls + " " + manClass + '" isAllowed="false" ><label class="zplt-label">' + fieldObj.displayName + (ZPForm.PAGEMODE ? "&nbsp;:&nbsp;" : "") + ZPForm.Field.isPrimaryLookupHtml(fieldObj) + '</label><div folabel="' + fieldObj.labelName + '" fieldtype="' + fieldObj.fieldType + '" ' + (void 0 !== fieldObj.displayType ? 'displaytype="' + fieldObj.displayType + '"' : "") + ' id="zp_field_outer_' + fieldObj.formComponentId + '" class="' + valueCss + (ZPForm.isAddMode() ? "" : " PT5") + '" relateddata="' + isRelFieldEnabled + '" isFieldDependent="' + isFieldDependent + '">' + ZPForm.Field.isQuickAddForm(fieldObj) + ("VIEW" === ZPForm.MODE ? ZPForm.Field.getNoValueString(value) : ZPForm.Field.create(fieldObj, value)) + "</div></div>" }, getDoubleColumnFieldFormat: function (value, manClass, fieldObj, isRelFieldEnabled, isFieldDependent, isModeChange) { return isModeChange && (manClass += " zp-rdonly"), '<div class="zp-label ' + manClass + '" isAllowed="false"><label class="zplt-label">' + fieldObj.displayName + (ZPForm.PAGEMODE ? "&nbsp;:&nbsp;" : "") + ZPForm.Field.isPrimaryLookupHtml(fieldObj) + '</label><div folabel="' + fieldObj.labelName + '" fieldtype="' + fieldObj.fieldType + '" ' + (void 0 !== fieldObj.displayType ? 'displaytype="' + fieldObj.displayType + '"' : "") + ' id="zp_field_outer_' + fieldObj.formComponentId + '" class="zprt-label" relateddata="' + isRelFieldEnabled + '"  isFieldDependent="' + isFieldDependent + '">' + ZPForm.Field.isQuickAddForm(fieldObj) + ("VIEW" === ZPForm.MODE ? ZPForm.Field.getNoValueString(value) : ZPForm.Field.create(fieldObj, value)) + "</div></div>" }, leaveFromToFields: function (fromField, toField, value, manClass, isRelFieldEnabled, isFieldDependent) { var labelCss = "col-sm-4 P10I", valueCss = "zpcal", hashSpacing = "MT10"; ZPForm.CURRFORM_PARAM.modalPopupView && (labelCss = "col-sm-3", valueCss = "col-sm-4", hashSpacing = ""); var fieldHtml = '<div class="zp-label zp-multi-2 Matry" isAllowed="false"><label class="zplt-label">' + ZPI18N.getString("zp.date") + (ZPForm.PAGEMODE ? "&nbsp;:&nbsp;" : "") + "</label>"; return fieldHtml += '<div class="zprt-label">', fieldHtml += '<div folabel="' + fromField.labelName + '" fieldtype="' + fromField.fieldType + '" ' + (void 0 !== fromField.displayType ? 'displaytype="' + fromField.displayType + '"' : "") + ' id="zp_field_outer_' + fromField.formComponentId + '" relateddata="' + isRelFieldEnabled + '">' + ("VIEW" === ZPForm.MODE ? ZPForm.Field.getNoValueString(value) : ZPForm.Field.create(fromField, value)) + "</div>", fieldHtml += '<div folabel="' + toField.labelName + '" fieldtype="' + toField.fieldType + '" ' + (void 0 !== toField.displayType ? 'displaytype="' + toField.displayType + '"' : "") + ' id="zp_field_outer_' + toField.formComponentId + '" relateddata="' + isRelFieldEnabled + '">' + ("VIEW" === ZPForm.MODE ? ZPForm.Field.getNoValueString(value) : ZPForm.Field.create(toField, value)) + '</div></div></div><div class="zp-label zp-label-offset DN" id="leaveDays"><div id="zp_formleave_daylist"><div class="choose-leave-type DN"></div><div class="leave-type-foot DN"></div></div></div>' }, markSectionError: function () { ZPForm.LAYOUT.find("#zp_form_section_list").find("[id^=zp_form_section_]").each(function () { var secId = $(this).attr("secid"); void 0 !== secId && (0 !== ZPForm.FIELD_LAYOUT.find("#zp_section_fields_" + secId).find("[id=error_message]").length ? 0 === $(this).find(".IC-info, .IC-rou-tik").length ? $(this).prepend('<div class="IC-info red"></div>').addClass("err") : $(this).find(".IC-rou-tik").length > 0 && $(this).addClass("err").find(".IC-rou-tik").removeClass("IC-rou-tik").attr("class", "IC-info red") : 0 === $(this).find(".IC-info, .IC-rou-tik").length ? $(this).prepend('<div class="IC-rou-tik grn"></div>').removeClass("err") : $(this).find(".IC-info").length > 0 && $(this).removeClass("err").find(".IC-info").removeClass("IC-info").attr("class", "IC-rou-tik grn")) }) }, checkIsFormPopVisible: function () { void 0 !== ZPForm.FIELD_LAYOUT && ZPForm.toggleFormPage(!1) }, isFormPage: function () { var result = !1; return (0 === Layout.Page.hash.indexOf("#form/") || Layout.Page.modulemode && 0 === Layout.Page.hash.indexOf("#home/form/") || 0 === Layout.Page.hash.indexOf("#organization/employee") || 0 === Layout.Page.hash.indexOf("#organization/department") || 0 === Layout.Page.hash.indexOf("#performance/salary/employeesalary") || 0 === Layout.Page.hash.indexOf("#leavetracker/views/form")) && (result = !0), result }, getFormConf: function (formId) { void 0 === formId && (formId = ZPForm.CURRFORM_PARAM.formId); var formDtl = ZPForm.FORM_DETAILS[formId]; return void 0 !== formId && void 0 !== formDtl ? formDtl : formDtl = {} }, isEmployeeLookupPresent: function () { var isEmployeeLookupPresent = !1; return void 0 !== ZPForm.CONF && void 0 !== ZPForm.CONF.isEmployeeLookupPresent && "P_Employee" !== ZPForm.getTableName() && (isEmployeeLookupPresent = ZPForm.CONF.isEmployeeLookupPresent), isEmployeeLookupPresent }, isAuditHistoryEnabled: function () { var isAuditHistoryEnabled = !1; return void 0 !== ZPForm.CONF && void 0 !== ZPForm.CONF.isAuditHistoryEnabled && (isAuditHistoryEnabled = ZPForm.CONF.isAuditHistoryEnabled), isAuditHistoryEnabled }, isApprovalEnabled: function () { var isApprovalEnabled = !1; return void 0 !== ZPForm.CURRFORM_PARAM.isApprovalEnabled ? isApprovalEnabled = ZPForm.CURRFORM_PARAM.isApprovalEnabled : void 0 !== ZPForm.CONF.approvalSettingsDetails && void 0 !== ZPForm.CONF.approvalSettingsDetails.isApprovalEnabled && (isApprovalEnabled = ZPForm.CONF.approvalSettingsDetails.isApprovalEnabled), isApprovalEnabled }, isAllowedToEdit: function (fcids, isMassUpdate) { var apprNotEditStatus = [zpconst.ApprovalStatus.Cancelled, ZPForm.draftstatus, zpconst.ApprovalStatus.NoStatus, zpconst.ApprovalStatus.NotSubmitedd]; if (ZPForm.isApprovalEnabled() && ZPForm.CONF.approvalSettingsDetails.isEditAllow && (isMassUpdate || !ZPForm.isAddMode() && !ZPUtil.checkIsExistInArray(apprNotEditStatus, ZPForm.getSingleRecord().record.message.approvalStatus))) { if (void 0 == fcids && ZPForm.isEditMode()) return !0; var fcvList = ZPForm.CONF.approvalSettingsDetails.fieldValueChange.fcList; if (fcids.length > 0 && 0 === fcvList.length) return !0; for (var index = 0; index < fcvList.length; index++) if (ZPUtil.checkIsExistInArray(fcids, fcvList[index].fcId)) return !0 } return !1 }, getApproverType: function () { var approverType = "NONE"; return void 0 !== ZPForm.CONF && void 0 !== ZPForm.CONF.approverType && (approverType = ZPForm.CONF.approverType), approverType }, getTableName: function () { var tableName = ""; return void 0 !== ZPForm.CURRFORM_PARAM.tableName ? tableName = ZPForm.CURRFORM_PARAM.tableName : void 0 !== ZPForm.CONF && void 0 !== ZPForm.CONF.tableName && (tableName = ZPForm.CONF.tableName), tableName }, isAdmin: function (isOrgAdmOly) { var isAdmin = !1; return isOrgAdmOly ? isAdmin = isadmin : void 0 != ZPForm.CONF && void 0 !== ZPForm.CONF.isadmin && (isAdmin = ZPForm.CONF.isadmin), isAdmin }, isLocAdmin: function () { return ZPForm.CONF.isLocAdmin }, getPaginationType: function () { var paginationType = 0; return ZPForm.CURRFORM_PARAM.isFromSelfService ? paginationType = 0 : void 0 !== ZPForm.CURRFORM_PARAM.paginationType ? paginationType = ZPForm.CURRFORM_PARAM.paginationType : void 0 !== ZPForm.CONF && void 0 !== ZPForm.CONF.paginationType && (paginationType = ZPForm.CONF.paginationType), paginationType }, getFormDisplayName: function () { var formDispName = ""; return void 0 !== ZPForm.CURRFORM_PARAM.formdisplayName ? formDispName = ZPForm.CURRFORM_PARAM.formdisplayName : void 0 !== ZPForm.CONF && void 0 !== ZPForm.CONF.formdisplayName && (formDispName = ZPForm.CONF.formdisplayName), formDispName }, EMPLOOKUP_SUB_OPT: { isLoaded: !1, list: [] }, ALL_EMPLOOKUP_OPT: { isLoaded: !1, list: [] }, getPrimaryLookupValues: function (permission, mode) { var returnList = [], count = 0; if (4 !== permission && 0 !== permission && (returnList[0] = { Value: ZPeople.CURR_USER.name + ",&nbsp;" + ZPeople.CURR_USER.empid, Id: ZPeople.CURR_USER.usererec }), 2 === permission || 4 === permission) { if (!ZPForm.EMPLOOKUP_SUB_OPT.isLoaded) { var subUsers = ZPeople.getSubUsers(), ZPTablename = ZPForm.getTableName(); if (("P_TimesheetJobsList" === ZPTablename || "P_TimesheetJob" === ZPTablename || "P_Timesheet" === ZPTablename || "P_ClientDetails" === ZPTablename) && Timetracker.isLocAdmin) { for (var subLocUser = Timetracker.locUsers, newLoc = subUsers.concat(subLocUser), tempArr = newLoc.concat(), i = 0; i < tempArr.length; ++i) for (var j = i + 1; j < tempArr.length; ++j) tempArr[i] === tempArr[j] && tempArr.splice(j--, 1); subUsers = tempArr } $.each(subUsers, function (index) { var userDtl = ZPeople.getUserDetailsByIdFromAllUsers(this); ("true" === userDtl.isLogEnb && userDtl.usererec !== erecno || "true" === userDtl.isNonUser) && (ZPForm.EMPLOOKUP_SUB_OPT.list[count] = { Value: userDtl.name + ",&nbsp;" + userDtl.empid, Id: userDtl.usererec }, count++) }), ZPForm.EMPLOOKUP_SUB_OPT.isLoaded = !0 } returnList = returnList.concat(ZPForm.EMPLOOKUP_SUB_OPT.list) } else if (3 === permission) { if (!ZPForm.ALL_EMPLOOKUP_OPT.isLoaded) { var userList = ZPeople.getUserListData(); $.each(userList, function (index) { ("true" === this.isLogEnb && this.usererec !== erecno || "true" === this.isNonUser) && (ZPForm.ALL_EMPLOOKUP_OPT.list[count] = { Value: this.name + ",&nbsp;" + this.empid, Id: this.usererec }, count++) }), ZPForm.ALL_EMPLOOKUP_OPT.isLoaded = !0 } returnList = returnList.concat(ZPForm.ALL_EMPLOOKUP_OPT.list) } if (3 !== permission) { var tablename = ZPForm.getTableName(); if (-1 !== Timetracker.constants.tableNames.indexOf(tablename) && Timetracker.isTTLocationAdmin() && null != Timetracker.ttLocUsers) { var locUsers = [], includeCurrUser = 4 === permission || 0 === permission; $.each(Timetracker.ttLocUsers, function (index) { var userDtl = ZPeople.getUserDetailsByIdFromAllUsers(this); -1 === returnList.indexOf(userDtl.usererec) && ("true" === userDtl.isLogEnb && (userDtl.usererec !== erecno || includeCurrUser && userDtl.usererec === erecno) || "true" === userDtl.isNonUser) && locUsers.push({ Value: userDtl.name + ",&nbsp;" + userDtl.empid, Id: userDtl.usererec }) }), returnList = returnList.concat(locUsers) } } return returnList }, downloadAsPDF: function () { ZPeople.BSModal.setup({ id: "zp_templates", type: 2, modalClass: "popRgtModel PopMdxModel", header: ZPI18N.getString("zp.templates"), body: ZPeople.LOADING_HTML, buttonValue: ZPI18N.getString("zp.Download"), hiddenCallback: null, backdrop: !1, successCallback: ZPForm.downloadPDF }); var formID = Layout.Page.childUrlParam.formId, recordID = Layout.Page.childUrlParam.recordId; void 0 === formID && (formID = ZPForm.CURRFORM_PARAM.formId), void 0 === recordID && (recordID = ZPForm.CURRFORM_PARAM.recordId); var url = "/templateActions.zp", params = { mode: "getPDFTemplateList", formID: formID, recordID: recordID, isFromNewUI: !0 }; ZPeople.Request.send(url, params, ZPForm.showTemplatePage) }, showTemplatePage: function (data) { if (void 0 !== data.error) Layout.Page.container.find("#zp_templates").find(".modal-body").html(data.error.message); else { var templateList = data.templateList, select = "<select id='zp_template_choice' onChange='ZPForm.onTemplateChange()'><option value='-1'>" + ZPI18N.getString("zp.none") + "</option>"; $.each(templateList, function (key, value) { select += "<option value=" + value.templateID + ">" + value.templateName + "</option>", ZPForm.TEMPLATE_DATA[value.templateID + ""] = value.template }), select += "</select>", ZPForm.TEMPLATE_COMPONENTS.find("#zp_template_select").html(select); var size = ZPForm.TEMPLATE_COMPONENTS.find("#zp_template_choice").children().length; size > 3 ? ZPForm.TEMPLATE_COMPONENTS.find("#zp_template_choice").select2() : ZPForm.TEMPLATE_COMPONENTS.find("#zp_template_choice").select2({ minimumResultsForSearch: 1 / 0 }), Layout.Page.container.find("#zp_templates").find(".modal-body").html(ZPForm.TEMPLATE_COMPONENTS), Layout.Page.container.find("#zp_templates").find("#zp_template_content").html(""), Layout.Page.container.find("#zp_templates").find("input[type=radio]")[0].checked = !0 } }, onTemplateChange: function () { Layout.Page.container.find("#zp_templates").find("#zp_template_content").html(""); var selectedVal = Layout.Page.container.find("#zp_templates").find("#zp_template_choice").val(); if (void 0 !== selectedVal && "-1" !== selectedVal) { var templateMsg = ZPForm.TEMPLATE_DATA[selectedVal + ""]; if (void 0 !== templateMsg) { var msg = "<p>" + templateMsg + "</p>"; Layout.Page.container.find("#zp_templates").find("#zp_template_content").html(msg) } } }, downloadPDF: function () { var templateID = Layout.Page.container.find("#zp_templates").find("#zp_template_choice").val(); if (void 0 !== templateID && "-1" !== templateID) { var formID = Layout.Page.childUrlParam.formId; void 0 === formID && (formID = ZPForm.CURRFORM_PARAM.formId); var recordID = Layout.Page.childUrlParam.recordId; void 0 === recordID && (recordID = ZPForm.CURRFORM_PARAM.recordId); var formDispName = ZPForm.getFormDisplayName(), pdfViewType = Layout.Page.container.find("input[name=pdftype]:checked").val(), form = Layout.Page.container.find("#zp_template_form")[0], params = "mode=downloadAsPDF&formID=" + formID + "&recordID=" + recordID + "&templateID=" + templateID + "&formDispName=" + formDispName + "&pdfType=" + pdfViewType + "&isFromNewUI=true"; form.action = "/templateActions.zp?" + params, form.submit() } }, afterPDFDownload: function (data) { void 0 !== data.error ? ZPeople.Message.showFailureMsg(data.error.message) : ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.downloadsuccessfully")) }, getPagedFormView: function () { void 0 !== Layout.Page.urlparam.formId && void 0 !== Layout.Page.urlparam.recordId && (0 === Layout.Page.container.find("#zp_form_record_view").length && Layout.Page.container.append('<div class="Scrcont"><div class="ZPTcont" id="zp_form_record_view"></div></div>'), ZPForm.load({ formId: Layout.Page.urlparam.formId, recordId: Layout.Page.urlparam.recordId, formMode: "VIEW", isPageMode: !0, isFormReadOnly: !0, containerId: "zp_form_record_view" })) }, updateFormConf: function (formDtl) { void 0 !== formDtl && (ZPForm.CONF = formDtl, ZPForm.FORM_DETAILS[formDtl.formId] = formDtl) }, editProfileCancelCallback: function () { void 0 != ZPForm.CURRFORM_PARAM.cancelCallback && "function" == typeof ZPForm.CURRFORM_PARAM.cancelCallback ? ZPForm.CURRFORM_PARAM.cancelCallback(ZPForm.CURRFORM_PARAM.formId, ZPForm.CURRFORM_PARAM.recordId) : Profile.get() }, LOOKUP_DATA: {}, getLookupRefreshStatus: function (fcid, refFormId) { var lookUpData = ZPForm.LOOKUP_DATA[refFormId], refresh = !1; return void 0 !== lookUpData && (refresh = lookUpData.refresh, void 0 !== lookUpData.updatedFcIds && -1 !== lookUpData.updatedFcIds.indexOf(fcid) && (refresh = !1)), refresh }, refreshLookupOptions: function (formCompData) { var luArr = new Array; return 7e3 === formCompData.code && $.each(formCompData.message.formComponentDetails, function () { void 0 !== this.column1 && this.column1.length > 0 && $.each(this.column1, function () { this.fieldType === ZPForm.Field.LOOKUP && (this.isFilterEnabled || this.isPrimary && ((ZPForm.isEditMode() || ZPForm.isSingleFiledEdit()) && void 0 == this.EditOptions || ZPForm.isAddMode() && void 0 == this.AddOptions) || ZPForm.getLookupRefreshStatus(this.formComponentId, this.referredFormId)) && luArr.push(this.formComponentId) }), void 0 !== this.column2 && this.column2.length > 0 && $.each(this.column2, function () { this.fieldType === ZPForm.Field.LOOKUP && (this.isFilterEnabled || this.isPrimary && ((ZPForm.isEditMode() || ZPForm.isSingleFiledEdit()) && void 0 == this.EditOptions || ZPForm.isAddMode() && void 0 == this.AddOptions) || ZPForm.getLookupRefreshStatus(this.formComponentId, this.referredFormId)) && luArr.push(this.formComponentId) }) }), luArr }, fetchLookUpData: function (luFcIds, formData, fieldVal) { var params = { mode: "fetchFormLookupOtions", luFcIds: JSON.stringify(luFcIds), formId: ZPForm.CURRFORM_PARAM.formId }; void 0 != fieldVal && (params.fieldValues = JSON.stringify(fieldVal)), ZPUtil.Validation.isEmpty(ZPForm.CURRFORM_PARAM.recordId) || (params.recordId = ZPForm.CURRFORM_PARAM.recordId), "P_Timesheet" === ZPForm.getTableName() && (params.selUser = null === Timetracker.timelogs.tserecno || void 0 === Timetracker.timelogs.tserecno ? ZPeople.CURR_USER.usererec : Timetracker.timelogs.tserecno), "P_PerformanceAppraisal" === ZPForm.getTableName() && (params.configId = Layout.Page.urlparam.configId), ZPForm.isEmbedForm && !isAuthreq ? (params.digest = params.digest = Embed_digest, ZPeople.Request.send("/embedFormAction.hr", params, ZPForm.dependentFieldData, formData)) : ZPeople.Request.send(ZPForm.URL, params, ZPForm.updateLookUpData, formData) }, updateLookUpData: function (response, params, formData) { 7e3 === response.code && $.each(response.message, function (key, value) { ZPForm.updateLookupOptions(formData, key, value) }), null == ZPForm.Field.Edit.FORMCOMP_ID ? ZPForm.constructFields(formData, params) : ZPForm.Field.Edit.showFieldEditable() }, updateLookupOptions: function (formData, key, value) { var allowUpdate = !1; if (ZPForm.getTableName() === Timetracker.constants.PROJECT_TABLE) { var refreshedFcDtls = ZPForm.Field.getFieldComponent(key); allowUpdate = refreshedFcDtls && refreshedFcDtls.labelName && "ProjectUsers" === refreshedFcDtls.labelName } $.each(formData.message.formComponentDetails, function () { var isFieldUpdated = ZPForm.updateOptions(this.column1, key, value, allowUpdate); isFieldUpdated || ZPForm.updateOptions(this.column2, key, value, allowUpdate) }) }, updateOptions: function (fields, fcId, options, allowUpdate) { var isFieldUpdated = !1; if (void 0 !== fields && fields.length > 0) { var tableName = ZPForm.getTableName(); $.each(fields, function () { var isUpdate = void 0 !== allowUpdate && allowUpdate === !0 && "ProjectManager" === this.labelName; if (this.formComponentId === fcId || isUpdate) { this.Options = options, isFieldUpdated = !0; var lookUpData = ZPForm.LOOKUP_DATA[this.referredFormId], isPrimary = this.isPrimary || isUpdate; if ((!this.isFilterEnabled || isPrimary) && (isPrimary ? ZPForm.isEditMode() || ZPForm.isSingleFiledEdit() ? this.EditOptions = options : this.AddOptions = options : (this.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE || this.displayType === ZPForm.Field.RADIO_DISPLYTYPE) && (void 0 !== lookUpData.updatedFcIds && -1 === lookUpData.updatedFcIds.indexOf(this.formComponentId) ? lookUpData.updatedFcIds.push(this.formComponentId) : lookUpData.updatedFcIds = [this.formComponentId])), tableName !== Timetracker.constants.PROJECT_TABLE) return !1; isFieldUpdated = !1 } }) } return isFieldUpdated }, updateLookUpRefreshOpt: function (formId) { void 0 === formId && (formId = ZPForm.CURRFORM_PARAM.formId), ZPForm.LOOKUP_DATA[formId] = { refresh: !0 } }, uniqueErrorClose: function () { ZPForm.LAYOUT.find("#zp_form_outer_container").find("#uniqueErrorHead").fadeOut(1e3) }, headerConstruct: function (ele) { ZPForm.LAYOUT.find("#headerParent").find("#zp_form_header").length <= 0 && ZPForm.LAYOUT.find("#headerParent").prepend(ele) }, showRelatedRecordByMode: function (formId, recordId, mode, isFromSelfService, relfcId) { ZPForm.load({ formId: formId, recordId: recordId, formMode: void 0 !== mode ? mode : "VIEW", disableUrlTrack: !0, editCallback: SelfService.RelatedForms.showRelatedRecord, viewRefresh: !0, isFromSelfService: isFromSelfService, relfcId: relfcId }) }, constructSingleFieldRecordDetails: function (singledet) { if (void 0 != singledet && 7e3 == singledet.record.code && void 0 == ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId]) { ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId] = {}; var recordDetails = singledet.record.message.recordDetails; FIELD_RECORD_OWNERS = singledet.record.message.ownerID, $.each(recordDetails, function () { this.isTabular && this.isGridType ? ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][this.sectionId] = this : (void 0 != this.column1 && $.each(this.column1, function (ind, fieldData) { ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][this.formComponentId] = this }), void 0 != this.column2 && $.each(this.column2, function (ind, fieldData) { ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][this.formComponentId] = this })) }) } }
}, ZPForm.Employee = { isNonUser: function () { var singleRecDtl = ZPForm.getSingleRecord(); return void 0 !== singleRecDtl && void 0 !== singleRecDtl.record && singleRecDtl.record.isDummyEmployee } }, ZPForm.Field = { Edit: {}, FORM_LOOKUP_RELDATA: null, TEXT: 1, TEXT_AREA: 3, EMAIL_ADDRESS: 4, NUMBER: 5, CURRENCY: 6, PHONE_NUMBER: 8, CHECK_BOX: 9, DATE: 10, SINGLE_SELECT: 12, MULTI_SELECT: 13, PLAIN_TEXT: 14, FILE_UPLOAD: 18, DECIMAL: 19, IMAGE: 20, URL: 21, DATE_TIME: 22, PICKLIST: 25, SCRIPT: 15, FORMULA_DATE: 24, LOOKUP: 26, GENDER: 28, BLOODGROUP: 27, COUNTRY: 29, AUTONUMBER: 30, MULTI_FILE_UPLOAD: 31, SELECT_DISPLYTYPE: 100, RADIO_DISPLYTYPE: 101, MULTISELECT_DISPLYTYPE: 102, CHECK_BOXES_DISPLYTYPE: 103, STATES: 32, TIME_ZONE: 33, TIME_FIELD: 34, create: function (fieldDtl, value) { if (void 0 !== fieldDtl) { value = void 0 === value ? "" : value; var fieldId = "zp_field_" + fieldDtl.formComponentId, fieldHtml = "", title = void 0 !== fieldDtl.description && "" !== fieldDtl.description.trim() ? 'title="' + fieldDtl.description + '"' : "", fldCreateFun = ZPForm.CURRFORM_PARAM.createFldFunctions; if (void 0 !== fldCreateFun && void 0 !== fldCreateFun[fieldDtl.labelName] && "function" == typeof fldCreateFun[fieldDtl.labelName]) fieldHtml = fldCreateFun[fieldDtl.labelName](fieldDtl, "ADD", title); else if (fieldDtl.fieldType === this.LOOKUP && (fieldDtl.displayType === this.CHECK_BOXES_DISPLYTYPE || fieldDtl.displayType === this.RADIO_DISPLYTYPE || "Leavetype" === fieldDtl.labelName && "P_EmployeeLeave" == ZPForm.getTableName() || "AppriasalConfiguration" === fieldDtl.labelName && "P_SelfAppraisal" == ZPForm.getTableName() || "Rating" === fieldDtl.labelName && ("P_SelfAppraisal" == ZPForm.getTableName() || "P_PerformanceAppraisal" == ZPForm.getTableName())) || fieldDtl.fieldType === this.PICKLIST || fieldDtl.fieldType === this.BLOODGROUP || fieldDtl.fieldType === this.GENDER || fieldDtl.fieldType === this.COUNTRY || fieldDtl.fieldType === this.STATES || fieldDtl.fieldType === this.TIME_ZONE) { if (!(ZPForm.isEmbedForm || fieldDtl.fieldType !== this.PICKLIST || ZPForm.isRoleBasedPreview && (!ZPForm.isRoleBasedPreview || "-1" != ZPForm.roleId) || ZPForm.isFromSetup() !== !1 || "VIEW" === ZPForm.MODE || "P_Employee" === ZPForm.getTableName() && "Employeestatus" === fieldDtl.labelName || !ZPForm.isRecordAdmin() && "-1" != ZPForm.roleId || void 0 !== fieldDtl.isTabular && fieldDtl.isTabular !== !1 || "P_ClientDetails" === ZPForm.getTableName() && "Currency" === fieldDtl.labelName || "P_Goals" === ZPForm.getTableName() && "Priority" === fieldDtl.labelName || "P_Task" === ZPForm.getTableName() && "Status" === fieldDtl.labelName || "P_Task" === ZPForm.getTableName() && "Priority" === fieldDtl.labelName)) { var ispre = !0; (ZPForm.isRoleBasedPreview || ZPForm.isPreviewForm) && (ispre = !1), fieldHtml += '<div class="ZPActIcn"><a class="IC-add-form" buttonname="addicon" fcid=' + fieldDtl.formComponentId + " " + (ispre ? "onclick='ZPForm.PicklistQuickAdd.createQuickAddPopup(this)'" : "") + "></a></div>" } fieldDtl.displayType === this.SELECT_DISPLYTYPE || fieldDtl.fieldType === this.BLOODGROUP || fieldDtl.fieldType === this.GENDER || fieldDtl.fieldType === this.COUNTRY || fieldDtl.fieldType === this.STATES || fieldDtl.fieldType === this.TIME_ZONE ? fieldHtml += '<select  class="selectBox" ' + ("" !== title ? title : "") + ' id="' + fieldId + '" fcid="' + fieldDtl.formComponentId + '" fieldtype="' + fieldDtl.fieldType + '" name="' + fieldDtl.labelName + '" ' + (fieldDtl.fieldType === this.STATES ? 'refCountryId="' + fieldDtl.RefCountryId + '"' : "") + ' onchange="ZPForm.Field.closeconfmsg(true,this)">' + this.getOptionsByType(fieldDtl, value) + "</select>" : fieldDtl.displayType === this.RADIO_DISPLYTYPE ? fieldHtml += "<div " + ("" !== title ? title : "") + ' class="blkRadio" fieldtype="' + fieldDtl.fieldType + '">' + this.getOptionsByType(fieldDtl, value) + "</div>" : fieldDtl.displayType === this.MULTISELECT_DISPLYTYPE ? fieldHtml += '<select class="selectBox" ' + ("" !== title ? title : "") + ' id="' + fieldId + '" fieldtype="' + fieldDtl.fieldType + '" name="' + fieldDtl.labelName + '" multiple="multiple" onchange="ZPForm.Field.closeconfmsg(true)">' + this.getOptionsByType(fieldDtl, value, !0) + "</select>" : fieldDtl.displayType === this.CHECK_BOXES_DISPLYTYPE && (fieldHtml += "<div " + ("" !== title ? title : "") + ' class="blkCbox" onchange="ZPForm.Field.closeconfmsg(true)" fieldtype="' + fieldDtl.fieldType + '">' + this.getOptionsByType(fieldDtl, value) + "</div>") } else if (fieldDtl.fieldType === this.TEXT_AREA) fieldHtml = "<textarea " + ("" !== title ? title : "") + ' fieldtype="' + fieldDtl.fieldType + '" id="' + fieldId + '" class="form-control  zptxtarea-edit" name="' + fieldDtl.labelName + '" rows="5" style="height: 75px;" onchange="ZPForm.Field.closeconfmsg(true)">' + value + "</textarea>"; else if (fieldDtl.fieldType === this.DATE || fieldDtl.fieldType === this.DATE_TIME) fieldHtml = "<div " + ("" !== title ? title : "") + ' class="zpcal"><input fieldtype="' + fieldDtl.fieldType + '" autofillby="' + fieldDtl.autofillBy + '" id="' + fieldId + '" type="text" ' + (ZPForm.CURRFORM_PARAM.isProfile && ZPForm.PAGEMODE ? 'caltype="profile"' : ZPForm.FORM_VIEW_READONLY ? 'caltype="page"' : 'caltype="popup"') + ' onchange="ZPForm.Field.closeconfmsg(true)" name="' + fieldDtl.labelName + (fieldDtl.hasOwnProperty("isleave") ? '" autocomplete="off" placeholder="' + fieldDtl.displayName : "") + '" class="form-control' + (fieldDtl.hasOwnProperty("isleave") ? " W100I" : "") + '" value="' + value + '"/></div>'; else if (fieldDtl.fieldType === this.FILE_UPLOAD || fieldDtl.fieldType === this.IMAGE) { var reqUrl = ZPeople.cloudPickerGadgetsUrl + encodeURIComponent("?fcId=" + fieldDtl.formComponentId); fieldHtml = '<div  class="ZPUFile"><div class="" id="beforeUpload"><span>' + ZPI18N.getString("zp.files.attach") + " " + ZPI18N.getString("zp.files.from") + ' </span><div class="ZPCfile"><span>' + ZPI18N.getString("zp.files.desktop") + '</span><div class="ZPFfile OH"><input type="file" onchange="ZPForm.Field.closeconfmsg(true)" class=" form-control" fieldtype="' + fieldDtl.fieldType + '" id="' + fieldId + '" value="' + value + '" type="file" name="' + fieldDtl.labelName + '"></div></div>', !ZPeople.isChinaSetup && isAuthreq && (fieldHtml += '<span class="dgry ML2 MR2">' + ZPI18N.getString("zp.files.smallor") + "</span><a onclick=\"Files.showCloudPickerModal('" + reqUrl + "', 'Forms')\">" + ZPI18N.getString("zp.files.cloud") + "</a>"), fieldHtml += '</div><div class="zpmulti-fl DN" id="afterUpload"></div></div>', fieldHtml += '<div class="ZPActIcn"><a class="IC-info" data-toggle="popover" data-content="' + ZPI18N.getString("zp.maxfileuploadsize", [maxFileSize]) + '" data-placement="right" data-trigger="hover" data-original-title="" title=""></a></div>' } else if (fieldDtl.fieldType === this.CHECK_BOX) fieldHtml = "<label " + ("" !== title ? title : "") + ' class="checkbox DIB MR10"><input fieldtype="' + fieldDtl.fieldType + '"  onchange="ZPForm.Field.closeconfmsg(true)" id="' + fieldId + '" ' + ("true" === value ? "checked=checked" : "") + ' type="checkbox" name="' + fieldDtl.labelName + '" class="form-control"/><span>&nbsp;</span></label>'; else if (fieldDtl.fieldType === this.CURRENCY) fieldHtml = "<div " + ("" !== title ? title : "") + ' class="zpcurr"><span>' + fieldDtl.currencyType + '</span><input fieldtype="' + fieldDtl.fieldType + '" onchange="ZPForm.Field.closeconfmsg(true)" id="' + fieldId + '" type="text" ' + (ZPForm.CURRFORM_PARAM.isProfile && ZPForm.PAGEMODE ? 'caltype="profile"' : ZPForm.FORM_VIEW_READONLY ? 'caltype="page"' : 'caltype="popup"') + ' name="' + fieldDtl.labelName + '" class="form-control zptxt-edit" value="' + value + '"/></div>'; else if (fieldDtl.fieldType === this.MULTI_FILE_UPLOAD) { var reqUrl = ZPeople.cloudPickerGadgetsUrl + encodeURIComponent("?fcId=" + fieldDtl.formComponentId); fieldHtml = '<div class="ZPUFile"><div class="" id="beforeUpload"><span>' + ZPI18N.getString("zp.files.attach") + " " + ZPI18N.getString("zp.files.from") + ' </span><div class="ZPCfile"><span>' + ZPI18N.getString("zp.files.desktop") + '</span><div class="ZPFfile OH"><input type="file" multiple class=" form-control" fieldtype="' + fieldDtl.fieldType + '" id="' + fieldId + '" value="' + value + '" type="file" name="' + fieldDtl.labelName + '"></div></div>' + (ZPForm.isEmbedForm && !isAuthreq ? "" : '<span class="dgry ML2 MR2">' + ZPI18N.getString("zp.files.smallor") + "</span><a onclick=\"Files.showCloudPickerModal('" + reqUrl + "', 'Forms')\">" + ZPI18N.getString("zp.files.cloud") + "</a>") + '<div class="zpmulti-fl" id="multiuploadName"></div></div><div class="zpmulti-fl DN" id="afterUpload"></div></div>' } else fieldDtl.fieldType === this.TIME_FIELD ? (fieldHtml = '<div class="zptime"><input name="' + fieldDtl.labelName + '" placeholder="hh:mm a" isTimeField="true" fcid="' + fieldDtl.formComponentId + '" id="timePicker_' + fieldDtl.formComponentId + '" class="form-control zptxt-edit dropdown" data-toggle="dropdown" aria-expanded="false" type="text"></div>', ZPForm.time_Field_Prop[fieldDtl.formComponentId] = fieldDtl) : (fieldDtl.fieldType === this.LOOKUP && (value = this.getDefaultLookupValue(fieldDtl, value)), fieldHtml = "<input " + ("" !== title ? title : "") + ' multi="' + (fieldDtl.displayType === this.MULTISELECT_DISPLYTYPE) + '" fcid="' + fieldDtl.formComponentId + '" fieldtype="' + fieldDtl.fieldType + '"  onchange="ZPForm.Field.closeconfmsg(true)" id="' + fieldId + '" value="' + value + '" type="text" name="' + fieldDtl.labelName + '" class="' + (fieldDtl.fieldType !== ZPForm.Field.LOOKUP ? "form-control zptxt-edit" : "") + '" ' + (fieldDtl.disabled ? "disabled=disabled" : "") + "/>"); return "P_Employee" === ZPForm.getTableName() && !ZPUtil.Validation.isEmpty(fieldDtl.lastAddedEmployeeID) && ZPForm.isAddMode() && (fieldHtml += '<div class="zp-msg" id="zp_form_lastemployeeid">' + ZPI18N.getString("zp.lastemployeeid") + "&nbsp;<span>" + fieldDtl.lastAddedEmployeeID + "</span></div>"), fieldHtml } }, getIsSelected: function (optVal, selVal, fieldType) { var attribute = ""; return optVal === selVal && (attribute = "select" === fieldType ? 'selected="selected"' : 'checked="checked"'), attribute }, getDefaultLookupValue: function (fieldDtl, selValue) { var isPrimary = fieldDtl.isPrimary || "P_TimesheetJobsList" === ZPForm.getTableName() && "ProjectManager" === fieldDtl.labelName; if (isPrimary) { var permission = ZPForm.Permission.getAddPerm(); ZPForm.isEditMode() && (permission = ZPForm.Permission.getEditPerm()), 4 === permission || ZPForm.isEditMode() || (selValue = ZPeople.CURR_USER.usererec), ZPForm.isAddMode() && null != ZPForm.primLkpVal && (selValue = ZPForm.primLkpVal), ZPForm.CURRFORM_PARAM.lookupValue && "Employee_ID" === fieldDtl.labelName && (selValue = -1 != Layout.Page.hash.indexOf("selfservice/leave/list") || -1 != Layout.Page.hash.indexOf("selfservice/user/calendar") ? ZPForm.CURRFORM_PARAM.lookupValue : "attendance-entry-listview" === Layout.Page.pageId || Layout.Page.pageId.indexOf("selfservice") ? Attendance.Entry.erecno ? Attendance.Entry.erecno : ZPeople.CURR_USER.usererec : ZPDashboard.getUserId()) } return (ZPForm.isrelformrelfields || ZPForm.CURRFORM_PARAM.isFromSelfService) && ZPForm.isAddMode() && ZPForm.relfcid == fieldDtl.formComponentId && (selValue = ZPForm.selValue), parseInt(fieldDtl.displayType) !== ZPForm.Field.SELECT_DISPLYTYPE || void 0 != selValue && "" != selValue.trim() || (selValue = "-Select-"), selValue }, getOptionsByType: function (fieldDtl, selValue, skipDefOp, optns) { var opHtml = "", options = fieldDtl.Options; if (optns) options = optns; else { var isPrimary = fieldDtl.isPrimary || "P_TimesheetJobsList" === ZPForm.getTableName() && "ProjectManager" === fieldDtl.labelName; if (isPrimary) { var permission = ZPForm.Permission.getAddPerm(); if (ZPForm.isEditMode() && (permission = ZPForm.Permission.getEditPerm()), 4 === permission || ZPForm.isEditMode() || (selValue = ZPeople.CURR_USER.usererec, ZPForm.isAddMode() && null != ZPForm.primLkpVal && (selValue = ZPForm.primLkpVal)), ZPForm.CURRFORM_PARAM.lookupValue && "Employee_ID" === fieldDtl.labelName) if (-1 != Layout.Page.hash.indexOf("selfservice/leave/list") || -1 != Layout.Page.hash.indexOf("selfservice/user/calendar")) { var user_detail = ZPeople.getUserDetailsById(ZPDashboard.getUserId(ZPForm.CURRFORM_PARAM.lookupValue)); options = [{ Id: ZPForm.CURRFORM_PARAM.lookupValue, Value: user_detail.name + ",&nbsp;" + user_detail.empid }], selValue = ZPForm.CURRFORM_PARAM.lookupValue } else "attendance-entry-listview" !== Layout.Page.pageId && "selfservice-user-attendance" !== Layout.Page.container[0].id || null === Attendance.Entry.erecno ? (options = [{ Id: ZPDashboard.getUserId(), Value: ZPeople.getUserDetailsById(ZPDashboard.getUserId()).name + ",&nbsp;" + ZPeople.getUserDetailsById(ZPDashboard.getUserId()).empid }], selValue = ZPDashboard.getUserId()) : (options = [{ Id: ZPDashboard.getUserId(Attendance.Entry.erecno), Value: ZPeople.getUserDetailsById(ZPDashboard.getUserId(Attendance.Entry.erecno)).name + ",&nbsp;" + ZPeople.getUserDetailsById(ZPDashboard.getUserId(Attendance.Entry.erecno)).empid }], selValue = ZPDashboard.getUserId(Attendance.Entry.erecno)); else options = ZPForm.isEditMode() || ZPForm.isSingleFiledEdit() && !ZPForm.isQuickAdd ? fieldDtl.EditOptions : ZPForm.isAddMode() ? fieldDtl.AddOptions : ZPForm.getPrimaryLookupValues(permission) } } if ((ZPForm.isrelformrelfields || ZPForm.CURRFORM_PARAM.isFromSelfService) && ZPForm.isAddMode() && ZPForm.relfcid == fieldDtl.formComponentId && (selValue = ZPForm.selValue), fieldDtl.displayType === ZPForm.Field.RADIO_DISPLYTYPE || fieldDtl.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE || fieldDtl.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE || skipDefOp || (opHtml = void 0 !== selValue && "" !== selValue.trim() ? '<option value="-Select-">' + ZPI18N.getString("zp.select") + "</option>" : '<option value="-Select-" selected="selected">' + ZPI18N.getString("zp.select") + "</option>"), ZPForm.isrelformrelfields && ZPForm.relfcid == fieldDtl.formComponentId && (opHtml = ""), fieldDtl.fieldType === ZPForm.Field.TIME_ZONE) { var timeZoneListElms = "<option value=''>select</option>"; return $.each(options, function (index, timeMap) { for (timeZoneListElms += "<optgroup label='" + timeMap.disp + "'>", i = 0; i < timeMap.list.length; i++) timeZoneListElms += fieldDtl.componentValue == timeMap.list[i].code ? "<option value='" + timeMap.list[i].code + "' selected='selected'>" + timeMap.list[i].name + "&nbsp(" + timeMap.list[i].code + ")</option>" : "<option value='" + timeMap.list[i].code + "'>" + timeMap.list[i].name + "&nbsp(" + timeMap.list[i].code + ")</option>"; timeZoneListElms += "</optgroup>" }), opHtml = timeZoneListElms } return $.each(options, function (key, value) { if (fieldDtl.fieldType === ZPForm.Field.BLOODGROUP && fieldDtl.displayType !== ZPForm.Field.RADIO_DISPLYTYPE) opHtml += '<option value="' + value + '" ' + ZPForm.Field.getIsSelected(value, selValue, "select") + ">" + value + "</option>"; else { var inputType = fieldDtl.displayType === ZPForm.Field.RADIO_DISPLYTYPE ? "radio" : fieldDtl.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE ? "checkbox" : ""; if (fieldDtl.displayType === ZPForm.Field.RADIO_DISPLYTYPE || fieldDtl.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE) opHtml += fieldDtl.fieldType === ZPForm.Field.LOOKUP ? '<label class="' + inputType + ' DIB"><input type="' + inputType + '" name="' + fieldDtl.labelName + '" value="' + value.Id + '" ' + ZPForm.Field.getIsSelected(value.Id, selValue) + "><span>" + value.Value + "</span></label>" : '<label class="' + inputType + ' DIB"><input type="' + inputType + '" name="' + fieldDtl.labelName + '" value="' + value + '" ' + ZPForm.Field.getIsSelected(value, selValue) + "><span>" + value + "</span></label>"; else if (fieldDtl.fieldType === ZPForm.Field.LOOKUP) opHtml += '<option value="' + value.Id + '" ' + ZPForm.Field.getIsSelected(value.Id, selValue, "select") + ">" + value.Value + "</option>"; else if (fieldDtl.fieldType === ZPForm.Field.COUNTRY) { var name = value.name.toUpperCase(); opHtml += '<option code="' + value.code + '" value="' + name + '" ' + ZPForm.Field.getIsSelected(name, selValue, "select") + ">" + name + "</option>" } else opHtml += '<option value="' + value + '" ' + ZPForm.Field.getIsSelected(value, selValue, "select") + ">" + value + "</option>" } }), opHtml }, markFieldAsError: function (labelName, Obj) { var fieldObj = ZPForm.FIELD_LAYOUT.find("[folabel=" + labelName + "]"); if (fieldObj.length > 0) { void 0 !== Obj.row && (fieldObj = ZPForm.FIELD_LAYOUT.find("[istabular=true]").find("[row=" + Obj.row + "]").find("[folabel=" + labelName + "]"), 0 == fieldObj.length && (fieldObj = ZPForm.FIELD_LAYOUT.find("[istabular=true][row=" + Obj.row + "]").find("[folabel=" + labelName + "]"))); fieldObj.attr("fieldtype"); if (0 !== fieldObj.children("#error_message").length) fieldObj.children("#error_message").html(Obj[labelName]); else { var errorCont = "<div id='error_message' class='zp-err-msg'>" + Obj[labelName] + "</ div>"; fieldObj.find(".zpcal").length > 0 ? fieldObj.find(".zpcal").append(errorCont) : fieldObj.append(errorCont), void 0 != Obj.row ? ZPForm.FIELD_LAYOUT.find(fieldObj).addClass("zp-err") : ZPForm.FIELD_LAYOUT.find(fieldObj).closest("div[class^=zp-label]").addClass("zp-err") } } else ZPeople.Message.showFailureMsg(ZPeople.decodeTxt(Obj[labelName])) }, getRelatedFieldsValue: function (clickedObj, displaytype) { var recId = $(clickedObj).val(), fcId = ""; if (parseInt(displaytype) === ZPForm.Field.SELECT_DISPLYTYPE ? fcId = $(clickedObj).attr("id").split("_").pop() : parseInt(displaytype) === ZPForm.Field.RADIO_DISPLYTYPE && (fcId = $(clickedObj).closest("div[id]").attr("id").split("_").pop()), void 0 !== fcId && "" !== fcId.trim() || !ZPForm.Field.Edit.FORMCOMP_ID || (fcId = ZPForm.Field.Edit.FORMCOMP_ID), ZPUtil.Validation.isNumber(recId) && ZPUtil.Validation.isNumber(fcId)) { var params = { mode: "fetchRelatedFieldsData", recordId: recId, fcId: fcId }; ZPForm.isEmbedForm && !isAuthreq ? (params.digest = Embed_digest, ZPeople.Request.send("/embedFormAction.hr", params, ZPForm.Field.relatedFieldsResponse, clickedObj)) : ZPeople.Request.send(ZPForm.URL, params, ZPForm.Field.relatedFieldsResponse, clickedObj) } else { var formComp = ZPForm.Field.getFieldComponent(fcId); void 0 !== formComp.relatedFieldDetails && ZPForm.Field.setRelatedFieldsData(formComp.relatedFieldDetails, fcId, !0) } }, relatedFieldsResponse: function (resultData, params, obj) { if (void 0 !== resultData && 7e3 === resultData.code) { var ele = $(obj).closest("div[id^='zp_section_fields_']"), relaData = resultData.message[params.recordId]; void 0 !== relaData ? (null !== ZPForm.Field.Edit.FORMCOMP_ID && (ZPForm.Field.Edit.FORM_LOOKUP_RELDATA = relaData), $(ele).find("div[id^='zp_form_relfield_" + params.fcId + "']").find("#zp_form_relfield_value").html("-"), $.each(relaData, function (key, value) { var optHtml = value; $(ele).find("#zp_form_relfield_" + params.fcId + "_" + key).attr("fieldtype") == ZPForm.Field.IMAGE && (optHtml = '<img class="rlflds-img" src="' + (ZPForm.isEmbedForm && !isAuthreq ? "embed" + value + "&digest=" + Embed_digest : value) + '"></img>'), (0 == value.length || "" == value) && (optHtml = "-"), $(ele).find("#zp_form_relfield_" + params.fcId + "_" + key).find("#zp_form_relfield_value").html(optHtml) })) : $(ele).find("div[id^='zp_form_relfield_" + params.fcId + "']").find("#zp_form_relfield_value").html("-") } }, getNoValueString: function (value) { return (void 0 === value || "" === value.trim()) && (value = "-"), value }, isMandatory: function (isMandatory, labelName) { var tableName = ZPForm.getTableName(); if ("P_Employee" !== tableName || ZPForm.isAddMode() || "LastName" !== labelName && "EmailID" !== labelName) { if ("P_EmployeeLeave" === tableName && "Daystaken" === labelName) return !1 } else isMandatory = !ZPForm.Employee.isNonUser(); return isMandatory }, getMandatoryHtml: function (Obj) { return ZPForm.Field.isMandatory(Obj.isMandatory, Obj.labelName) || "P_EmployeeLeave" === ZPForm.getTableName() && "ZP_Leave_File_Upload" === Obj.labelName ? "<sup>*</sup>" : "" }, isPrimaryLookupHtml: function (obj) { var tableName = ZPForm.getTableName(); return obj.isPrimary && "P_EmployeeLeave" !== tableName && !ZPUtil.checkIsExistInArray(Timetracker.constants.tableNames, tableName) ? '<span class="IC-key ML5" iskey="true"> </span>' : "" }, isQuickAddForm: function (obj, isFromSingleFieldEdit) { if (ZPForm.isEmbedForm || ZPForm.isFromSetup() || ZPForm.CURRFORM_PARAM.isFromSelfService || ZPForm.isrelformrelfields || ZPForm.isfromrelfieldedit || ZPForm.isrelfieldsingelrecview || ZPForm.isRoleBasedPreview && (!ZPForm.isRoleBasedPreview || "-1" != ZPForm.roleId) || ZPForm.isQuickAdd || void 0 === obj.refTableName || "P_Location" === obj.refTableName && isAdminProfile || "P_Employee" === obj.refTableName || "AppriasalConfiguration" == obj.labelName || "Rating" == obj.labelName || "Role" == obj.labelName || !(ZPForm.isRecordAdmin() || "-1" == ZPForm.roleId || "P_Timesheet" == ZPForm.getTableName() && ("Project" == obj.labelName && Timetracker.util.checkAddProjectPermVar || "JobId" == obj.labelName && Timetracker.util.checkAddJobPermVar))) return isFromSingleFieldEdit ? '<div class="ZPActIcn">' : ""; var ispre = !0; (ZPForm.isRoleBasedPreview || ZPForm.isPreviewForm) && (ispre = !1); var fcid = obj.formComponentId; return isFromSingleFieldEdit ? '<div class="ZPActIcn"><a class="IC-add-form" fcid="' + fcid + '" onclick="ZPForm.Field.quickFormFields(this)"></a>' : ZPForm.isTabularsecForQuicAdd ? "" : '<div class="ZPActIcn"><a class="IC-add-form" fcid="' + fcid + '" ' + (ispre ? "onclick='ZPForm.Field.quickFormFields(this)'" : "") + "></a></div>" }, quickFormFields: function (obj) { var params = { isQuickAdd: !0, formMode: "ADD" }; (0 == ZPForm.formid || void 0 == ZPForm.formid) && (ZPForm.formid = ZPForm.CURRFORM_PARAM.formId), null != ZPForm.LAYOUT && void 0 != ZPForm.LAYOUT && ZPForm.LAYOUT.data("premode", ZPForm.MODE); var fcID = $(obj).attr("fcid"); obj.hasOwnProperty("isFromProjects") && (fcID = obj.fcID, params.ttSelectAddData = obj), ZPForm.lookupfcid = fcID, ZPForm.CURRFORM_PARAM.formId = ZPForm.formid; var fieldCompon = ZPForm.Field.getFieldComponent(fcID); ZPForm.displayFields = fieldCompon.displayFields, ZPForm.reffcid = fieldCompon.referredfcId; var refFormID = fieldCompon.referredFormId; params.formId = refFormID, $(".modal-backdrop").removeClass("modal-backdrop"), ZPForm.isFromQuickAddEditFormComID = null, null != ZPForm.Field.Edit.FORMCOMP_ID && (ZPForm.isFromQuickAddEditFormComID = ZPForm.Field.Edit.FORMCOMP_ID), ZPForm.load(params, !1, !0), ZPForm.toggleFormPage(!1, Layout.Page.container.find("#zp_addedit_record_" + ZPForm.formid)) }, closeconfmsg: function (iscancelmsgact, obj) { if (ZPView.newRecordDetails = {}, "P_Location" == ZPForm.getTableName()) { var fieldType = $(obj).attr("fieldtype"); if (fieldType == ZPForm.Field.COUNTRY) { var result, code = $(obj).find("option[value='" + $(obj).val() + "']").attr("code"); void 0 !== code && ((void 0 == ZPForm.COUNTRY_STATES[code] || ZPForm.COUNTRY_STATES[code].length < 0) && $.ajax({ type: "POST", async: !1, url: ZPForm.URL, data: { mode: "getStatesList", conreqcsr: csrfToken, countryCode: code }, success: function (data) { result = data, ZPForm.COUNTRY_STATES[data.country_code] = data.data } }), result = ZPForm.COUNTRY_STATES[code]); var fcid = $(obj).attr("fcid"), eles = $("select[refCountryId='" + fcid + "']"); if (void 0 != eles) { var ophtml = '<option selected="selected" value="-Select-">Select</option>'; if (void 0 !== code && void 0 != result && 0 != result.length) { var states = result; $.each(states, function () { ophtml += '<option value="' + this.state_name + '">' + this.state_name + "</option>" }) } $.each(eles, function () { $(this).select2("destroy"), $(this).html(ophtml), $(this).select2() }) } } } if (ZPForm.isPreviewForm) iscancelmsgact || ZPForm.Field.formCloseBtn(); else { if (!iscancelmsgact && !ZPForm.cancelmsgactive) return void ZPForm.Field.formCloseBtn(); if (iscancelmsgact && !ZPForm.cancelmsgactive) return void (ZPForm.cancelmsgactive = iscancelmsgact); if (ZPForm.cancelmsgactive && !iscancelmsgact) return ZPForm.isViewMode() || "P_EmployeeLeave" == ZPForm.getTableName() ? void ZPForm.Field.formCloseBtn() : void ZPeople.confirm("", "", "zp.cancelconfmsg", ZPForm.Field.formCloseBtn, !1, !1, !0) } }, formCloseBtn: function () { if (ZPForm.cancelmsgactive = !1, ZPForm.isQuickAdd || ZPForm.isrelformrelfields || ZPForm.isrelfieldsingelrecview || ZPForm.isfromrelfieldedit) { if (ZPForm.CURRFORM_PARAM = ZPForm.LAYOUT.data("preparam"), ZPForm.isrelfieldsingelrecview) { viewObj = $("#zp_dash_rfdata_" + ZPForm.relfcid); var obj = $(viewObj).parent().children().find("a:first"); $("#zp_dash_rfdata_" + ZPForm.relfcid).remove(), RelatedFields.constructrelatedfieldsviewinsiglerecord(obj, !0), viewObj = $("#zp_dash_rfdata_" + ZPForm.relfcid), viewObj.slideDown() } ZPForm.MODE = ZPForm.LAYOUT.data("premode"), ZPForm.PAGEID = ZPForm.LAYOUT.data("prepageid"), ZPForm.curpageid = ZPForm.LAYOUT.data("curpageid"), ZPForm.toggleFormPage(!1, Layout.Page.container.find("#" + ZPForm.curpageid)), ZPForm.isfromrelfieldedit ? (ZPForm.isfromrelfieldedit = !1, ZPForm.isFromQuickAddrelClose = !0, ZPForm.isrelfieldsingelrecview = !0) : (ZPForm.isQuickAdd = !1, ZPForm.isrelformrelfields = !1, ZPForm.isFromQuickAddrelClose = !0, ZPForm.isrelfieldsingelrecview = !1, ZPForm.isfromrelfieldedit = !1); var isFromTTSelectQA = Timetracker.forms.isTTSelectQuickAdd(); isFromTTSelectQA ? Timetracker.forms.checkIfHasEditableParam() || ZPForm.formatFields(ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId].message) : ZPForm.toggleFormPage(!0, Layout.Page.container.find("#" + ZPForm.PAGEID)), ZPForm.LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID), ZPForm.MODE = ZPForm.LAYOUT.data("premode"), ZPForm.FIELD_LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID).find("#zp_form_outer_container"); var formCompData = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; ZPForm.updateFormConf(formCompData.formDetails), ZPForm.toggleFormPage(!0, Layout.Page.container.find("#" + ZPForm.PAGEID)), null == ZPForm.Field.Edit.FORMCOMP_ID && null != ZPForm.isFromQuickAddEditFormComID && (ZPForm.Field.Edit.FORMCOMP_ID = ZPForm.isFromQuickAddEditFormComID) } else ZPForm.toggleFormPage(!1, Layout.Page.container.find("#zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId)) }, getFieldComponent: function (formCompId, formId) { if (ZPForm.FORM_COMPONENTS[formCompId]) return ZPForm.FORM_COMPONENTS[formCompId]; var formComp, formDtl = ZPForm.FORM_COMPONENT_DATA[void 0 == formId ? ZPForm.CURRFORM_PARAM.formId : formId]; return void 0 !== formDtl && $.each(formDtl.message.formComponentDetails, function () { return this.column1.length > 0 && (formComp = ZPForm.Field.getFieldObjFromList(this.column1, formCompId), void 0 !== formComp) ? !1 : void 0 === formComp && this.column2.length > 0 && (formComp = ZPForm.Field.getFieldObjFromList(this.column2, formCompId), void 0 !== formComp) ? !1 : void 0 }), formComp }, getFieldValueData: function (formCompId, isrelatedrec) { var formComp, singleRecDtl = ZPForm.getSingleRecord(); if (void 0 !== singleRecDtl && void 0 !== singleRecDtl.record) { var recData = singleRecDtl.record; $.each(recData.message.recordDetails, function () { return void 0 !== this.column1 && this.column1.length > 0 && (formComp = ZPForm.Field.getFieldObjFromList(this.column1, formCompId), void 0 !== formComp) ? !1 : void 0 === formComp && void 0 !== this.column2 && this.column2.length > 0 && (formComp = ZPForm.Field.getFieldObjFromList(this.column2, formCompId), void 0 !== formComp) ? !1 : void 0 }) } return formComp }, getFieldObjFromList: function (list, formCompId) { var formComp; return $.each(list, function () { return this.formComponentId === formCompId ? (formComp = this, !1) : void 0 }), formComp }, setValue: function (compData, value) { var returnVal = value, fieldType = (compData.labelName, compData.fieldType), displayType = compData.displayType, fieldValData = ZPForm.Field.getFieldValueData(ZPForm.Field.Edit.FORMCOMP_ID), fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + ZPForm.Field.Edit.FORMCOMP_ID), compVal = value; if (0 !== fieldObj.length) { if (fieldType === ZPForm.Field.PICKLIST || fieldType === ZPForm.Field.LOOKUP) { var options = compData.Options; compData.isPrimary && (options = compData.EditOptions); var isMulti = !1, optvals = []; if (displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE || displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE || displayType === ZPForm.Field.RADIO_DISPLYTYPE || displayType === ZPForm.Field.SELECT_DISPLYTYPE) if (displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE || displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE ? (fieldType == ZPForm.Field.LOOKUP ? (returnVal = ZPeople.decodeTxt(value), value = returnVal.split(";"), optvals = ZPForm.Field.getMultiSelectLookupValue(options, value, fieldValData.componentValue_ID, fieldValData.componentValue, ZPForm.Field.Edit.FORMCOMP_ID), compVal = optvals.toString(), "" == compVal && (compVal = "-", value = [], optvals = [])) : (optvals = value, compVal = ZPForm.Field.getMultiSelectValue(options, value)), isMulti = !0) : compVal = void 0 != value && null != value && fieldType === ZPForm.Field.LOOKUP && fieldValData.componentValue_ID == value ? fieldValData.componentValue : ZPForm.Field.getLookUpOptValue(options, value, ZPForm.Field.Edit.FORMCOMP_ID), fieldType !== ZPForm.Field.LOOKUP || displayType !== ZPForm.Field.RADIO_DISPLYTYPE && displayType !== ZPForm.Field.SELECT_DISPLYTYPE || isNaN(value)) isNaN(value) && delete fieldValData.componentValue_RelatedFields; else if (void 0 !== fieldValData.componentValue_RelatedFields && null !== ZPForm.Field.Edit.FORM_LOOKUP_RELDATA) $.each(fieldValData.componentValue_RelatedFields, function () { this.Value = ZPForm.Field.getMatchedRelatedFieldValue(this.formComponentId) }); else if (void 0 !== compData.relatedFieldDetails && null !== ZPForm.Field.Edit.FORM_LOOKUP_RELDATA) { var relatedFieldsList = []; $.each(compData.relatedFieldDetails, function () { relatedFieldsList.push({ formComponentId: this.formComponentId, Value: ZPForm.Field.getMatchedRelatedFieldValue(this.formComponentId), componentName: this.labelName, displayName: this.displayName }) }), fieldValData.componentValue_RelatedFields = relatedFieldsList } fieldType === ZPForm.Field.LOOKUP && "-Select-" !== value ? fieldValData.componentValue_ID = value : "-Select-" === value && (fieldValData.componentValue_ID = ""), fieldObj.find("span:first").html(compVal), isMulti && (compVal = optvals) } else if (fieldType === ZPForm.Field.URL) fieldObj.html('<span><a rel="noreferrer" href="' + value + '" target="_blank">' + value + "</span>"), ZPeople.redirectFix(fieldObj.find("a")[0]); else if (fieldType === ZPForm.Field.DATE_TIME) fieldObj.find("span:first").html("" != value.trim() ? Calendar.convertTo12Hours(ZPeople.decodeTxt(value)) : "-"); else { $.inArray(parseInt(fieldType), [ZPForm.Field.BLOODGROUP, ZPForm.Field.COUNTRY, ZPForm.Field.GENDER]) > -1 && "-Select-" === value && (compVal = ""); var textval = compVal; "" == compVal && (textval = "-"), fieldObj.find("span:first").html(textval) } fieldValData.componentValue = compVal } if ("P_Employee" === ZPForm.getTableName()) { var userDtl = ZPeople.getUserDetailsById(ZPForm.CURRFORM_PARAM.recordId, !0); ZPForm.updateUserDetails(userDtl, compData.labelName, compVal, value) } return value }, getMatchedRelatedFieldValue: function (formComponentId) { var value = ""; return $.each(ZPForm.Field.Edit.FORM_LOOKUP_RELDATA, function () { return void 0 !== this[formComponentId] ? (value = this[formComponentId], !1) : void 0 }), value }, getMultiSelectValue: function (opts, value) { var returnVal = ""; if (void 0 !== opts && opts.length > 0) for (var i = 0; i < opts.length; i++) { var optObj = opts[i]; "object" == typeof optObj && ZPUtil.checkIsExistInArray(value, optObj.Id) ? returnVal += ("" !== returnVal ? "," : "") + optObj.Value : ZPUtil.checkIsExistInArray(value, optObj) && (returnVal += ("" !== returnVal ? "," : "") + optObj) } return "" === returnVal.trim() ? "-" : returnVal }, getMultiSelectLookupValue: function (opts, value, presentIds, presentvals, fcid) { var returnVal = []; if (void 0 != value && value.length > 0) for (val in value) { var temp = ""; for (val1 in presentIds) presentIds[val1] == value[val] && (temp = presentvals[val1]); "" == temp && (temp = ZPForm.Field.getLookUpOptValue(opts, value[val], fcid), "-" == temp && (temp = "")), returnVal.push(temp) } return returnVal }, getLookUpOptValue: function (opts, valueId, fcid) { if (ZPForm.select2.ALL_OPTIONS[fcid + "_" + valueId]) return ZPForm.select2.ALL_OPTIONS[fcid + "_" + valueId]; if (void 0 !== opts && opts.length > 0) for (var i = 0; i < opts.length; i++) { var optObj = opts[i]; if ("object" == typeof optObj && optObj.Id === valueId) return optObj.Value; if (optObj === valueId) return optObj } return "-" }, setRelatedFieldsData: function (relCompVal, fcId, setNodata, row) { var layout = $(ZPForm.FIELD_LAYOUT); ZPForm.PRINT && (layout = $(ZPForm.PRINTPAGE_DATA)), $.each(relCompVal, function () { var value = this.Value; setNodata && (value = "-"); var optHtml = value, obj = $(layout.find("[id=zp_form_relfield_" + fcId + "_" + this.formComponentId + "]")); void 0 == row ? $.each(obj, function () { $(this).attr("fieldtype") == ZPForm.Field.IMAGE && "-" != ZPForm.Field.getNoValueString(value) && (optHtml = '<img class="rlflds-img" src="' + (ZPForm.isEmbedForm && !isAuthreq ? "embed" + value + "&digest=" + Embed_digest : value) + '"></img>'), $(this).find("#zp_form_relfield_value").html(optHtml) }) : (obj = $(layout.find("[id=zp_form_relfield_" + fcId + "_" + this.formComponentId + "]"))[row], $(obj).attr("fieldtype") == ZPForm.Field.IMAGE && "-" != ZPForm.Field.getNoValueString(value) && (optHtml = '<img class="rlflds-img" src="' + (ZPForm.isEmbedForm && !isAuthreq ? "embed" + value + "&digest=" + Embed_digest : value) + '"></img>'), $(obj).find("#zp_form_relfield_value").html(optHtml)) }) }, toggleFileUpload: function (Obj) { var isRestore = !1, labelName = $(Obj).parent().siblings().find("input[type=file]").attr("name"); "true" === $(Obj).attr("change") ? $(Obj).html(ZPI18N.getString("zp.restore")) : (isRestore = !0, $(Obj).html(ZPI18N.getString("zp.change")), ZPForm.Field.removeFileUploadDoc(labelName)), $(Obj).attr("change", isRestore); var fileNameObj = $(Obj).siblings().parent().siblings().find("#filename"); if (isRestore) if ($(fileNameObj).closest("div[folabel=" + labelName + "]").attr("fieldtype") == ZPForm.Field.MULTI_FILE_UPLOAD) { var filepath = $(Obj).siblings().attr("filepath"), fileValue = fileNameObj.val(); fileValue = JSON.parse(fileValue), fileValue.push(filepath), fileNameObj.val(JSON.stringify(fileValue)), $(Obj).siblings().attr("ishide", !1) } else { var fileValue = fileNameObj.data("fileValue"); ZPUtil.Validation.isEmpty(fileValue) || fileNameObj.val(fileValue) } else { var fileValue = fileNameObj.val(); if ($(fileNameObj).closest("div[folabel=" + labelName + "]").attr("fieldtype") == ZPForm.Field.MULTI_FILE_UPLOAD) { fileValue = JSON.parse(fileValue); var filepath = $(Obj).siblings().attr("filepath"), index = fileValue.indexOf(filepath); index > -1 && fileValue.splice(index, 1), fileNameObj.val(JSON.stringify(fileValue)), $(fileNameObj).closest("div[folabel=" + labelName + "]").find("#beforeUpload").removeClass("DN"), $(fileNameObj).closest("div[folabel=" + labelName + "]").find("#beforeUpload").parent().removeClass("DN") } else ZPUtil.Validation.isEmpty(fileValue) || fileNameObj.data("fileValue", fileValue), fileNameObj.val(""), $(fileNameObj).closest("div[folabel=" + labelName + "]").find("#beforeUpload").removeClass("DN"), $(fileNameObj).closest("div[folabel=" + labelName + "]").find("#afterUpload").addClass("DN") } $(fileNameObj).closest("div[folabel=" + labelName + "]").attr("fieldtype") == ZPForm.Field.MULTI_FILE_UPLOAD ? $(Obj).siblings().attr("ishide", "true") : $(Obj).siblings().toggleClass("DN").parent().siblings().toggleClass("DN") }, removeFileUploadDoc: function (labelName) { Layout.Page.container.find("[name=zp_form_fileupload]").find("input[name=" + labelName + "]").remove(), $.each(ZPForm.FORMFILEUPLOAD, function (index, docObj) { docObj.labelName == labelName && ZPForm.FORMFILEUPLOAD.splice(index, 1) }) }, toggleFileFieldDisplay: function (obj, labelName) { $(obj).closest("div[folabel=" + labelName + "]").attr("fieldtype") == ZPForm.Field.MULTI_FILE_UPLOAD ? ($(obj).closest("div[folabel=" + labelName + "]").find("#beforeUpload,#afterUpload").toggleClass("DN"), $(obj).closest("div[folabel=" + labelName + "]").find("#multiuploadName").html("")) : $(obj).closest("div[folabel=" + labelName + "]").find("#beforeUpload,#afterUpload").toggleClass("DN"), $(obj).parent().find("span").text(""), $(obj).closest("div[folabel=" + labelName + "]").find("#filename").val(""), ZPForm.Field.removeFileUploadDoc(labelName) }, fillCurrentDateAndTime: function () { $.each(ZPForm.LAYOUT.find("input[fieldType='" + ZPForm.Field.DATE_TIME + "'][autofillby='1']"), function () { var timeObj = ZPForm.Field.calcTime(), dateObj = Calendar.formatDate(timeObj), time = Calendar.getSelectedTime("", "", "", "", timeObj), dt = dateObj + " " + time; $(this).val(dt) }), $.each(ZPForm.LAYOUT.find("input[fieldType='" + ZPForm.Field.DATE + "'][autofillby='1']"), function () { var timeObj = ZPForm.Field.calcTime(); timeObj = Calendar.formatDate(timeObj), $(this).val(timeObj) }) }, calcTime: function () { var d = new Date, utc = d.getTime() + 6e4 * d.getTimezoneOffset(); return new Date(utc + parseInt(offset)) } }, ZPForm.Record = { PARAMS: {}, isDraft: !1, isAllowEdit: function () { return ZPForm.getSingleRecord().record.message.isAllowedEdit && ("P_EmployeeLeave" !== ZPForm.getTableName() || !ZPForm.CURRFORM_PARAM.isEditDisabled && Leave.View.allowedit) }, uploadFiles: function () { if (Layout.Page.container.find("[name=zp_form_fileupload]").find("input[type=file]").length > 0 || ZPForm.FORMFILEUPLOAD.length > 0) { var fUpForm = Layout.Page.container.find("[name=zp_form_fileupload]"); fUpForm.find('input[name="formId"]').length <= 0 && (ZPForm.isEmbedForm && !isAuthreq ? (fUpForm.append('<input type="hidden" value="' + Embed_ZUIDENRYPT + '" name="loginUserZUID"/>'), fUpForm.append('<input type="hidden" value="' + Embed_digest + '" name="digest"/>')) : (fUpForm.append('<input type="hidden" value="' + csrfToken + '" name="' + csrfParamName + '"/>'), fUpForm.append('<input type="hidden" value="' + _ZUIDENRYPT + '" name="loginUserZUID"/>')), fUpForm.append('<input type="hidden" value="' + ZPForm.CURRFORM_PARAM.formId + '" name="formId"/>')), fUpForm.find('input[name="uploadFromCloud"]').length > 0 && fUpForm.find('input[name="uploadFromCloud"]').remove(), ZPForm.FORMFILEUPLOAD.length > 0 && fUpForm.append('<input type="hidden" value=\'' + JSON.stringify(ZPForm.FORMFILEUPLOAD) + '\' name="uploadFromCloud"/>'), fUpForm.submit() } else if (ZPForm.isAllowedToEdit()) { var key = "zp.editapprovalconfirmmsg"; ZPForm.CONF.approvalSettingsDetails.isVerifySend && (key = "zp.editapprsendconfirmmsg"), ZPeople.BSModal.confirm(ZPForm.Record.addUpdateRecord, ZPI18N.getString("zp.confirm"), ZPI18N.getString(key)), $("#" + Layout.Page.pageId).find("#zp_modal_confirmpop").find("button").not("#zp_modal_blubtn").click(function () { ZPForm.LAYOUT.find("#zp_forms_add_btn").removeClass("disabled") }) } else ZPForm.Record.addUpdateRecord() }, uploadFilesResponse: function (result) { if (void 0 !== result && 7e3 === result.code) { Layout.Page.container.find("[name=zp_form_fileupload]").empty(); var count = 0; if ($.each(result.message, function () { var params = ZPForm.Record.PARAMS[ZPForm.CURRFORM_PARAM.formId], fieldComp = ZPForm.Field.getFieldComponent(this.fcId); if (fieldComp.fieldType == ZPForm.Field.MULTI_FILE_UPLOAD) { var value; if (ZPForm.isAddMode()) if (0 == count) value = []; else { var val = params[this.labelName]; value = JSON.parse(val) } else { val = params[this.labelName]; try { value = JSON.parse(val) } catch (e) { value = [] } } value.push(this.filePath), value = JSON.stringify(value), params[this.labelName] = value } else params[this.labelName] = this.filePath; "P_Timesheet" != ZPForm.getTableName() && "P_TimesheetJob" != ZPForm.getTableName() || void 0 === this.attachId || null === this.attachId || (params.attachId = this.attachId), fieldComp.fieldType == ZPForm.Field.MULTI_FILE_UPLOAD ? (count += 1, ZPForm.FIELD_LAYOUT.find(":input[name=" + this.labelName + "]").siblings("#filename").val(value)) : ZPForm.FIELD_LAYOUT.find(":input[name=" + this.labelName + "]").siblings("#filename").val(this.filePath) }), count > 5) return; ZPForm.Record.IMAGE_REFRESH = !0, ZPForm.Record.addUpdateRecord() } else if (void 0 != result && 7315 === result.code || 7313 === result.code) { ZPForm.Validation.resetFormError(); var errors = {}; errors[result.labelName] = result.message, ZPForm.Field.markFieldAsError(result.labelName, errors), ZPForm.LAYOUT.find("#zp_forms_add_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_addnew_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_savedraft_btn").removeClass("disabled"); var tableName = ZPForm.getTableName(); (ZPForm.isEditMode() || "P_Timesheet" === tableName || "P_TimesheetJobsList" === tableName || "P_TimesheetJob" === tableName || "P_EmployeeLeave" === tableName || "P_Goals" === tableName || "P_EmployeeSalary" === tableName || "P_ClientDetails" === tableName) && ZPForm.LAYOUT.find("#zp_forms_addnew_btn").addClass("disabled") } else if (void 0 !== result && 7318 === result.code) { ZPForm.LAYOUT.find("#zp_forms_add_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_addnew_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_savedraft_btn").removeClass("disabled"); var errors = {}; errors[result.fieldName] = result.message, ZPForm.Field.markFieldAsError(result.fieldName, errors) } }, addUpdateRecord: function () { var params = ZPForm.Record.PARAMS[ZPForm.CURRFORM_PARAM.formId]; if (void 0 !== params) { var url = "/addUpdateRecord.zp"; if (ZPForm.isEmbedForm && !isAuthreq && (url = "/embedFormaddUpdateRecord.hr", params.digest = Embed_digest, params.loginUserZUID = Embed_LOGGEDIN_ZUID), ZPForm.isEmbedForm) ZPeople.Request.send(url, params, ZPForm.Record.addUpdateRecordResponse); else { if ("P_SelfAppraisal" === ZPForm.getTableName() || "P_MultiRater" === ZPForm.getTableName() || "P_PerformanceAppraisal" === ZPForm.getTableName()) { var additionalParams = Appraisal.KRAVsGoals.addUpdateRecord(params, ZPForm.CURRFORM_PARAM.raterId); null !== additionalParams && (params.moduleRating = JSON.stringify(additionalParams)) } params.isDraft = ZPForm.Record.isDraft; var fromPAModule = -1 !== Layout.Page.hash.indexOf("#performance/myteam/multiraterfeedback"); "P_MultiRater" == params.zp_tableName && fromPAModule ? (void 0 != Layout.Page.container.find("#mrFeedbackCycle").val() && (params.configId = Layout.Page.container.find("#mrFeedbackCycle").val(), params.selUser = $("#rate_" + params.zp_recordId).attr("seluser")), ZPeople.Request.send(url, params, Appraisal.MultiRater.updateFeedback)) : ZPeople.Request.send(url, params, ZPForm.Record.addUpdateRecordResponse) } } }, saveasdraft: function () { ZPForm.Record.isDraft = !0, ZPForm.Record.validateAndSubmit() }, validateAndSubmit: function () { ZPForm.IS_SUBMIT = !0; var formObj = ZPForm.LAYOUT, result = ZPForm.Validation.validateForm(), type = "", passWord = ""; if (ZPForm.Record.TABULAR_PARAMS = {}, result.errorList.length > 0) return ZPForm.Validation.resetFormError(), void ZPForm.Validation.showFormFieldError(result.errorList); ZPForm.Validation.resetFormError(); var params = result.params; if (ZPForm.isQuickAdd && (params.isQuickAdd = !0, params.lookupID = ZPForm.lookupfcid, void 0 !== ZPForm.CURRFORM_PARAM.tableName && -1 !== Timetracker.constants.tableNames.indexOf(ZPForm.CURRFORM_PARAM.tableName) && (params.isFromNewUI = !0, Timetracker.forms.handleQuickAdd(params))), formObj.find(":input[type=hidden][id!=filename]").each(function () { var paramName = $(this).attr("name"); void 0 !== paramName && (params[paramName] = $(this).val()) }), void 0 === params.zp_tableName && void 0 != ZPForm.CURRFORM_PARAM.tableName && (params.zp_tableName = ZPForm.CURRFORM_PARAM.tableName), "P_Employee" === params.zp_tableName && (type = Layout.Page.container.find("[name=invitation]:checked").val(), passWord = Layout.Page.container.find("[name=temppwd]").val(), params.zp_type = type, params.zp_type == ZPI18N.getString("zp.directAddType") ? params.zp_password = passWord : params.zp_type == ZPI18N.getString("zp.inviteUserType") && (params.zp_password = null)), "P_Goals" == params.zp_tableName || "P_SelfAppraisal" == params.zp_tableName || "P_PerformanceAppraisal" == params.zp_tableName ? params = Appraisal.formcallback(params) : "P_EmployeeLeave" == ZPForm.getTableName() ? Leave.Form.getDayDetailsForParam(formObj, params) : "P_TimesheetJob" !== ZPForm.getTableName() && "P_Timesheet" !== ZPForm.getTableName() && "P_TimesheetJobsList" !== ZPForm.getTableName() && "P_ClientDetails" !== ZPForm.getTableName() || ZPForm.isQuickAdd ? "P_Task" == ZPForm.getTableName() && Task.getRelatedRecordParams(params) : Timetracker.forms.getParamsForForms(params, ZPForm.getTableName()), ZPForm.isApprovalEnabled() && (ZPForm.isAddMode() || ZPForm.isEditMode() || ZPForm.IS_RESUBMIT) && "APPROVER_CHOOSEN_BY_USER" === ZPForm.getApproverType()) if ("-Select-" !== formObj.find("select[name=zp_approverId]").val()) params.zp_approverId = formObj.find("select[name=zp_approverId]").val(); else if ("-Select-" === formObj.find("select[name=zp_approverId]").val()) return formObj.find("#zp_form_chooseappr_cont").find("[name=approverSelectBox]").append('<div id="error_message" class="zp-err-msg">' + ZPI18N.getString("zp.chooseapprovererrormsg") + "</div>"), void formObj.find("#zp_form_chooseappr_cont").find("[name=approverSelectBox]").addClass("zp-err"); if (ZPForm.LAYOUT.find("[istabular=true]").each(function () { var isGrid = $(this).attr("isgrid"), secId = $(this).attr("secid"), rowArray = new Array; if (params[secId + "_rowid"] && (rowArray = JSON.parse(params[secId + "_rowid"])), "true" === isGrid) $.each($(this).find("tr[rowid]"), function () { var rowid = $(this).attr("rowid"); secId = $(this).attr("secid"), void 0 !== rowid && rowArray.push(rowid) }); else { var rowid = $(this).attr("rowid"); void 0 !== rowid && rowArray.push(rowid) } rowArray.length > 0 && (params[secId + "_rowid"] = JSON.stringify(rowArray)) }), ZPForm.isEmbedForm || -1 === Layout.Page.hash.indexOf("#performance/myteam/review") || void 0 === params.islocallysaved || "true" !== params.islocallysaved && params.islocallysaved !== !0 ? (ZPForm.LAYOUT.find("#zp_forms_add_btn").addClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_addnew_btn").addClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_savedraft_btn").addClass("disabled")) : ZPForm.LAYOUT.find("#zp_forms_draft_btn").addClass("disabled"), ZPForm.Record.PARAMS[ZPForm.CURRFORM_PARAM.formId] = params, ZPForm.FIELD_LAYOUT.find("input[type=file]").length > 0) ZPForm.Record.uploadFiles(); else if (ZPForm.isAllowedToEdit()) { var key = "zp.editapprovalconfirmmsg"; ZPForm.CONF.approvalSettingsDetails.isVerifySend && (key = "zp.editapprsendconfirmmsg"), ZPeople.BSModal.confirm(ZPForm.Record.addUpdateRecord, ZPI18N.getString("zp.confirm"), ZPI18N.getString(key)), $("#" + Layout.Page.pageId).find("#zp_modal_confirmpop").find("button").not("#zp_modal_blubtn").click(function () { ZPForm.LAYOUT.find("#zp_forms_add_btn").removeClass("disabled") }) } else ZPForm.Record.addUpdateRecord() }, TABULAR_PARAMS: {}, putParamForTabular: function (params, labelName, value) { var paramArr = new Array; return void 0 === ZPForm.Record.TABULAR_PARAMS[labelName] ? (paramArr.push(value), ZPForm.Record.TABULAR_PARAMS[labelName] = paramArr, params[labelName] = JSON.stringify(paramArr)) : (paramArr = ZPForm.Record.TABULAR_PARAMS[labelName], paramArr.push(value), params[labelName] = JSON.stringify(paramArr)), params }, addUpdateRecordResponse: function (resultData, params) { if (ZPForm.Record.TABULAR_PARAMS = {}, ZPForm.Validation.resetFormError(), ZPForm.LAYOUT.find("#zp_forms_add_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_addnew_btn").removeClass("disabled"), ZPForm.LAYOUT.find("#zp_forms_savedraft_btn").removeClass("disabled"), ZPForm.IS_RESUBMIT = !1, ZPForm.lastActiveSec, "object" == typeof resultData) { var succObj = resultData[0]; if (7e3 === succObj.code) { if (params.isDraft ? (ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.draftrecordaddedsuccessfully")), 1 == ZPForm.getPaginationType() && (ZPForm.lastActiveSec = ZPForm.LAYOUT.find("#zp_form_section_list").find(".sel").attr("secid")), "updateRecord" === params.zp_mode && ZPForm.refreshRecord(params.zp_formId, params.zp_recordId)) : "updateRecord" === params.zp_mode ? (1 == ZPForm.getPaginationType() && (ZPForm.lastActiveSec = ZPForm.LAYOUT.find("#zp_form_section_list").find(".sel").attr("secid")), msgkey = ZPI18N.getString("zp.recordupdatedsuccessfully"), ZPForm.isApprovalEnabled() && ZPForm.CONF.approvalSettingsDetails && ZPForm.CONF.approvalSettingsDetails.isEditAllow && (ZPApprovals.refresh = !0), ZPForm.refreshRecord(params.zp_formId, params.zp_recordId)) : msgkey = ZPI18N.getString("zp.recordaddedsuccessfully"), ZPForm.isEmbedForm) return ZPeople.Message.showSuccessMsg(msgkey), $("body").html(ZPForm.EMBED_FORM_SUCCESS_PAGE), ZPForm.isEmbedForm = !1, void (isAuthreq = !0); if (params.isDraft || (void 0 != succObj.warningMsg && "" != succObj.warningMsg ? (msgkey += "<br>" + ZPI18N.getString("zp.note") + ":" + succObj.warningMsg, ZPeople.Message.showWarningMsg(msgkey)) : ZPeople.Message.showSuccessMsg(msgkey)), "P_Location" == ZPForm.getTableName() && ZPUtil.Location.reload(!0), ZPForm.isQuickAdd) { ZPForm.curpageid = ZPForm.LAYOUT.data("curpageid"), ZPForm.toggleFormPage(!1, Layout.Page.container.find("#" + ZPForm.curpageid)), Timetracker.cache.clearCache(ZPForm.CURRFORM_PARAM.tableName), ZPForm.isQuickAdd = !1, ZPForm.isFromQuickAddrelClose = !0, ZPForm.updateLookUpRefreshOpt(), ZPForm.CURRFORM_PARAM = ZPForm.LAYOUT.data("preparam"), ZPForm.PAGEID = ZPForm.LAYOUT.data("prepageid"); var formCompData = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], isFromTTSelectQA = Timetracker.forms.isTTSelectQuickAdd(); if (isFromTTSelectQA || ZPForm.toggleFormPage(!0, Layout.Page.container.find("#" + ZPForm.PAGEID)), succObj.lkpDetails.lookupValue.length > 0 && "null" != succObj.lkpDetails.lookupValue) { var optionsPush = ({ Id: succObj.pkId, Value: succObj.lkpDetails.lookupValue }, ZPForm.Field.getFieldComponent(succObj.lkpDetails.lookupID)); if (optionsPush.Options.push({ Id: succObj.pkId, Value: succObj.lkpDetails.lookupValue }), Object.keys(succObj.lkpDetails).length > 0) { var inputType = optionsPush.displayType === ZPForm.Field.RADIO_DISPLYTYPE ? "radio" : optionsPush.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE ? "checkbox" : ""; if (optionsPush.displayType === ZPForm.Field.RADIO_DISPLYTYPE || optionsPush.displayType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE) { var ophtml = '<label class="' + inputType + ' DIB"><input type="' + inputType + '" name="' + optionsPush.labelName + '" value="' + succObj.pkId + '" ' + ZPForm.Field.getIsSelected(succObj.pkId, succObj.pkId) + "><span>" + succObj.lkpDetails.lookupValue + '</span></label><span class="clearfix"></span>'; Layout.Page.container.find("#zp_field_outer_" + ZPForm.lookupfcid).find(".MB10").append(ophtml) } else { inisel = { id: succObj.pkId, text: ZPeople.decodeTxt(succObj.lkpDetails.lookupValue) }, ZPForm.select2.ALL_OPTIONS[succObj.lkpDetails.lookupID + "_" + succObj.pkId] = succObj.lkpDetails.lookupValue, Layout.Page.container.find("#zp_field_" + ZPForm.lookupfcid).select2("destroy").select2(ZPForm.select2.getSelect2Properties({ initseljson: inisel, multiple: optionsPush.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE })).trigger("change"), optionsPush.displayType !== ZPForm.Field.MULTISELECT_DISPLYTYPE && Layout.Page.container.find("#zp_field_" + ZPForm.lookupfcid).select2("val", succObj.pkId); var isRelated = Layout.Page.container.find("#zp_field_" + ZPForm.lookupfcid).closest("div[id^='zp_field_outer_']").attr("relateddata"); if (isRelated) { var displaytype = Layout.Page.container.find("#zp_field_" + ZPForm.lookupfcid).closest("div[id^='zp_field_outer_']").attr("displaytype"); ZPForm.Field.getRelatedFieldsValue(Layout.Page.container.find("#zp_field_" + ZPForm.lookupfcid), displaytype) } } } } ZPForm.updateFormConf(formCompData.formDetails), ZPForm.LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID), ZPForm.MODE = ZPForm.LAYOUT.data("premode"), ZPForm.FIELD_LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID).find("#zp_form_outer_container"), null == ZPForm.Field.Edit.FORMCOMP_ID && null != ZPForm.isFromQuickAddEditFormComID && (ZPForm.Field.Edit.FORMCOMP_ID = ZPForm.isFromQuickAddEditFormComID); var params = { recordId: succObj.pkId, fcId: succObj.lkpDetails.lookupID }; ZPForm.Field.relatedFieldsResponse(succObj.relfieldDet, params), (isFromTTSelectQA || "P_Timesheet" === ZPForm_MAIN_PARAM.tableName && ("P_TimesheetJob" === succObj.lkpDetails.lkpFormLinkName || "P_TimesheetJobsList" === succObj.lkpDetails.lkpFormLinkName)) && Timetracker.forms.quickaddCallback(resultData, ZPForm_MAIN_PARAM.ttSelectAddData, ZPForm.Record.PARAMS[ZPForm_MAIN_PARAM.formId]) } else if (ZPForm.isrelformrelfields) { ZPForm.CURRFORM_PARAM = ZPForm.LAYOUT.data("preparam"), ZPForm.PAGEID = ZPForm.LAYOUT.data("prepageid"), ZPForm.curpageid = ZPForm.LAYOUT.data("curpageid"), ZPForm.MODE = ZPForm.LAYOUT.data("premode"), ZPForm.toggleFormPage(!1, Layout.Page.container.find("#" + ZPForm.curpageid)), ZPForm.isrelformrelfields = !1, ZPForm.isFromQuickAddrelClose = !0, ZPForm.MODE = "VIEW", ZPForm.CURRFORM_PARAM = ZPForm_MAIN_PARAM; var formCompData = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; if (ZPForm.toggleFormPage(!0, Layout.Page.container.find("#" + ZPForm.PAGEID)), ZPForm.updateFormConf(formCompData.formDetails), ZPForm.LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID), ZPForm.FIELD_LAYOUT = Layout.Page.container.find("#" + ZPForm.PAGEID).find("#zp_form_outer_container"), viewObj = $("#zp_dash_rfdata_" + ZPForm.relfcid), viewObj.is(":visible")) return viewObj.slideUp(), void $("#zp_dash_rfdata_" + ZPForm.relfcid).remove() } else if (ZPForm.isfromrelfieldedit) { var preparam = $("#" + ZPForm.LAYOUT.data("prepageid")).data("preparam"), prepageid = $("#" + ZPForm.LAYOUT.data("prepageid")).data("prepageid"), curpageid = ZPForm.LAYOUT.data("curpageid"); ZPForm.isfromrelfieldedit = !1, ZPView.isFromrelfields = !1, ZPForm.isFromQuickAddrelClose = !0, ZPForm.load({ formId: ZPForm.CURRFORM_PARAM.formId, formMode: "VIEW", recordId: ZPForm.CURRFORM_PARAM.recordId, isrelfieldsingelrecview: !0, relfcid: ZPForm.relfcid }), ZPForm.toggleFormPage(!1, Layout.Page.container.find("#" + curpageid)), ZPForm.LAYOUT.data("preparam", preparam), ZPForm.LAYOUT.data("premode", ZPForm.MODE), ZPForm.LAYOUT.data("prepageid", prepageid) } else { if ("P_Employee" === params.zp_tableName && ZPForm.isAddMode()) { var formComp = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; formComp.refresh = !0 } if ("P_Employee" !== params.zp_tableName && ZPForm.updateLookUpRefreshOpt(), "P_Employee" === params.zp_tableName && ZPForm.isAddMode() && succObj.isZohoUser && (ZPForm.addedIsZohoUser = succObj.zUserEmailID), ZPForm.CURRFORM_PARAM.isPageMode) { if (params.zp_formId != ZPForm.CURRFORM_PARAM.formId) return; void 0 !== ZPForm.CURRFORM_PARAM.callback && "function" == typeof ZPForm.CURRFORM_PARAM.callback && (succObj.hasOwnProperty("onBoardingTabStatus") ? ZPForm.CURRFORM_PARAM.callback(succObj.pkId, succObj.onBoardingTabStatus) : ZPForm.CURRFORM_PARAM.callback(succObj.pkId)) } else { if (params.zp_formId != ZPForm.CURRFORM_PARAM.formId) return; if (ZPForm.CURRFORM_PARAM.recordId = succObj.pkId, ZPForm.Record.SUCCESS_PKID = succObj.pkId, ZPForm.CURRFORM_PARAM.disableUrlTrack) ZPForm.IS_SUBMITNEW ? ZPForm.showRelatedRecordByMode(ZPForm.CURRFORM_PARAM.formId, void 0, "ADD", void 0) : (ZPForm.CURRFORM_PARAM.formMode = "VIEW", ZPForm.load(ZPForm.CURRFORM_PARAM), "P_Employee" === params.zp_tableName && ZPForm.isViewMode() && SelfService.Info.refreshUserDetails()), ZPForm.CURRFORM_PARAM.viewRefresh && (ZPForm.CURRFORM_PARAM.refreshView = !0); else if (void 0 !== ZPForm.CURRFORM_PARAM.callback && "function" == typeof ZPForm.CURRFORM_PARAM.callback) ZPForm.IS_SUBMITNEW ? User.getRecordPage(ZPForm.CURRFORM_PARAM.formId, "", !1, "ADD", !1, Organization.dispType) : succObj.currentTimerData ? ZPForm.toggleFormPage(!1, void 0, succObj.currentTimerData) : ZPForm.toggleFormPage(!1), ZPCal.Calendar && (ZPCal.Calendar.refresh = -1 != Layout.Page.hash.indexOf("home/dashboard/calendar") ? !0 : ZPCal.Calendar.refresh), "selfservice/leave/list" === Layout.Page.currentmode ? Leave.SelfService.View.get() : -1 != Layout.Page.hash.indexOf("#leavetracker/") && (Leave.View.List.refresh = !0); else if (ZPView.setViewPropertie("refreshStatus", !0), ZPForm.IS_SUBMITNEW) ZPForm.load({ formId: ZPForm.CURRFORM_PARAM.formId }); else if (ZPView.setViewPropertie("refreshStatus", !0), "P_MultiRater" === params.zp_tableName) ZPForm.toggleFormPage(!1, Layout.Page.container.find("#zp_addedit_record_" + Appraisal.MultiRater.MULTIRATER_FORM_ID)); else if ("P_Location" === params.zp_tableName && 1 != ZPForm.IS_SUBMITNEW) window.location.href = "#admin/organization/locations/view/" + ZPForm.CURRFORM_PARAM.recordId; else { var formActUrl = Layout.UrlConf.getFormActionURL("view"), formlinkname = ZPUtil.Form_Link_Names.getFormLinkName(ZPForm.CURRFORM_PARAM.formId, !0), formnameString = "-formLinkName:"; void 0 == formlinkname && (formnameString = "-formId:", formlinkname = formId); var recId = ZPForm.CURRFORM_PARAM.recordId; window.location.href = "#" + formActUrl + formnameString + formlinkname + "/recordId:" + recId } } void 0 !== ZPForm.Record.PARAMS[params.zp_formId] && delete ZPForm.Record.PARAMS[params.zp_formId] } } else if ("permission_denied" === succObj.message) ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.permissiondenied")); else if (7400 === succObj.code || 7040 === succObj.code) ZPeople.Message.showFailureMsg(succObj.message); else if (succObj.code === zpconst.ResponseCodes.PERMISSION_DENIED_TO_ADD_OR_EDIT_DATA) ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.permdeniedtoeditfield")); else if (succObj.code === zpconst.UniqueFields.CANDIDATE_KEY_DUPLICATE_RECORD_ADD_ERROR) { ZPForm.LAYOUT.find("#zp_form_outer_container").find("#uniqueErrorHead").remove(), ZPForm.LAYOUT.find("#zp_form_outer_container").prepend(ZPForm.UNIQUE_FIELDS_RECORD_ERROR), ZPForm.LAYOUT.find("#zp_form_outer_container").find("#uniqueErrorHead").find("#uniqueErrorTxt").html(succObj.message.errors), ZPForm.LAYOUT.find("#zp_form_outer_container").find("#uniqueErrorHead").fadeIn(1e3); for (var formId = ZPForm.LAYOUT.attr("id").match(/[\d]+$/).toString(), uniqFields = ZPForm.FORM_COMPONENT_DATA[formId].message.UniqueFieldDetails, i = 0; i < uniqFields.length; i++) { var fieldObj = ZPForm.FIELD_LAYOUT.find("[folabel=" + uniqFields[i] + "]"), errorCont = "<div id='error_message' class='ERR MT5'>" + ZPI18N.getString("zp.uniqueDubValPres") + "</div>"; fieldObj.append(errorCont) } } else ZPForm.Validation.showFormFieldError(resultData, succObj.code) } }, getSingleFieldHistory: function (obj) { var value = Layout.Page.container.find("#historyFieldsSelect").val(); ZPForm.Record.getAuditHistoryForRecord(ZPForm.CURRFORM_PARAM.formId, ZPForm.CURRFORM_PARAM.recordId, !1, value) }, getAuditHistoryForRecord: function (formId, recordId, backdrop, singleFieldFcid) { void 0 === recordId && (recordId = ZPForm.CURRFORM_PARAM.recordId), void 0 === formId && (formId = ZPForm.CURRFORM_PARAM.formId); var params = { mode: "getAuditHistoryForRecord", recordId: recordId, formId: formId }; void 0 == ZPForm.HistoryFields[formId] && (params.isHistoryFieldsNeed = !0), void 0 != singleFieldFcid && (params.singleFieldFcid = singleFieldFcid), ZPeople.Request.send(ZPForm.URL, params, ZPForm.Record.showRecordAuditHistory, backdrop) }, showRecordAuditHistory: function (resultData, params, backdrop) { ZPForm.CURRFORM_PARAM.formId = params.formId, ZPForm.CURRFORM_PARAM.recordId = params.recordId; var auditHisBodyHtml = ""; if (7e3 === resultData.code) { var history_Fields_html = '<option value="-1">All</option>'; void 0 == ZPForm.HistoryFields[params.formId] && (ZPForm.HistoryFields[params.formId] = resultData.HistoryFields), void 0 != ZPForm.HistoryFields[params.formId] && $.each(ZPForm.HistoryFields[params.formId], function (k) { $.each(ZPForm.HistoryFields[params.formId][k], function (key, value) { var select = ""; void 0 != params.singleFieldFcid && params.singleFieldFcid == key && (select = "selected"), history_Fields_html += '<option value="' + key + '" ' + select + ">" + value + "</option>" }) }), -1 == params.singleFieldFcid && (params.singleFieldFcid = void 0), auditHisBodyHtml += '<div class="modal-body NomdlFoot PT0I">', auditHisBodyHtml += '<div class="tlfieldflt"><select class="selectBox" id="historyFieldsSelect" style="display: block;" onchange=ZPForm.Record.getSingleFieldHistory()>' + history_Fields_html + '</select></div><div class="tlouter tltime" id="headerrw">'; var cou = -1, historyData = resultData.message, createdTime = resultData.isCreates, count = 0; if ($.each(historyData, function (key, value) { var histdata = value.data; $.each(histdata, function (i, data) { var modifiedTime = this.modifiedTime, isCreated = this.isCreated; void 0 != params.singleFieldFcid ? (0 != count && (auditHisBodyHtml += '</div><span class="tlprd">' + this.diff + "</span></div></div>"), auditHisBodyHtml += '<div class="tlentry"><div class="tlentry-inner"><div class="tltime"> <span class="date"><i>' + modifiedTime.day + "</i>" + ZPI18N.getString(ZPForm.months[modifiedTime.month]) + "</span><span>" + modifiedTime.year + '</span><span class="time">' + modifiedTime.time + '</span></div><div class="tlicon"></div><div class="tllabel"><div class="stshead">') : auditHisBodyHtml += '<div class="tlentry" id="row_' + count + '"><div class="tlentry-inner"><div class="tltime"> <span class="date"><i>' + modifiedTime.day + "</i>" + ZPI18N.getString(ZPForm.months[modifiedTime.month]) + "</span><span>" + modifiedTime.year + '</span><span class="time">' + modifiedTime.time + '</span></div><div class="tlicon"></div><div class="tllabel"><div class="stshead"><div><img src="' + data.ownerPhoto + '" alt=""><span>' + data.ownerDisplayName + '</span></div><i class="stus">' + (isCreated ? "Created" : "Edited") + '</i></div><div class="shwtldet"><table class="table tltable"><tbody>'; var cnt = 0; if ($.each(this.formComponentIdsArray, function (index, value) { var fieldDtl = data[value]; 2 == cnt && (auditHisBodyHtml += '</body></table><div id="zp_dash_rfdata_' + count + '" aria-expanded="false" class="collapse"><table class="table tltable"><tbody>'), auditHisBodyHtml += fieldDtl.fieldType === ZPForm.Field.FILE_UPLOAD || fieldDtl.fieldType === ZPForm.Field.IMAGE ? void 0 != params.singleFieldFcid ? '<span class="role">' + ZPForm.Record.getAuditFileValue(fieldDtl.newFileName, fieldDtl.newFilePath) + '</span><div class="FR"><i>' + (isCreated ? "Created by" : "Modified by") + '</i><img src="' + data.ownerPhoto + '" alt=""><span class="tlusr">' + data.ownerDisplayName + "</span></div></div>" : '<tr><td width="200">' + fieldDtl.fieldDisplayName + '</td><td width="200">' + ZPForm.Record.getAuditFileValue(fieldDtl.oldFileName, fieldDtl.oldFilePath) + "</td><td>" + ZPForm.Record.getAuditFileValue(fieldDtl.newFileName, fieldDtl.newFilePath) + "</td></tr>" : void 0 != params.singleFieldFcid ? '<span class="role">' + ZPForm.Field.getNoValueString(fieldDtl.newvalue) + '</span><div class="FR"><i>' + (isCreated ? "Created by" : "Modified by") + '</i><img src="' + data.ownerPhoto + '" alt=""><span class="tlusr">' + data.ownerDisplayName + "</span></div></div>" : '<tr><td width="200">' + fieldDtl.fieldDisplayName + '</td><td width="200">' + ZPForm.Field.getNoValueString(fieldDtl.oldvalue) + "</td><td>" + ZPForm.Field.getNoValueString(fieldDtl.newvalue) + "</td></tr>", cnt += 1 }), cnt > 2) { var dif = cnt - 2; auditHisBodyHtml += '</table></div></body><div class="showtbl" data-parent="#headerrw" onclick="ZPForm.Record.collap(this)" count="' + dif + '"data-toggle="collapse" data-target="#zp_dash_rfdata_' + count + '">' + dif + " " + ZPI18N.getString("zp.more") + "</div>" } else auditHisBodyHtml += "</head></table>"; void 0 == params.singleFieldFcid && (auditHisBodyHtml += "</div></div></div></div>"), count += 1 }), cou = count }), void 0 != createdTime && void 0 == params.singleFieldFcid) { var rec = ZPForm.getSingleRecord(); void 0 != rec && (auditHisBodyHtml += '<div class="tlentry"><div class="tlentry-inner"><div class="tltime"> <span class="date"><i>' + createdTime.day + "</i>" + ZPI18N.getString(ZPForm.months[createdTime.month]) + "</span><span>" + createdTime.year + '</span><span class="time">' + createdTime.time + '</span></div><div class="tlicon"></div><div class="tllabel"><div class="stshead"><div><img src="' + createdTime.empPhoto + '" alt=""><span>' + createdTime.empDisplayName + '</span></div><i class="FR">Created</i></div><div class="shwtldet"></div>'); } void 0 != params.singleFieldFcid && (auditHisBodyHtml += "</div></div>"), auditHisBodyHtml += "</div></div>" } else if (void 0 !== resultData.message) { var resultmsg = '<div class="col-lg-12 text-center"><div id="zp_views_norecclass" class="PArds"></div><h2 id="zp_nodata" class="ZPNdt">' + resultData.message + "</h2></div>"; if (void 0 != params.singleFieldFcid) return Layout.Page.container.find("#headerrw").attr("class", ""), void Layout.Page.container.find("#headerrw").html(resultmsg); auditHisBodyHtml += resultmsg } var auditHisHeaderHtml = '<div class="modal-content"><div class="modal-header"><h6 class="FL addPopTitle"><a data-dismiss="modal" href="#" class="gry"><i class="IC-ar-lft S16"></i></a> ' + ZPForm.getFormDisplayName() + ' <span class="gry">- Audit History</span></h6><div class="clearfix"></div><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div>' + auditHisBodyHtml + "</div></div>", auditHisOuterHtml = '<div id="zp_form_audit_history" class="modal popRgtModel ZPsecModal PopMdModel">' + auditHisHeaderHtml + "</div>"; Layout.Page.container.find("#zp_form_audit_history").length > 0 ? Layout.Page.container.find("#zp_form_audit_history").html(auditHisHeaderHtml) : Layout.Page.container.append(auditHisOuterHtml), Layout.Page.container.find("#zp_form_audit_history").modal("show"), Layout.Page.container.find("#historyFieldsSelect").select2() }, collap: function (ele) { var cnt = Layout.Page.container.find(ele).attr("count"), text = Layout.Page.container.find(ele).text(); if (text == ZPI18N.getString("zp.close")) { var cnthtml = cnt + " " + ZPI18N.getString("zp.more"); Layout.Page.container.find(ele).text(cnthtml) } else Layout.Page.container.find(ele).text(ZPI18N.getString("zp.close")) }, getAuditFileValue: function (value, url) { return value = ZPForm.Field.getNoValueString(value), "-" != value && (value = '<a href="javascript:;" onclick="window.open(\'' + url + "');\">" + value + "</a>"), value }, deleteRecord: function () { var recIds = ZPView.Actions.getDeleteRecIds(); if (Layout.UrlConf.isModuleForm()) ZPComponents.SystemView.deleteRecords(recIds); else { var formId = ZPView.CURR_VIEWPARAMS.formId; ZPForm.isFormPage() && (formId = Layout.Page.urlparam.formId); var params = { mode: "deleteRecords", recordIds: recIds, formId: formId }; void 0 !== recIds && "" !== recIds.trim() && ZPeople.Request.send(ZPForm.URL, params, ZPForm.Record.deleteRecResponse) } }, deleteRecResponse: function (response, params) { if (7e3 === response.code) { ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.recorddeletedsuccessfully")), ZPView.Actions.selectUnselectRec(!0), "P_Employee" !== ZPForm.getTableName() && ZPForm.updateLookUpRefreshOpt(params.formId); var props = ZPView.getViewPropertie(); ZPView.Actions.DELETE_RECIDS.length != props.totalRec || props.hasNext || (props.startInd > 1 && props.startInd > props.limit ? props.startInd = props.startInd - props.limit : props.startInd = 1), ZPView.Actions.DELETE_RECIDS = new Array, ZPView.refresh(!0), Layout.Page.container.find("#zp_view_record_delete").fadeOut(200, function () { $(this).siblings("#zp_views_formrecactions").fadeIn(200) }) } else void 0 !== response.message ? ZPeople.Message.showFailureMsg(response.message) : ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")) }, getApprovalHierarchy: function () { var params = { mode: "getApprovalHierarchy", recordId: ZPForm.CURRFORM_PARAM.recordId, formId: ZPForm.CURRFORM_PARAM.formId }; ZPeople.Request.send(ZPForm.URL, params, ZPForm.RecordApproval.showApprovalHierarchy) }, approveReject: function (recordId, approvalStatus, comment, isAllLevelApprove, callback, fetchApproval, formId) { var params = { mode: "approveRejectRecord", recordIds: JSON.stringify(recordId), comment: comment, approvalStatus: approvalStatus, fetchApproval: fetchApproval }; "1" == approvalStatus && (params.isAllLevelApprove = isAllLevelApprove), Attendance.Reg.apprStatus = approvalStatus, void 0 === formId && void 0 !== ZPForm.CURRFORM_PARAM.formId && (formId = ZPForm.CURRFORM_PARAM.formId), params.formId = formId, ZPeople.Request.send(ZPForm.URL, params, callback, recordId) }, cancelRecord: function () { var params = { mode: "cancelRecord", recordId: ZPForm.CURRFORM_PARAM.recordId, formId: ZPForm.CURRFORM_PARAM.formId }; ZPeople.Request.send(ZPForm.URL, params, ZPForm.Record.cancelRecordResponse) }, cancelRecordResponse: function (result) { result.success ? (Layout.Page.container.find("#zp_approval_followupbtn").addClass("DN"), ZPForm.RecordApproval.APPROVER_FOOTER ? (ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_cancelapproval").addClass("DN"), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_list").hide(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").hide(), erecno != ZPForm.RecordApproval.CREATE_ERECNO && erecno != ZPForm.RecordApproval.OWNER_ERECNO || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") || (ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").removeClass("DN"), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").click(function () { ZPForm.RecordApproval.onRecordResubmit() }))) : ZPApprovals.showApprovalHeader(zpconst.ApprovalStatus.Cancelled), ZPForm.CURRFORM_PARAM.disableUrlTrack ? ZPForm.CURRFORM_PARAM.refreshView = !0 : (ZPView.setViewPropertie("refreshStatus", !0), ZPForm.refreshRecord())) : (ZPForm.refreshRecord(), ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.cancelfailed"))) }, removeTabularRow: function (delObj) { var secId = $(delObj).attr("secId"), delObjparent = $(delObj).parent().parent().siblings(); $(delObj).parent().parent().remove(); var row = 1; $.each(Layout.Page.container.find("#zp_section_fields_" + secId).find("tbody").children("tr"), function () { $(this).attr("row", row), row += 1 }), 0 === delObjparent.length && ZPForm.addTabularSectionRow(secId) }, removeinlineTabularRow: function (obj) { var Id = $(obj).parent().parent().attr("id"), secId = $(obj).parent().parent().attr("secid"), delObjparent = $(obj).parent().parent().siblings().filter("[id=" + Id + "]"); $(obj).parent().parent().remove(); var row = 1; $.each(Layout.Page.container.find("div[id='zp_section_fields_" + secId + "']"), function () { $(this).attr("row", row), row += 1 }), 0 === delObjparent.length && ZPForm.addTabularSectionRow(secId, !0) }, updateCreatedInfo: function (createdInfo) { void 0 != createdInfo && (ZPForm.Record.showTimeInfo(ZPForm.LAYOUT.find("#zp_form_createdby"), createdInfo.cInfo), ZPForm.Record.showTimeInfo(ZPForm.LAYOUT.find("#zp_form_modifiedby"), createdInfo.mInfo), ZPForm.LAYOUT.find("#zp_form_createinfo").parent().removeClass("DN")) }, showTimeInfo: function (domObj, info) { domObj.find('span[name="username"]').html(info.user.dispName), domObj.find('span[name="time"]').html(info.time), domObj.find("img").attr("src", ZPeople.getPhotoPath(info.user.photopath, info.user.zuid)) }, updateModifiedInfo: function (mInfo) { var singleRecDtl = ZPForm.getSingleRecord(); singleRecDtl.record.message.cAuditInfo.mInfo = mInfo, ZPForm.Record.showTimeInfo(ZPForm.LAYOUT.find("#zp_form_modifiedby"), mInfo) } }, ZPForm.RecordApproval = { APPROVER_FOOTER: null, APPROVAL_CALLBACK: null, CREATE_ERECNO: null, OWNER_ERECNO: null, showApprovalHierarchy: function (apprDtl, footer, callback) { if (!ZPForm.PAGEMODE || ZPForm.PRINT) { if (void 0 !== footer) { var footerHtml = "<div class='col-sm-7' id='zp_appproval_container'></div>"; void 0 !== apprDtl && apprDtl.isfromTimesheet === !0 && (footerHtml = "<div class='col-sm-8' id='zp_appproval_container'></div>"), footer.prepend(footerHtml) } else footer = ZPForm.LAYOUT.find(".modal-footer"), footer.find("#zp_appproval_container").empty(); (void 0 !== apprDtl.systemApproved || apprDtl.canSendApproval) && (ZPForm.RecordApproval.APPROVAL_CALLBACK = callback, ZPForm.RecordApproval.APPROVER_FOOTER = footer, ZPForm.isDraftrec || ZPForm.RecordApproval.showApprovalDetails(apprDtl), ZPForm.PRINT && (ZPForm.ISAPPROVAL = !0, ZPForm.APPROVERHTML = apprDtl)) } }, showApprovalDetails: function (approvalDetails) { var apprejHtmlList = $('<div id="zp_appproval_list" class="ZPAprvDts"></div>'), tableName = ZPForm.getTableName(), isfromAttendence = !1, isfromTimesheet = !1, hasApprvAllPerm = !1; (Layout.ISLOCALIDCSETUP || Layout.ISDEV) && approvalDetails.currentApprovalStatus !== zpconst.ApprovalStatus.Cancelled && $("#" + Layout.Page.pageId).find("#zp_appproval_comment_btn").show(), void 0 !== approvalDetails.isfromAttendence && 1 == approvalDetails.isfromAttendence && (isfromAttendence = !0), void 0 !== approvalDetails.isfromTimesheet && 1 == approvalDetails.isfromTimesheet && (isfromTimesheet = !0, apprejHtmlList.addClass("ZPAprval_list")); var singleRecDtl = ZPForm.getSingleRecord(); if (isfromAttendence || void 0 == singleRecDtl || (ZPForm.RecordApproval.CREATE_ERECNO = singleRecDtl.record.message.cAuditInfo.cInfo.user.ERECNO, ZPForm.RecordApproval.OWNER_ERECNO = singleRecDtl.record.message.ownerID), void 0 === approvalDetails.systemApproved || approvalDetails.systemApproved) -2 === approvalDetails.currentApprovalStatus || -3 === approvalDetails.currentApprovalStatus ? approvalDetails.canSendApproval && (apprejHtmlList.append('<button class="btn btn-primary">' + ZPI18N.getString("zp.sendforapproval") + "</button>"), "APPROVER_CHOOSEN_BY_USER" === ZPForm.getApproverType() && (apprejHtmlList.append('<div class="col-sm-6" id="zp_form_approver"><select id="zp_form_chooseapprover" name="zp_approverId">' + ZPeople.User.getEmployeeListFormatByType("option") + "</select></div>"), apprejHtmlList.find("#zp_form_chooseapprover").select2())) : 2 == approvalDetails.currentApprovalStatus ? erecno != ZPForm.RecordApproval.CREATE_ERECNO && erecno != ZPForm.RecordApproval.OWNER_ERECNO || !ZPForm.Permission.getAddPerm() || "P_Employee" == tableName || "P_Designation" == tableName || "P_Department" == tableName || "P_Goals" == tableName || "P_EmployeeLeave" == tableName || "P_MultiRater" === tableName || "P_MultiRater_Approval" === tableName || isfromAttendence || isfromTimesheet || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") || (ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").show(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").click(function () { ZPForm.RecordApproval.onRecordResubmit() })) : (0 == approvalDetails.currentApprovalStatus && (erecno != ZPForm.RecordApproval.CREATE_ERECNO && erecno != ZPForm.RecordApproval.OWNER_ERECNO || !ZPForm.Permission.getAddPerm() || "P_Employee" == tableName || "P_Designation" == tableName || "P_Department" == tableName || "P_Goals" == tableName || "P_EmployeeLeave" == tableName || "P_MultiRater" === tableName || "P_MultiRater_Approval" === tableName || isfromAttendence || isfromTimesheet || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") || (ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_close").hide(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").show(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").click(function () { ZPForm.RecordApproval.onRecordResubmit() }))), apprejHtmlList.append($('<div class="AprvImg ' + (0 === approvalDetails.currentApprovalStatus ? "RsltR" : "RsltA") + '"><img class="Usrimg" src="/people/images/auto-app.jpg"></div>')), apprejHtmlList.append(ZPForm.RecordApproval.completeApprovelHtml(approvalDetails.currentApprovalStatus)), void 0 !== ZPView.VIEW_CONTAINER && ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).length > 0 && (ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approver div").tooltip("destroy"), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approver").html('<div class="AprvImg" title="' + (approvalDetails.currentApprovalStatus === zpconst.ApprovalStatus.Approved ? ZPI18N.getString("zp.systemapproved") : ZPI18N.getString("zp.systemrejected")) + '" data-toggle="tooltip" data-container="body" data-placement="top"><img class="Usrimg"  height=44 src="/people/images/auto-app.jpg"></div>'), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approvedtime").html(""), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.ZPThumb").html('<i class="' + (1 === approvalDetails.currentApprovalStatus ? "IC-tick-2px grn S21" : "IC-cls-r red S18") + '"></i>'))), !isadmin || 1 != approvalDetails.currentApprovalStatus || "P_Employee" == tableName || "P_Designation" == tableName || "P_Department" == tableName || "P_Goals" == tableName || "P_EmployeeLeave" == tableName || "P_MultiRater" === tableName || "P_MultiRater_Approval" === tableName || isfromAttendence || isfromTimesheet || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") || ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_cancelapproval").removeClass("DN"), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_container").html(apprejHtmlList); else { var processedList = approvalDetails.processed, currentApp = approvalDetails.current ? approvalDetails.current.delegatee ? approvalDetails.current.delegatee : approvalDetails.current : void 0, pendingAp = approvalDetails.pending, pointNext = !1, isCompleted = !1; if (void 0 != processedList && processedList.length > 0) { for (var procInt = 0; procInt < processedList.length; procInt++) { var procListDtl = processedList[procInt]; 0 !== procInt && apprejHtmlList.append($('<div class="AprvCon RsltA"><span class="Hrline"></span><span class="Edot"></span></div>')); var eleme = $('<div showappdtl="true" id="proctitle" data-toggle="tooltip" data-container="body" data-placement="top" class="AprvImg ' + (0 === procListDtl.approvalStatus ? "RsltR" : "RsltA") + '"><img class="Usrimg" src="' + ZPeople.User.getPhoto(procListDtl.photo) + '"></div>').data("approverdtl", procListDtl); eleme.attr("title", ZPeople.decodeTxt(procListDtl.name)), apprejHtmlList.append(eleme) } pointNext = !0 } if (void 0 !== approvalDetails.current && $.each(ZPeople.SUB_USERLIST, function (index, data) { approvalDetails.current.erecno === data && (approvalDetails.isOwner = !0) }), void 0 !== currentApp) { if (void 0 !== ZPView.VIEW_CONTAINER && ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).length > 0 && ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.ZPThumb").html('<i class="IC-pending org S18"></i>'), approvalDetails.isOwner || isadmin || approvalDetails.recOwner !== erecno && approvalDetails.recordowner.erecno !== erecno ? ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_followupbtn").addClass("DN") : ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_followupbtn").removeClass("DN").attr("dataforapprovalid", approvalDetails.dataForApprovalId), erecno != ZPForm.RecordApproval.CREATE_ERECNO && erecno != ZPForm.RecordApproval.OWNER_ERECNO || "P_EmployeeLeave" == tableName || "P_Employee" == tableName || "P_Designation" == tableName || "P_Department" == tableName || "P_Goals" == tableName || "P_MultiRater" === tableName || "P_MultiRater_Approval" === tableName || isfromAttendence || isfromTimesheet || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") ? ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_cancelapproval").addClass("DN") : ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_cancelapproval").removeClass("DN"), pointNext && apprejHtmlList.append($('<div class="AprvCon RsltA CP"><span class="Hrline"></span><span class="Edot"></span></div>')), apprejHtmlList.append($('<div class="AprvImg RsltC CP" id="curappname" showaprrej= "' + approvalDetails.isOwner + '" data-toggle="tooltip" data-placement="top" current="true"><img class="Usrimg" src="' + ZPeople.User.getPhoto(currentApp.photo) + '"></div>').data("approverdtl", currentApp)), apprejHtmlList.find("#curappname").attr("title", ZPeople.decodeTxt(currentApp.name)), pendingAp.length > 0) { apprejHtmlList.append($('<div class="AprvCon RsltP"><span class="Hrline"></span><span class="Edot"></span></div>')); for (var penInt = 0; penInt < pendingAp.length; penInt++) { var penAppDtl = pendingAp[penInt], eleme = $('<div class="AprvImg RsltP" data-toggle="tooltip" data-placement="top"><img class="Usrimg" src="' + ZPeople.User.getPhoto(penAppDtl.photo) + '"></div>').data("approverdtl", penAppDtl); eleme.attr("title", ZPeople.decodeTxt(penAppDtl.name)), apprejHtmlList.append(eleme), pendingAp.length - 1 !== penInt && apprejHtmlList.append($('<div class="AprvCon RsltP"><span class="Hrline"></span><span class="Edot"></span></div>')) } var noApproveAllTable = ["P_MultiRater", "P_GoalSheet", "P_MultiRater_Approval"]; hasApprvAllPerm = (isfromTimesheet || !ZPUtil.Validation.isEmpty(tableName)) && !ZPUtil.checkIsExistInArray(noApproveAllTable, tableName) && isadmin } } else approvalDetails.canceledRecord || (isCompleted = !0); if (!isadmin || 1 != approvalDetails.currentApprovalStatus || "P_Goals" == tableName || "P_Designation" == tableName || "P_Employee" == tableName || "P_Department" == tableName || "P_EmployeeLeave" == tableName || "P_MultiRater" === tableName || "P_MultiRater_Approval" === tableName || isfromAttendence || isfromTimesheet || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") || ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_cancelapproval").removeClass("DN"), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_container").html(apprejHtmlList), !(0 == approvalDetails.currentApprovalStatus || approvalDetails.canceledRecord && 2 == approvalDetails.currentApprovalStatus) || erecno != ZPForm.RecordApproval.CREATE_ERECNO && erecno != ZPForm.RecordApproval.OWNER_ERECNO || !ZPForm.Permission.getAddPerm() || "P_Employee" == tableName || "P_Designation" == tableName || "P_Department" == tableName || "P_Goals" == tableName || "P_EmployeeLeave" == tableName || "P_MultiRater" === tableName || "P_MultiRater_Approval" === tableName || isfromAttendence || isfromTimesheet || -1 != Layout.Page.hash.indexOf("approvals/myapproval") || -1 != Layout.Page.hash.indexOf("approvals/myrequest") || -1 != Layout.Page.hash.indexOf("dashboard/feeds") || -1 != Layout.Page.hash.indexOf("dashboard/approvals") || (approvalDetails.canceledRecord || (ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_close").hide(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_cancelapproval").hide()), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").show(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").click(function () { ZPForm.RecordApproval.onRecordResubmit() })), !isCompleted && approvalDetails.isOwner && 2 != approvalDetails.currentApprovalStatus) ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").addClass("DN"), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").click(function () { ZPForm.RecordApproval.showApproveRejectBox($(this).attr("approvaltype"), hasApprvAllPerm), Layout.Page.container.find("#zp_approvereject_box").show(), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").hide() }), ZPForm.RecordApproval.showApproveRejectBox("1", hasApprvAllPerm, !0), void 0 == ZPeople.CURR_USER.groupList && Groups.getMyGroups(), (currentApp.erecno + "" === ZPeople.CURR_USER.usererec || currentApp.deptId + "" === ZPeople.CURR_USER.deptId || currentApp.roleId + "" === ZPeople.CURR_USER.roleId || -1 != ZPeople.CURR_USER.groupList.indexOf(currentApp.groupId + "")) && ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").show(), Layout.Page.container.find("[id=zp_approvereject_box]").find("i.CmtsBoxCls").click(), apprejHtmlList.find('[showaprrej="true"]').click(function () { ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").show() }); else if (ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn, #zp_approvereject_box").remove(), isCompleted) { var finalApprDtl = processedList[processedList.length - 1]; apprejHtmlList.append(ZPForm.RecordApproval.completeApprovelHtml(finalApprDtl.approvalStatus)), void 0 !== ZPView.VIEW_CONTAINER && ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).length > 0 && ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.ZPThumb").html('<i class="' + (1 === finalApprDtl.approvalStatus ? "IC-like grn S21" : "IC-unlike red S21") + '"></i>') } if (void 0 !== ZPView.VIEW_CONTAINER && ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).length > 0) if (void 0 !== currentApp && 2 != approvalDetails.currentApprovalStatus) ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approver div").tooltip("destroy"), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approver").html('<div class="AprvImg" title="' + ZPeople.escapeHtml(currentApp.name) + '" data-toggle="tooltip" data-container="body" data-placement="top"><img src="' + ZPeople.User.getPhoto(currentApp.photo) + '"  height=44 class="Usrimg"></div>'), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approvedtime").html(""); else if (isCompleted) { var finalApprDtl = processedList[processedList.length - 1]; ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approver div").tooltip("destroy"), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approver").html('<div class="AprvImg" title="' + finalApprDtl.name + '" data-toggle="tooltip" data-container="body" data-placement="top"><img src="' + ZPeople.User.getPhoto(finalApprDtl.photo) + '"  height=44 class="Usrimg"></div>'), ZPView.VIEW_CONTAINER.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).find("td.approvedtime").html(finalApprDtl.approvedTime) } apprejHtmlList.find('[showappdtl="true"]').click(function () { ZPForm.RecordApproval.showApprovedDetails(this) }) } ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_list").find("button").click(function () { ZPForm.RecordApproval.triggerApprovalManually() }) }, triggerApprovalManually: function () { var params = { method: "triggerRecordApproval", recordId: ZPForm.CURRFORM_PARAM.recordId, formId: ZPForm.CURRFORM_PARAM.formId, conreqcsr: csrfToken }; if ("APPROVER_CHOOSEN_BY_USER" === ZPForm.getApproverType()) { if (ZPForm.RecordApproval.APPROVER_FOOTER ? footer = ZPForm.RecordApproval.APPROVER_FOOTER : footer = ZPForm.LAYOUT, "-Select-" === footer.find("#zp_form_chooseapprover").val()) return void footer.find("#zp_form_approver").append('<div id="error_message" class="ERR MT5">' + ZPI18N.getString("zp.chooseapprovererrormsg") + "</div>"); params.empChoosenApprErecno = footer.find("#zp_form_chooseapprover").val() } $.post("/triggerRecordApproval.zp", params, function (data) { ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.sentapprsuccessmsg")), Layout.UrlConf.isForm() ? ZPApprovals.approveRejectDtlCallBack(data, params) : ZPForm.RecordApproval.handleApproveRejectResponse(data, params, [ZPForm.CURRFORM_PARAM.recordId]) }) }, onRecordResubmit: function () { ZPForm.IS_RESUBMIT = !0, ZPForm.RESUBMIT_RECORDID = Layout.Page.childUrlParam.recordId, ZPForm.RecordApproval.APPROVER_FOOTER ? ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_resubmitbtn").addClass("disabled") : ZPForm.LAYOUT.find(".modal-footer #zp_approval_resubmitbtn").addClass("disabled"), ZPForm.showForm("add") }, completeApprovelHtml: function (approvalStatus) { return '<div class="AprvCon ' + (1 === approvalStatus ? "RsltA" : "RsltR") + '"><span class="Hrline"></span><span class="Edot"></span></div><div class="AprvImg ' + (1 === approvalStatus ? "RsltA" : "RsltR") + '" data-toggle="tooltip" data-placement="top" title="' + (1 === approvalStatus ? ZPI18N.getString("zp.approved") : ZPI18N.getString("zp.rejected")) + '"><span class="Scrcle"><i class="' + (1 === approvalStatus ? "IC-tick" : "IC-cls") + '"></i></span></div>' }, showApproveRejectBox: function (type, hasApprvAllPerm, isInitial) { var footerObj = ZPForm.RecordApproval.APPROVER_FOOTER, currApprRejBox = footerObj.find("#zp_approvereject_box").removeClass("DN"); if (currApprRejBox.length > 0 && !isInitial) currApprRejBox.attr("type", type), currApprRejBox.find("#zp_form_approvalbtn_cont #zp_approval_confirm_btn").removeClass("MT12").addClass("MT53"), currApprRejBox.find("#zp_form_approvalbtn_cont .checkbox").remove(), "1" === type ? (currApprRejBox.addClass("RsltA").removeClass("RsltR"), currApprRejBox.find(".IC-ar-dwn").addClass("grn").removeClass("red"), currApprRejBox.find("#zp_approval_confirm_btn").addClass("btn-success").removeClass("btn-danger"), hasApprvAllPerm && (currApprRejBox.find("#zp_form_approvalbtn_cont").prepend('<label class="checkbox PT25"><input type="checkbox"><span></span>' + ZPI18N.getString("zp.approveall") + "</label>"), currApprRejBox.find("#zp_form_approvalbtn_cont #zp_approval_confirm_btn").removeClass("MT53").addClass("MT12"))) : (currApprRejBox.addClass("RsltR").removeClass("RsltA"), currApprRejBox.find(".IC-ar-dwn").addClass("red").removeClass("grn"), currApprRejBox.find("#zp_approval_confirm_btn").addClass("btn-danger").removeClass("btn-success")), currApprRejBox.find("#zp_approval_confirm_btn").html(ZPI18N.getString("zp.confirm")), ZPForm.RecordApproval.pointApprovalArrow(currApprRejBox, footerObj.find('#zp_appproval_list [current="true"]')); else { var appRejBox = $('<div id="zp_approvereject_box" ' + (isInitial ? "" : 'type="' + type + '"') + 'class="ZPAprvCmts pad top ' + (isInitial ? "RsltP" : "1" === type ? "RsltA" : "RsltR") + ' Bclr"><i class="IC-cls-1px CP CmtsBoxCls"></i><div class="darrow" style="left: 0px;"></div><div class="CmtBox"><div class="row"><div class="col-sm-10"><label>' + ZPI18N.getString("zp.comment") + '&nbsp;:</label><textarea id="zp_approval_comment" class="form-control" rows="3" placeholder="' + ZPI18N.getString("zp.approvalcommentplaceholder") + '"></textarea></div>' + (isInitial ? '<div class="col-sm-2" id="zp_form_approvalbtn_cont" init="true"><button id="zp_approval_confirm_btn" class="btn DB btn-success MT20">' + ZPI18N.getString("zp.approve") + '</button><button id="zp_approval_reject_btn" class="btn DB btn-danger MT5" style="margin-left: 0px;">' + ZPI18N.getString("zp.reject") + "</button></div>" : "") + "</div></div></div>"); appRejBox.find(".IC-cls-1px").click(function () { $(this).parent().addClass("DN"); var approvalCont = $(this).siblings().find("#zp_form_approvalbtn_cont"), isAppInit = approvalCont.attr("init"), currentApp = Layout.Page.container.find(".RsltC").data().approverdtl; currentApp.erecno + "" === ZPeople.CURR_USER.usererec || currentApp.deptId + "" === ZPeople.CURR_USER.deptId || currentApp.roleId + "" === ZPeople.CURR_USER.roleId || -1 != ZPeople.CURR_USER.groupList.indexOf(currentApp.groupId + "") ? ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_appproval_approve_btn, #zp_appproval_reject_btn").show() : Layout.Page.container.find("#zp_approvereject_box").hide(), "true" === isAppInit && (approvalCont.removeAttr("init"), approvalCont.find("#zp_approval_confirm_btn").removeClass("MT20").addClass("MT53"), approvalCont.find("#zp_approval_reject_btn").remove(), $(this).parent().removeClass("RsltP"), approvalCont.siblings(".IC-ar-dwn").removeClass("blu")) }), appRejBox.find("#zp_approval_confirm_btn, #zp_approval_reject_btn").click(function () { var type = ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approvereject_box").attr("type"), isAllLevelApprove = !1; void 0 === type && (type = $(this).hasClass("btn-success") ? "1" : "0"), ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_form_approvalbtn_cont input").prop("checked") && (isAllLevelApprove = !0), $(this).parent().find("button").addClass("disabled"); var comment = ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_comment").val(); if (void 0 !== ZPForm.RecordApproval.APPROVAL_CALLBACK && "function" == typeof ZPForm.RecordApproval.APPROVAL_CALLBACK) ZPForm.RecordApproval.APPROVAL_CALLBACK(type, comment, isAllLevelApprove); else if (-1 !== Layout.Page.hash.indexOf("#attendance/regularization/") || -1 !== Layout.Page.hash.indexOf("#attendance/entry/") || -1 !== Layout.Page.hash.indexOf("mode:Attendance") || -1 !== Layout.Page.hash.indexOf("#home/dashboard/feeds") && $("#" + Layout.Page.pageId + " #ZPAtt_Reg_Details").hasClass("in")) Attendance.Reg.appRejRegDetails(type, isAllLevelApprove); else { var recIds = new Array(ZPForm.CURRFORM_PARAM.recordId); ZPForm.Record.approveReject(recIds, type, comment, isAllLevelApprove, ZPForm.RecordApproval.handleApproveRejectResponse, !0) } }), 0 === currApprRejBox.length ? footerObj.prepend(appRejBox) : currApprRejBox.replaceWith(appRejBox), footerObj.find('#zp_appproval_list [current="true"]').show(), ZPForm.RecordApproval.pointApprovalArrow(appRejBox, footerObj.find('#zp_appproval_list [current="true"]')) } footerObj.find("#zp_approval_detail_cont").is(":visible") && footerObj.find("#zp_approval_detail_cont").addClass("DN") }, handleApproveRejectResponse: function (resultData, params, otherDetails) { if (void 0 !== resultData && resultData.success) { if (void 0 !== resultData.approvalJson) { var recordObj = ZPForm.getSingleRecord(params.formId, otherDetails[0]); void 0 !== recordObj && void 0 !== recordObj.record && (recordObj.record.approvalDetails = resultData.approvalJson, recordObj.record.message.approvalStatus = resultData.approvalJson.currentApprovalStatus), void 0 !== ZPForm.CURRFORM_PARAM.formId && void 0 !== ZPForm.CURRFORM_PARAM.recordId && (ZPForm.RecordApproval.showApprovalHierarchy(resultData.approvalJson), ZPForm.isApprovalStarted() || Layout.Page.container.find("#zp_addedit_record_" + params.formId).find("#zp_form_editin_singlerec").addClass("DN")) } if ("selfservice/leave/list" === Layout.Page.currentmode && Leave.SelfService.View.get(), -1 != Layout.Page.hash.indexOf("#leavetracker/view-recordId") || -1 != Layout.Page.hash.indexOf("#selfservice/leave/list")) Leave.View.List.refresh = !0; else if (-1 != Layout.Page.hash.indexOf("#leavetracker/compensatory/view-recordId")) Leave.Compensatory.refresh = !0; else if (void 0 !== Layout.Page.urlparam.MODE && "Attendance" === Layout.Page.urlparam.MODE) { var recRow = Layout.Page.container.find("#zp_approval_rec_" + Layout.Page.urlparam.recordId); ZPApprovals.constructApproveOrReject(recRow, resultData.approvalJson.currentApprovalStatus) } else -1 !== Layout.Page.hash.indexOf("#attendance/entry/tabularview") && Attendance.Entry.getList(Attendance.Entry.selectedView, Attendance.Entry.preMonth) } }, showApprovedDetails: function (userObj) { var userApprData = $(userObj).data("approverdtl"), userDtl = ZPeople.getUserDetailsById(userApprData.erecno), appDtlObj = ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approval_detail_cont"); ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approvereject_box").is(":visible") && ZPForm.RecordApproval.APPROVER_FOOTER.find("#zp_approvereject_box").addClass("DN"), 0 === appDtlObj.length ? (appDtlObj = $('<div class="ZPAprvCmts RsltA top Bclr" id="zp_approval_detail_cont"><i class="IC-cls-1px CP CmtsBoxCls"></i><div class="darrow" style="left: 0px;"></div><div class="CmtBox"><div class="row"><div class="col-sm-4"><div class="uinfo"><div class="itms" id="zp_approver_name"></div><div class="itms" id="zp_approver_email"></div><div class="itms DN" id="zp_approver_department"></div><div class="itms DN" id="zp_approver_extension"></div></div></div><div class="col-sm-7"><div class="PT15"><label><span id="zp_apprstatus_str"></span> <span class="dgry">' + ZPI18N.getString("zp.on") + '</span> <span class="dgry AprvTym " id="zp_apprrej_time"></span></label><div class="form-control P0I ZPtxtareaDiv B0I"><span id="zp_form_apprdtl_comment"></span></div></div></div></div></div></div>'), appDtlObj.find(".CmtsBoxCls").click(function () { $(this).parent().addClass("DN") }), ZPForm.RecordApproval.APPROVER_FOOTER.prepend(appDtlObj)) : appDtlObj.removeClass("DN"), appDtlObj.addClass(0 === userApprData.approvalStatus ? "RsltR" : " RsltA").removeClass(0 === userApprData.approvalStatus ? "RsltA" : " RsltR"), appDtlObj.find(".ZPArwDir").addClass(0 === userApprData.approvalStatus ? "red" : " grn").removeClass(0 === userApprData.approvalStatus ? "grn" : " red"), appDtlObj.find("#zp_approver_name").html('<i class="IC-usr-fill S16"></i><span><i class="gry">' + userDtl.empid + "</i> " + userDtl.name + "</span>"), appDtlObj.find("#zp_approver_email").html('<i class="IC-mail2 S18"></i><span>' + userDtl.email + "</span>"), void 0 !== userDtl.deptName ? appDtlObj.find("#zp_approver_department").html('<i class="IC-usr-grp S20"></i><span>' + userDtl.deptName + "</span>").removeClass("DN") : appDtlObj.find("#zp_approver_department").addClass("DN"), void 0 !== userDtl.extension && "" !== userDtl.extension ? appDtlObj.find("#zp_approver_extension").html('<i class="IC-exten S16"></i><span>' + userDtl.extension + "</span>").removeClass("DN") : appDtlObj.find("#zp_approver_extension").addClass("DN"), appDtlObj.find("#zp_apprstatus_str").html(userApprData.approvalStatusStr), appDtlObj.find("#zp_apprrej_time").html(userApprData.approvedTime), appDtlObj.find("#zp_form_apprdtl_comment").html(userApprData.comment), ZPForm.RecordApproval.pointApprovalArrow(appDtlObj, $(userObj)) }, pointApprovalArrow: function (appDtlObj, userObj) { appDtlObj.find(".darrow").animate({ left: userObj.position().left + 43 + "px" }, 400) } }, ZPForm.Validation = { IS_EMPTY: 1001, IS_NOT_SELECTED: 1002, IS_INVALID: 1003, INVALID_NUMBER: 1004, INVALID_EMAIL: 1005, INVALID_DATE: 1006, ROUNDOFF_DECIMAL: 1007, INVALID_DECIMALPOINT: 1008, FILE_SIZE_EXCEED: 1009, IMAGE_FORMAT_NOTALLOWED: 1010, VALUE_LENGTH_EXCEED: 1011, NOT_IN_RANGE: 1012, SMALLPASSWORDLENGTH: 1013, PASSWORDEMPTY: 1014, PWDPOLICYERR: 1015, validateForm: function () { var result = { errorList: [], params: {} }, curFormComp = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; if (void 0 !== curFormComp) { $.each(curFormComp.message.formComponentDetails, function () { void 0 !== this.column1 && ZPForm.Validation.validate(this.column1, this.isTabular, result), void 0 !== this.column2 && ZPForm.Validation.validate(this.column2, this.isTabular, result) }); var invType = Layout.Page.container.find("[name=invitation]:checked").val(), passWord = null, tableName = ZPForm.getTableName(); "P_Employee" === tableName && "4" == invType && (passWord = Layout.Page.container.find("[name=temppwd]").val(), ZPSetupCommon.isEmpty(passWord) ? result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.PASSWORDEMPTY, this, !1, null)) : $("div.dverrormsg").remove(), !ZPSetupCommon.isEmpty(passWord) && passWord.length < 8 && result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.SMALLPASSWORDLENGTH, this, !1, null)), !ZPSetupCommon.isEmpty(passWord) && User.validatePwdPolicy(passWord) && (result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.PWDPOLICYERR, this, !1, null)), $("#empFormPwd").mouseover(), setTimeout(function () { $("#empFormPwd").popover("hide") }, 3e3))); var isMandatory = !0; if (ZPForm.Record.isDraft && (isMandatory = !1), isMandatory && ("P_SelfAppraisal" == tableName || "P_MultiRater" == tableName || "P_PerformanceAppraisal" == tableName) && !Appraisal.KRAVsGoals.validateModuleRating(!0)) { Appraisal.KRAVsGoals.COUNTVAL = !1; var errMsg = {}; errMsg.AppraisalComponent_Error = ZPI18N.getString("zp.entervalidinput"); var resutlObj = {}; resutlObj.message = errMsg, result.errorList.push(resutlObj) } } return result }, validate: function (fields, isTabular, result) { var formPageCont = ZPForm.FIELD_LAYOUT, isMandatory = !0; return (ZPForm.Record.isDraft || ZPForm.isDraftrec) && (isMandatory = !1), $.each(fields, function () { var labelName = this.labelName, fieldType = this.fieldType, fldCreateFun = ZPForm.CURRFORM_PARAM.createFldFunctions; if (void 0 !== fldCreateFun && void 0 !== fldCreateFun[labelName] && "function" == typeof fldCreateFun[labelName]) { var errorMsg = fldCreateFun[labelName](this, "VALIDATE"); "VALID" !== errorMsg ? result.errorList.push(errorMsg) : "" } else { var formField = formPageCont.find(":input[name=" + labelName + "]"); if (0 === formField.length) return; var value; if (fieldType === ZPForm.Field.AUTONUMBER || fieldType === ZPForm.Field.PLAIN_TEXT) return; if (isTabular) { var formComp = this; $.each(formField, function (index) { var returnObj = ZPForm.Validation.validateField(result, formComp, $(this), isTabular, index + 1); void 0 !== returnObj && (value = returnObj.value, result = returnObj.result, (void 0 === value || null === value) && (value = ""), fieldType !== ZPForm.Field.DATE_TIME || ZPUtil.Validation.isEmpty(value) || (value = Calendar.convertHourFormat(value)), ZPForm.Record.putParamForTabular(result.params, labelName, value)) }) } else { var returnObj = ZPForm.Validation.validateField(result, this, formField, isTabular); if (void 0 !== returnObj) { if (value = returnObj.value, result = returnObj.result, this.displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE) { if (null !== value && value.length > 0) value = this.fieldType == ZPForm.Field.LOOKUP ? value.replace(/,/g, ";") : value.join(";"); else if (isMandatory) { var isActionHidden = formField.parents("[isActionHidden=true]").length > 0; if (!isActionHidden && ZPForm.Field.isMandatory(this.isMandatory, labelName)) return void result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.IS_NOT_SELECTED, this, isTabular)) } } else fieldType !== ZPForm.Field.DATE_TIME || ZPUtil.Validation.isEmpty(value) || (value = Calendar.convertHourFormat(value)); if ((this.fieldType === ZPForm.Field.FILE_UPLOAD || this.fieldType === ZPForm.Field.IMAGE) && (value = "", 0 !== formField.siblings("#filename").length && (value = formField.siblings("#filename").val())), this.fieldType === ZPForm.Field.MULTI_FILE_UPLOAD) { if (ZPForm.isAddMode()) return; if (value = [], 0 !== formField.siblings("#filename").length) { var ele = formField.closest("div[folabel=" + labelName + "]").find('div[id^="zp_form_fileuploadfield_"]'); if ($.each(ele, function () { var acls = $(this).find('a[id^="filepa_"]'), ishid = $(acls).siblings().attr("change"); if ("true" == ishid) { var filepa = $(acls).attr("filepath"); value.push(filepa) } }), 0 == value.length) return; value = JSON.stringify(value) } } result.params[labelName] = value } } } }), result }, validateField: function (result, formComp, formField, isTabular, rowCnt) { try { var value = formField.val(), fieldType = formComp.fieldType, labelName = formComp.labelName, displayType = formComp.displayType, isMandatory = ZPForm.Field.isMandatory(formComp.isMandatory, labelName); (ZPForm.Record.isDraft || ZPForm.isDraftrec) && (isMandatory = !1); var isActionHidden = (Layout.Page.container.find("[name=invitation]:checked").val(), formField.parents("[isActionHidden=true]").length > 0); if (fieldType !== ZPForm.Field.PICKLIST && fieldType !== ZPForm.Field.LOOKUP && fieldType !== ZPForm.Field.CHECK_BOX || displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE) (fieldType === ZPForm.Field.IMAGE || fieldType === ZPForm.Field.FILE_UPLOAD) && (0 !== formField.siblings("#filename").length && (value = formField.siblings("#filename").val()), $.each(ZPForm.FORMFILEUPLOAD, function (index, docObj) { docObj.labelName == formField.attr("name") && (value = docObj.docName) })), !isActionHidden && isMandatory && (displayType !== ZPForm.Field.MULTISELECT_DISPLYTYPE && ZPUtil.Validation.isEmpty(value) || displayType === ZPForm.Field.MULTISELECT_DISPLYTYPE && (null === value || 0 === value.length)) && result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.IS_EMPTY, formComp, isTabular, rowCnt)); else { var checkFlag = !1; fieldType === ZPForm.Field.CHECK_BOX ? (checkFlag = formField.is(":checked"), value = checkFlag) : (value = "", $.each(formField, function () { if (displayType === ZPForm.Field.SELECT_DISPLYTYPE) value = $(this).val(); else if (this.checked === !0) { if (checkFlag = !0, displayType === ZPForm.Field.RADIO_DISPLYTYPE) return value = $(this).val(), !1; value += ("" !== value.trim() ? ";" : "") + $(this).val() } })), !isActionHidden && isMandatory && (!checkFlag && displayType !== ZPForm.Field.SELECT_DISPLYTYPE || displayType === ZPForm.Field.SELECT_DISPLYTYPE && ZPUtil.Validation.isEmpty(value)) && result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.IS_NOT_SELECTED, formComp, isTabular, rowCnt)) } if (!isActionHidden && displayType !== ZPForm.Field.MULTISELECT_DISPLYTYPE && fieldType !== ZPForm.Field.CHECK_BOX && !ZPUtil.Validation.isEmpty(value)) { if (formComp.maxLength && value.length > formComp.maxLength && result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.VALUE_LENGTH_EXCEED, formComp, isTabular, rowCnt)), fieldType === ZPForm.Field.DECIMAL || fieldType === ZPForm.Field.CURRENCY) { var decValDtl = ZPUtil.Validation.isDecimal(value, formComp.decimalLength); decValDtl.isSuccess || void 0 === decValDtl.errorCode || result.errorList.push(ZPForm.Validation.createError(decValDtl.errorCode, formComp, isTabular, rowCnt)) } else fieldType !== ZPForm.Field.NUMBER || ZPUtil.Validation.isNumber(value) ? fieldType !== ZPForm.Field.EMAIL_ADDRESS || ZPUtil.Validation.isEmail(value, "P_EmployeeLeave" == ZPForm.getTableName() && "TeamEmailID" == labelName) ? fieldType !== ZPForm.Field.DATE || ZPUtil.Validation.isDate(value) ? (fieldType === ZPForm.Field.IMAGE || fieldType === ZPForm.Field.FILE_UPLOAD) && (fieldType !== ZPForm.Field.IMAGE || ZPUtil.isAllowedFormatForImage(value) || result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.IMAGE_FORMAT_NOTALLOWED, formComp, isTabular, rowCnt))) : result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.INVALID_DATE, formComp, isTabular, rowCnt)) : result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.INVALID_EMAIL, formComp, isTabular, rowCnt)) : result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.INVALID_NUMBER, formComp, isTabular, rowCnt)); formComp.minimumValue && formComp.maximumValue && !ZPUtil.isInRange(parseInt(value), parseInt(formComp.minimumValue), parseInt(formComp.maximumValue)) && result.errorList.push(ZPForm.Validation.createError(ZPForm.Validation.NOT_IN_RANGE, formComp, isTabular, rowCnt)) } var returnObj = { value: value, result: result }; return returnObj } catch (e) { } }, createError: function (errorCode, fieldDtl, isTabular, rowCnt) { var resultObj = {}, errorObj = {}, labelName = fieldDtl.labelName, fieldType = fieldDtl.fieldType, args = new Array(fieldDtl.displayName); return errorCode === ZPForm.Validation.IS_EMPTY ? errorObj[labelName] = ZPI18N.getString("zp.entervalforfield", args) : errorCode === ZPForm.Validation.IS_NOT_SELECTED ? fieldType === ZPForm.Field.CHECK_BOX ? errorObj[labelName] = ZPI18N.getString("zp.checkvalforcheckbox", args) : errorObj[labelName] = ZPI18N.getString("zp.selvalforfield", args) : errorCode === ZPForm.Validation.INVALID_NUMBER ? errorObj[labelName] = ZPI18N.getString("zp.entervalidnumber", args) : errorCode === ZPForm.Validation.INVALID_EMAIL ? errorObj[labelName] = ZPI18N.getString("zp.entervalidemail", args) : errorCode === ZPForm.Validation.INVALID_DATE ? errorObj[labelName] = ZPI18N.getString("zp.entervaliddate", args) : errorCode === ZPForm.Validation.ROUNDOFF_DECIMAL ? (args[1] = fieldDtl.decimalLength, errorObj[labelName] = ZPI18N.getString("zp.rounddecimal", args)) : errorCode === ZPForm.Validation.INVALID_DECIMALPOINT ? errorObj[labelName] = ZPI18N.getString("zp.entervaliddecimal", args) : errorCode === ZPForm.Validation.FILE_SIZE_EXCEED ? fieldType === ZPForm.Field.IMAGE ? errorObj[labelName] = ZPI18N.getString("zp.imagesizeexceed", args) : errorObj[labelName] = ZPI18N.getString("zp.filelimitexceeded", ["5MB"]) : errorCode === ZPForm.Validation.IMAGE_FORMAT_NOTALLOWED ? errorObj[labelName] = ZPI18N.getString("zp.allowedimagetypes", args) : errorCode === ZPForm.Validation.VALUE_LENGTH_EXCEED ? (args[1] = fieldDtl.maxLength, errorObj[labelName] = ZPI18N.getString("zp.fieldlength", args)) : errorCode === ZPForm.Validation.NOT_IN_RANGE ? (args[0] = fieldDtl.minimumValue, args[1] = fieldDtl.maximumValue, errorObj[labelName] = ZPI18N.getString("zp.entervalinrange", args)) : errorCode === ZPForm.Validation.SMALLPASSWORDLENGTH ? errorObj["zp.passwdsmall"] = ZPI18N.getString("zp.passwordlengshort") : errorCode === ZPForm.Validation.PASSWORDEMPTY ? errorObj["zp.passwdempty"] = ZPI18N.getString("zp.enterpasswd") : errorCode === ZPForm.Validation.PWDPOLICYERR && (errorObj["zp.pwdpolicyerr"] = ZPI18N.getString("zp.passwordpolicy")), isTabular && (errorObj.row = rowCnt), resultObj.message = errorObj, resultObj }, resetFormError: function () { ZPForm.FIELD_LAYOUT.find("[id=error_message]").remove(), 1 === ZPForm.getPaginationType() && (ZPForm.FIELD_LAYOUT.find("#zp_form_section_list").find(".IC-info").parent().removeClass("err"), ZPForm.FIELD_LAYOUT.find("#zp_form_section_list").find(".IC-info, .IC-rou-tik").remove()) }, showFormFieldError: function (errorData, code) { if ($.each(errorData, function () { if (void 0 !== this.message) for (labelName in this.message) if ("Form_Error" === labelName || "Payment_Error" === labelName || "Security_Error" === labelName) ZPeople.Message.showFailureMsg(this.message[labelName]); else if ("zp.passwdempty" === labelName || "zp.passwdsmall" === labelName || "zp.pwdpolicyerr" === labelName) { var errorKeptObj = $("div#tempPwd"); ZPSetupCommon.showErr(this.message[labelName], errorKeptObj, "dverrormsg") } else if ("AppraisalComponent_Error" === labelName) Appraisal.KRAVsGoals.showError(this.message[labelName]); else if ("row" !== labelName) { var customvalidationtabsecerror = this.message[labelName]; if (7353 == code && customvalidationtabsecerror.constructor === [].constructor) for (customvalidationtabsecerrorlab in customvalidationtabsecerror) { var name = customvalidationtabsecerror[customvalidationtabsecerrorlab].name; ZPForm.Field.markFieldAsError(name, customvalidationtabsecerror[customvalidationtabsecerrorlab]) } else ZPForm.Field.markFieldAsError(labelName, this.message) } }), 1 === ZPForm.getPaginationType()) { ZPForm.markSectionError(), $(ZPForm.LAYOUT.find('li[id^="zp_form_section_"][class^="sel"]')[0]).removeClass("sel"), $(ZPForm.LAYOUT.find('li[id^="zp_form_section_"][class^="err"]')[0]).addClass("sel"); var secid = $(ZPForm.LAYOUT.find('li[id^="zp_form_section_"][class^="err"]')[0]).attr("secid"); if (void 0 == secid) return; var id = "zp_section_fields_" + secid; ZPForm.LAYOUT.find("div[id^='zp_section_fields_']").not("#" + id).addClass("DN"), ZPForm.LAYOUT.find("#" + id).removeClass("DN") } $(ZPForm.LAYOUT.find(".zp-err-msg")).first().parent(); void 0 != $(ZPForm.LAYOUT.find(".zp-err-msg"))[0] && $(ZPForm.LAYOUT.find(".zp-err-msg"))[0].scrollIntoView({ behavior: "smooth" }) } }, ZPForm.Field.Edit = { FORMCOMP_ID: null, FORMCOMP_DATA: null, showOption: function (Obj) { if (ZPForm.isApprovalStarted()) { var fieldDtl = $(Obj).data(), fieldObj = $(Obj).find("#zp_field_outer_" + fieldDtl.formComponentId); if (null !== ZPForm.Field.Edit.FORMCOMP_ID) return void fieldObj.attr("ishover", !0); var tableName = ZPForm.getTableName(); if ("P_PerformanceAppraisal" !== tableName && "P_SelfAppraisal" !== tableName && "P_MultiRater" !== tableName && "P_MultiRater_Approval" !== tableName && 0 == fieldObj.parent().find("#zp_formfield_edit_opt").length && ("P_Location" !== ZPForm.getTableName() || "Country" !== fieldDtl.componentName && "State" !== fieldDtl.componentName)) { var editObj = $('<div class="ZPActIcn"><i id="zp_formfield_edit_opt" class="IC-pen"></i></div>'); editObj.click(function () { ZPForm.Field.Edit.FORMCOMP_ID = fieldDtl.formComponentId, ZPForm.Field.Edit.showEdit(), $(Obj).addClass("active") }), fieldObj.parent().append(editObj) } } else ZPForm.Field.Edit.hideOption(Obj) }, hideOption: function (Obj) { return null !== ZPForm.Field.Edit.FORMCOMP_ID ? void $(Obj).find("#zp_field_outer_" + ZPForm.Field.Edit.FORMCOMP_ID).attr("ishover", !1) : void $(Obj).parent().find("#zp_formfield_edit_opt").parent().remove() }, showEdit: function () { if (null !== ZPForm.Field.Edit.FORMCOMP_ID) { var formComp = ZPForm.Field.getFieldComponent(ZPForm.Field.Edit.FORMCOMP_ID), fieldVal = {}; if (ZPForm.Field.Edit.FORM_LOOKUP_RELDATA = null, void 0 !== formComp) if (formComp.fieldType === ZPForm.Field.LOOKUP && (ZPForm.getLookupRefreshStatus(formComp.formComponentId, formComp.referredFormId) || formComp.isPrimary && void 0 == formComp.EditOptions) || void 0 != formComp.dependentFiledList && 0 != formComp.dependentFiledList.length) { if (void 0 != formComp.dependentFiledList && 0 != formComp.dependentFiledList.length) for (var i = 0; i < formComp.dependentFiledList.length; i++) { var lufcid = formComp.dependentFiledList[i], id = ZPForm.Field.getFieldValueData(lufcid), value = id.componentValue_ID; fieldVal[lufcid] = value } ZPForm.fetchLookUpData([ZPForm.Field.Edit.FORMCOMP_ID], ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId], fieldVal) } else ZPForm.Field.Edit.showFieldEditable() } else ZPForm.Field.Edit.FORMCOMP_ID = null }, showFieldEditable: function () { var formComp = ZPForm.Field.getFieldComponent(ZPForm.Field.Edit.FORMCOMP_ID); ZPForm.Field.Edit.FORMCOMP_DATA = formComp; var fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + ZPForm.Field.Edit.FORMCOMP_ID), fieldValueData = ZPForm.Field.getFieldValueData(ZPForm.Field.Edit.FORMCOMP_ID), value = fieldValueData.componentValue + "", labelName = fieldValueData.componentName; fieldObj.parent().find("#zp_formfield_edit_opt").parent().remove(); var htmlData = $('<span id="zp_fieldedit_comp">' + ZPForm.Field.create(formComp, value) + ZPForm.Field.isQuickAddForm(formComp, !0) + '<a id="zp_formedit_picklistquickadd" class="IC-add-form DN"></a><a id="zp_formedit_submit" class="IC-tick"></a><a id="zp_formedit_cancel" class="IC-cls"></a></div></span>'); formComp.fieldType !== ZPForm.Field.PICKLIST || ZPForm.isFromSetup() !== !1 || !ZPForm.isRecordAdmin() || "P_Employee" === ZPForm.getTableName() && "Employeestatus" === formComp.labelName || "P_ClientDetails" === ZPForm.getTableName() && "Currency" === formComp.labelName || "P_Goals" === ZPForm.getTableName() && "Priority" === formComp.labelName || htmlData.find("#zp_formedit_picklistquickadd").removeClass("DN"), fieldObj.find("#zp_fieldedit_comp").length > 0 ? fieldObj.find("#zp_fieldedit_comp").replaceWith(htmlData) : fieldObj.append(htmlData), "true" == fieldObj.attr("isconditionfield") && (fieldObj.find("select").length > 0 ? fieldObj.find("select").change(function (event) { ZPFRules.setEmptyFcs.length > 0 && (ZPFRules.setEmptyFcs = []), ZPFRules.makeExecutefalse(), ZPFRules.evaluateRulesForField(this) }) : fieldObj.find("input").length > 0 ? fieldObj.attr("displaytype") == ZPForm.Field.RADIO_DISPLYTYPE ? fieldObj.find("input").click(function (event) { ZPFRules.setEmptyFcs.length > 0 && (ZPFRules.setEmptyFcs = []), ZPFRules.evaluateRulesForField(this) }) : fieldObj.find("input").change(function (event) { ZPFRules.setEmptyFcs.length > 0 && (ZPFRules.setEmptyFcs = []), ZPFRules.evaluateRulesForField(this) }) : fieldObj.find("textarea").length > 0 && fieldObj.find("textarea").change(function (event) { ZPFRules.setEmptyFcs.length > 0 && (ZPFRules.setEmptyFcs = []), ZPFRules.makeExecutefalse(), ZPFRules.evaluateRulesForField(this) })), htmlData.find("#zp_formedit_submit").click(function () { htmlData.find("#zp_formedit_submit").unbind("click"), ZPForm.Field.Edit.callbackForSingleFieldEdit() }), htmlData.find("#zp_formedit_cancel").click(function () { ZPForm.Field.Edit.cancel() }), htmlData.find("#zp_formedit_picklistquickadd").click(function () { ZPForm.PicklistQuickAdd.createQuickAddPopup() }), formComp.fieldType != ZPForm.Field.DATE_TIME || ZPForm.isFromSetup() ? formComp.fieldType !== ZPForm.Field.PICKLIST && formComp.fieldType !== ZPForm.Field.LOOKUP && formComp.fieldType !== ZPForm.Field.BLOODGROUP && formComp.fieldType !== ZPForm.Field.GENDER && formComp.fieldType !== ZPForm.Field.COUNTRY && formComp.fieldType !== ZPForm.Field.STATES && formComp.fieldType !== ZPForm.Field.TIME_ZONE && fieldObj.find(":input[name='" + labelName + "']").attr("class", "form-control zptxt-edit") : fieldObj.find(":input[name='" + labelName + "']").attr("class", "form-control Edfld"), fieldObj.find(":input[name='" + labelName + "'][type=text]").keyup(function (event) { 13 === event.keyCode && ZPForm.Field.Edit.submit() }), ZPForm.registerFieldChangeFun(htmlData), fieldObj.find(":input[name='" + labelName + "']").focus(), fieldObj.find("span:first").addClass("DN"), ZPForm.PAGEMODE || fieldObj.removeClass("PT5"), ZPForm.setValueForFields([fieldValueData], !0) }, callbackForSingleFieldEdit: function () { if (ZPForm.isAllowedToEdit([ZPForm.Field.Edit.FORMCOMP_ID])) { var key = "zp.editapprovalconfirmmsg"; ZPForm.CONF.approvalSettingsDetails.isVerifySend && (key = "zp.editapprsendconfirmmsg"), ZPeople.BSModal.confirm(ZPForm.Field.Edit.submit, ZPI18N.getString("zp.confirm"), ZPI18N.getString(key)), $("#" + Layout.Page.pageId).find("#zp_modal_confirmpop").find("button").not("#zp_modal_blubtn").click(function () { ZPForm.Field.Edit.cancel() }) } else ZPForm.Field.Edit.submit() }, submit: function () { if (ZPForm.IS_SUBMIT = !0, null == ZPForm.Field.Edit.FORMCOMP_ID && null != ZPForm.isFromQuickAddEditFormComID) { ZPForm.Field.Edit.FORMCOMP_ID = ZPForm.isFromQuickAddEditFormComID, ZPForm.CURRFORM_PARAM = ZPForm_MAIN_PARAM; var formCompData = ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId]; ZPForm.updateFormConf(formCompData.formDetails), ZPForm.LAYOUT = Layout.Page.container.find("#zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId), ZPForm.FIELD_LAYOUT = Layout.Page.container.find("#zp_addedit_record_" + ZPForm.CURRFORM_PARAM.formId).find("#zp_form_body"), ZPForm.Field.Edit.FORMCOMP_DATA = ZPForm.Field.getFieldComponent(ZPForm.Field.Edit.FORMCOMP_ID) } var fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + ZPForm.Field.Edit.FORMCOMP_ID), labelName = ZPForm.Field.Edit.FORMCOMP_DATA.labelName, tableName = (fieldObj.find(":input[name='" + labelName + "']"), ZPForm.getTableName()), result = { errorList: [], params: { loginUserZUID: _LOGGEDIN_ZUID, zp_tableName: tableName, zp_formId: ZPForm.CURRFORM_PARAM.formId, zp_mode: "updateRecord", zp_recordId: ZPForm.CURRFORM_PARAM.recordId, isSingleEdit: !0, fcId: ZPForm.Field.Edit.FORMCOMP_ID } }; return ZPForm.Validation.validate([ZPForm.Field.Edit.FORMCOMP_DATA], !1, result), result.errorList.length > 0 ? (ZPForm.Validation.resetFormError(), ZPForm.Validation.showFormFieldError(result.errorList), Layout.Page.container.find("#zp_forms_add_btn").removeClass("disabled"), void Layout.Page.container.find("#zp_formedit_submit").click(function () { Layout.Page.container.find("#zp_formedit_submit").unbind("click"), ZPForm.Field.Edit.callbackForSingleFieldEdit() })) : (result.params.isDraft = ZPForm.isDraftrec, void ZPeople.Request.send("/addUpdateRecord.zp", result.params, ZPForm.Field.Edit.successResponse)) }, cancel: function (isSave) { if (null !== ZPForm.Field.Edit.FORMCOMP_ID) { var fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + ZPForm.Field.Edit.FORMCOMP_ID); if (fieldObj.removeClass("zpval").parent().mouseenter(), ZPForm.PAGEMODE || fieldObj.addClass("PT5"), fieldObj.find("#zp_fieldedit_comp").addClass("DN"), fieldObj.find("span:first").removeClass("DN"), fieldObj.parent().removeClass("active"), !isSave) { var fieldValueData = ZPForm.Field.getFieldValueData(ZPForm.Field.Edit.FORMCOMP_ID); void 0 != fieldValueData && void 0 !== fieldValueData.componentValue_RelatedFields && ZPForm.Field.setRelatedFieldsData(fieldValueData.componentValue_RelatedFields, ZPForm.Field.Edit.FORMCOMP_ID) } ZPForm.Field.Edit.FORMCOMP_ID = null, ZPForm.Field.Edit.FORMCOMP_DATA = null, ZPForm.Field.Edit.FORM_LOOKUP_RELDATA = null, "true" === fieldObj.attr("ishover") && fieldObj.removeClass("zpval").parent().mouseenter(), ZPForm.Validation.resetFormError(), isSave || ZPFRules.evaluateRulesForField(fieldObj) } }, successResponse: function (data, params) { if (data.length > 0) if (7e3 === data[0].code) { var value = data[0][ZPForm.Field.Edit.FORMCOMP_DATA.labelName]; if ("" != value && ZPForm.Field.Edit.FORMCOMP_DATA.isPrimary && !ZPForm.isRecordAdmin() && "P_Task" !== params.zp_tableName) { ZPForm.Field.getFieldValueData(ZPForm.Field.Edit.FORMCOMP_ID).isEditable = !1; var fieldObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + ZPForm.Field.Edit.FORMCOMP_ID); fieldObj.parent().unbind("mouseenter") } if (ZPForm.Field.Edit.FORMCOMP_DATA.fieldType === ZPForm.Field.TEXT_AREA && (value = value.replace(/\n/g, "<br />")), value = ZPForm.Field.setValue(ZPForm.Field.Edit.FORMCOMP_DATA, value), ZPForm.Field.Edit.cancel(!0), ZPForm.CURRFORM_PARAM.disableUrlTrack ? ZPForm.CURRFORM_PARAM.refreshView = !0 : ZPView.refresh(!1, !1), "P_Employee" === params.zp_tableName && ZPForm.isViewMode() && SelfService.Info.refreshUserDetails(), ZPForm.Record.updateModifiedInfo(data[0].mInfo), data[0].hasOwnProperty("deleteRows") && ZPFRules.removeDeletedRows(data[0].deleteRows), ZPFRules.setEmptyValue(), "P_Task" == params.zp_tableName && ZPTasks.fillDetailViewPage(), ZPForm.isApprovalEnabled() && ZPForm.CONF.approvalSettingsDetails.isEditAllow && !ZPForm.isDraftrec && (ZPApprovals.showApprovalHeader(data[0].approvalDetails.currentApprovalStatus, data[0].approvalDetails.isOwner, data[0].approvalDetails.isPrimaryAppr), ZPApprovals.formListCallBack(data[0].pkId, data[0].approvalDetails.currentApprovalStatus), ZPApprovals.APPROVAL_DETAILS[data[0].pkId] = data[0].approvalDetails), void 0 != data[0].warningMsg && "" != data[0].warningMsg) { var msgkey = ZPI18N.getString("zp.recordupdatedsuccessfully"); msgkey += "<br>" + ZPI18N.getString("zp.note") + ":" + data[0].warningMsg, ZPeople.Message.showWarningMsg(msgkey) } else ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.recordupdatedsuccessfully")) } else data[0].code === zpconst.ResponseCodes.PERMISSION_DENIED_TO_ADD_OR_EDIT_DATA ? ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.permdeniedtoeditfield")) : (ZPForm.Validation.resetFormError(), ZPForm.Validation.showFormFieldError(data)); else "object" == typeof data && 7e3 !== data.code && ZPeople.Message.showFailureMsg(data.message); Layout.Page.container.find("#zp_formedit_submit").click(function () { Layout.Page.container.find("#zp_formedit_submit").unbind("click"), ZPForm.Field.Edit.callbackForSingleFieldEdit() }) } }, ZPForm.PicklistQuickAdd = { CONTAINER: null, options: {}, ISSINGLEEDIT: !1, URL: "/addNewPickListOption.do", TEMPLATE: '<div class="modal DelMdl ZPsecModal" id="quickadd" tabindex="-1" role="dialog" style="display:block"><div class="modal-dialog"><div class="modal-content"> <div class="modal-header"><a class="close IC-cls-1px red" buttonaction="dismiss" data-dismiss="modal" aria-label="Close" ></a><h4 class="modal-title" id="exampleModalLabel">' + ZPI18N.getString("zp.quickadd") + '</h4></div><div class="modal-body"><div class="dvtabsfrm"><div class="form-group clearfix"><div class="col-md-10 PL0"><label class="control-label col-md-3 MT5">' + ZPI18N.getString("zp.addvalue") + '</label><div class="col-md-8"><input placeholder="' + ZPI18N.getString("zp.picklist.placeholder") + '" id="zp_form_quickadd_text" class="form-control frmchgname" type="text" value="" ><div id="pkOptionError" class="red PT5 S12"></div></div></div></div><div class="PR30"><ul class="list-group chglist" id="sortable"> <li  class="list-group-item" id="newOption" style="display:none"><i class="IC-drag MR10"></i><span ></span><input value="Email" class="form-control frmchgname DN" type="text"></li></ul></div></div></div><div class="modal-footer" style="text-align:left"><a class="btn btn-primary" id="zp_quickadd_done" buttonname="done" >' + ZPI18N.getString("zp.done") + '</a><a class="btn btn-default" buttonaction="dismiss"   data-dismiss="modal">' + ZPI18N.getString("zp.cancel") + "</a></div></div></div></div>", createQuickAddPopup: function (formcmp) { var fcid; ZPForm.PicklistQuickAdd.ISSINGLEEDIT = !1, void 0 === formcmp && null !== ZPForm.Field.Edit.FORMCOMP_ID ? (fcid = ZPForm.Field.Edit.FORMCOMP_ID, ZPForm.PicklistQuickAdd.ISSINGLEEDIT = !0) : fcid = $(formcmp).attr("fcid"); var popUp = ZPForm.PicklistQuickAdd.TEMPLATE; popUp = $(popUp), Layout.Page.container.append(popUp), ZPForm.PicklistQuickAdd.CONTAINER = Layout.Page.container.find("#quickadd"); var compDetails = ZPForm.Field.getFieldComponent(fcid); ZPForm.PicklistQuickAdd.options = compDetails.Options, $.each(ZPForm.PicklistQuickAdd.options, function (key, value) { var list = ZPForm.PicklistQuickAdd.CONTAINER.find("li").last(), newList = $(list).clone(); $(list).attr("style", "display:all"), $(list).attr("id", value), $(list).find("span").html(value), ZPForm.PicklistQuickAdd.CONTAINER.find("ul").append(newList) }), popUp.draggable({ handle: popUp.find(".modal-header") }), popUp.modal({ backdrop: "static", keyboard: !1 }), popUp.find("#sortable").sortable(), popUp.find("#sortable").disableSelection(), popUp.find("[buttonname=done]").click(function () { ZPForm.PicklistQuickAdd.addPickOption(fcid) }), popUp.find("#zp_form_quickadd_text").keyup(function (event) { ZPForm.PicklistQuickAdd.CONTAINER.find("#pkOptionError").text(""), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text($(this).val()), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption").attr("style", "display:all"), "" === ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text() && (ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption").attr("style", "display:none"), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text("")), 13 === event.keyCode && ZPForm.PicklistQuickAdd.addPickOption(fcid) }), popUp.on("hidden.bs.modal", function () { ZPForm.PicklistQuickAdd.CONTAINER.remove() }) }, addPickOption: function (fcid) { var newOption = ZPForm.PicklistQuickAdd.CONTAINER.find(" #newOption span").html(); "" === newOption ? ZPForm.PicklistQuickAdd.CONTAINER.find(" #pkOptionError").text(ZPI18N.getString("zp.entervalue")) : -1 !== $.inArray(newOption, ZPForm.PicklistQuickAdd.options) ? ZPForm.PicklistQuickAdd.CONTAINER.find(" #pkOptionError").text(ZPI18N.getString("zp.duplicateoption")) : ZPForm.PicklistQuickAdd.updateFieldOptions(fcid) }, updateFieldOptionsResponse: function (resultdata, params) { var fcId = params.formCmpId.toString(); if ("object" == typeof resultdata) if (void 0 !== resultdata.ERROR) ZPForm.PicklistQuickAdd.CONTAINER.find("#pkOptionError").text(resultdata.ERROR), ZPForm.PicklistQuickAdd.CONTAINER.find("#zp_quickadd_done").removeClass("disabled"), ZPForm.PicklistQuickAdd.CONTAINER.find("#zp_form_quickadd_text").keyup(function (event) { ZPForm.PicklistQuickAdd.CONTAINER.find("#pkOptionError").text(""), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text($(this).val()), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption").attr("style", "display:all"), "" === ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text() && (ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption").attr("style", "display:none"), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text("")), 13 === event.keyCode && ZPForm.PicklistQuickAdd.addPickOption(fcId) }); else if (void 0 !== resultdata.optionList) { var fieldOutObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + fcId), formcp = ZPForm.Field.getFieldComponent(fcId); formcp.Options = resultdata.optionList, dispType = formcp.displayType; var ary = []; if (dispType === ZPForm.Field.SELECT_DISPLYTYPE) var selValue = Layout.Page.container.find("select[id*=" + fcId + "] option:selected").val(); if (dispType === ZPForm.Field.RADIO_DISPLYTYPE) var selValue = Layout.Page.container.find("[id*=" + fcId + "] label :checked").val(); if (dispType === ZPForm.Field.MULTISELECT_DISPLYTYPE) { var abc = Layout.Page.container.find("select[id*=" + fcId + "] option:selected"); $.each(abc, function (key, value) { ary.push($(value).val()) }) } else if (dispType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE) { var abc = Layout.Page.container.find("[id*=" + fcId + "] label :checked"); $.each(abc, function (key, value) { ary.push($(value).val()) }) } if (fieldOutObj.children("[addopt!='enabled']").remove(), ZPForm.PicklistQuickAdd.ISSINGLEEDIT) { var fieldValueData = ZPForm.Field.getFieldValueData(fcId); fieldValueData.componentName; fieldOutObj.find("span.DN").length > 0 ? fieldOutObj.find("span.DN").replaceWith($('<span class="DN">-</span>')) : fieldOutObj.append($('<span class="DN">-</span>')); var htmlData = $('<span id="zp_fieldedit_comp">' + ZPForm.Field.create(ZPForm.Field.getFieldComponent(fcId), resultdata.newOption) + '<div class="ZPAPlus"><a id="zp_formedit_picklistquickadd" class="IC-add-form"></a><div id="zp_formedit_cancel" class="IC-cls S16 red MT2 CP FR"></div> <div id="zp_formedit_submit" class="IC-tick S21 grn MR15 FR MT2 CP "></div></div></span>'); fieldOutObj.find("#zp_fieldedit_comp").length > 0 ? fieldOutObj.find("#zp_fieldedit_comp").replaceWith(htmlData) : fieldOutObj.append(htmlData), (dispType === ZPForm.Field.MULTISELECT_DISPLYTYPE || dispType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE) && fieldOutObj.find("span:first").html(ary.toString()), htmlData.find("#zp_formedit_submit").click(function () { htmlData.find("#zp_formedit_submit").unbind("click"), ZPForm.Field.Edit.callbackForSingleFieldEdit() }), htmlData.find("#zp_formedit_cancel").click(function () { ZPForm.Field.Edit.cancel() }), htmlData.find("#zp_formedit_picklistquickadd").click(function () { ZPForm.PicklistQuickAdd.createQuickAddPopup() }) } else fieldOutObj.prepend(ZPForm.Field.create(ZPForm.Field.getFieldComponent(fcId), resultdata.newOption)); if (dispType === ZPForm.Field.MULTISELECT_DISPLYTYPE) ary.push(ZPeople.decodeTxt(resultdata.newOption)), fieldOutObj.find("select").siblings(".select2-container").remove(), fieldOutObj.find("select").select2(), fieldOutObj.find("select").select2("val", ary); else if (dispType === ZPForm.Field.SELECT_DISPLYTYPE) fieldOutObj.find("select").siblings(".select2-container").remove(), fieldOutObj.find("select").select2(); else if (dispType === ZPForm.Field.CHECK_BOXES_DISPLYTYPE) { var abc = fieldOutObj.find("input"); $.each(abc, function (key, value) { -1 !== $.inArray($(value).val(), ary) && $(value).attr("checked", "checked") }) } ZPForm.PicklistQuickAdd.ISSINGLEEDIT && ((dispType === ZPForm.Field.SELECT_DISPLYTYPE || dispType === ZPForm.Field.RADIO_DISPLYTYPE) && fieldOutObj.find("span:first").html(selValue), (dispType === ZPForm.Field.SELECT_DISPLYTYPE || dispType === ZPForm.Field.MULTISELECT_DISPLYTYPE) && fieldOutObj.find("[id*='zp_field_" + fcId + "']").removeClass("select2-container MW200").addClass("select2-container txtfld")), ZPForm.PicklistQuickAdd.CONTAINER.find("#zp_quickadd_done").removeClass("disabled"), ZPForm.PicklistQuickAdd.CONTAINER.modal("hide") } }, updateFieldOptions: function (formCmpId) { var list = ZPForm.PicklistQuickAdd.CONTAINER.find("li "); ZPForm.PicklistQuickAdd.CONTAINER.find("#zp_quickadd_done").addClass("disabled"), $("#zp_form_quickadd_text").off("keyup"); var pickListOptions = ""; $.each(list, function (key, value) { pickListOptions += "newOption" === $(value).attr("id") ? "newOption_" + $(value).find("span").text() + ";" : $(value).find("span").text() + ";" }); var params = { formCmpId: formCmpId, pickListOptions: pickListOptions }; ZPeople.Request.send(ZPForm.PicklistQuickAdd.URL, params, ZPForm.PicklistQuickAdd.updateFieldOptionsResponse, void 0, ZPForm.PicklistQuickAdd.failureCallBack) }, failureCallBack: function (data, params) { ZPForm.PicklistQuickAdd.CONTAINER.find(" #pkOptionError").text(ZPI18N.getString("zp.optionnotadded")), ZPForm.PicklistQuickAdd.CONTAINER.find("#zp_form_quickadd_text").keyup(function (event) { ZPForm.PicklistQuickAdd.CONTAINER.find("#pkOptionError").text(""), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text($(this).val()), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption").attr("style", "display:all"), "" === ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text() && (ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption").attr("style", "display:none"), ZPForm.PicklistQuickAdd.CONTAINER.find("#newOption span").text("")), 13 === event.keyCode && ZPForm.PicklistQuickAdd.addPickOption(params.formCmpId) }), ZPForm.PicklistQuickAdd.CONTAINER.find("#zp_quickadd_done").removeClass("disabled") } }, ZPForm.Permission = { VIEW_NO_REC: 0, VIEW_OLYHIS_REC: 1, VIEW_HISANDHISSUB_REC: 2, VIEW_ALL: 3, getAddPerm: function () { return ZPForm.CONF.addPerm }, getEditPerm: function () { return ZPForm.CONF.editPerm }, getViewPerm: function () { return ZPForm.CONF.viewPerm }, getDeletePerm: function () { return ZPForm.CONF.deletePerm }, isImportAllowed: function () { return ZPForm.CONF.isImportAllowed }, isExportAllowed: function () { return ZPForm.CONF.isExportAllowed }, isBulkImportAllowed: function () { return ZPForm.CONF.isBulkImportAllowed }, isPermitted: function (perm) { return ZPForm.isRecordAdmin() ? !0 : ZPForm.Permission.isPermAllowed(ZPForm.isAddMode() ? null != ZPForm.primLkpType ? ZPForm.primLkpType : zpconst.Permission.MY_DATA : ZPForm.getRecordType(), perm) }, isAllowed: function (ownerIds, permission) { if (ZPForm.isRecordAdmin()) return !0; var isAllowed = !1; if (3 === permission) isAllowed = !0; else if ((2 === permission || 4 === permission || 1 === permission) && (void 0 === ownerIds && (ZPForm.isViewMode() || ZPForm.isEditMode()) && (ownerIds = ZPForm.getRecordOwnerList()), void 0 !== ownerIds && ownerIds.length > 0)) for (var ownCnt = 0; ownCnt < ownerIds.length; ownCnt++) { var ownerId = ownerIds[ownCnt]; (2 === permission && (erecno === ownerId || ZPUtil.checkIsExistInArray(ZPeople.getSubUsers(erecno, !0), ownerId)) || 4 === permission && ZPUtil.checkIsExistInArray(ZPeople.getSubUsers(erecno, !0), ownerId) || 1 === permission && ownerId === erecno) && (isAllowed = !0) } return isAllowed }, isSub: function (erecId) { return ZPUtil.checkIsExistInArray(ZPeople.SUB_USERLIST, erecId) }, isPermAllowed: function (asked_perm, perm) { return perm == zpconst.Permission.NO_DATA || asked_perm == zpconst.Permission.NO_DATA ? !1 : asked_perm == zpconst.Permission.MY_DATA && perm != zpconst.Permission.SUB_DATA || asked_perm == zpconst.Permission.SUB_DATA && perm != zpconst.Permission.MY_DATA || asked_perm == zpconst.Permission.TEAM_DATA && (perm == zpconst.Permission.TEAM_DATA || perm == zpconst.Permission.ALL_DATA) || asked_perm == zpconst.Permission.ALL_DATA && perm == zpconst.Permission.ALL_DATA } }, ZPForm.QuickAdd = { MODAL: null, FORMCOMP: null, OPTION_LIST: "", NEW_OPTIONS: !1, showQuickAddOption: function (fcId) { var formComp = ZPForm.Field.getFieldComponent(fcId), bodyHtml = '<div class="form-horizontal"><div class="form-group"><div class="control-label col-sm-3"><label>' + ZPI18N.getString("zp.addvalue") + '</label></div><div class="col-sm-8"><input type="text" id="zp_form_quickadd_optinp" class="form-control"></div></div></div><ul class="Elists PT10" id="zp_form_quickadd_list">'; ZPForm.QuickAdd.OPTION_LIST = "", $.each(formComp.Options, function (ind, data) { bodyHtml += '<li><i class="ltdot"></i><div class="Econt">' + data + "</div></li>", ZPForm.QuickAdd.OPTION_LIST += data + ";" }), bodyHtml += "</ul>", bodyHtml = $(bodyHtml), bodyHtml.find("input#zp_form_quickadd_optinp").keyup(function (event) { if (ZPForm.QuickAdd.clearError(), 13 === event.keyCode && !event.shiftKey) { var value = $(this).val(); ZPForm.QuickAdd.addOption(value) } }), ZPForm.QuickAdd.FORMCOMP = formComp, ZPForm.QuickAdd.MODAL = ZPeople.BSModal.setup({ id: "zp_form_quickaddoption", type: 1, modalClass: "", header: ZPI18N.getString("zp.quickadd"), body: bodyHtml, modalClass: "DelMdl ZPsecModal", successCallback: ZPForm.QuickAdd.updateFieldOptions }) }, addOption: function (value) { var array = ZPForm.QuickAdd.OPTION_LIST.split(";"); if (ZPUtil.Validation.isEmpty(value) || ZPUtil.checkIsExistInArray(array, value)) ZPUtil.checkIsExistInArray(array, value) && (ZPForm.QuickAdd.showError(ZPI18N.getString("zp.duplicateoptionnotallwoed")), ZPForm.QuickAdd.MODAL.find("input#zp_form_quickadd_optinp").focus()); else { var opt = $('<li><i class="ltdot"></i><div class="Econt"></div></li>'); opt.find(".Econt").text(value), ZPForm.QuickAdd.OPTION_LIST += "newOption_" + value + ";", ZPForm.QuickAdd.MODAL.find("#zp_form_quickadd_list").append(opt), ZPForm.QuickAdd.NEW_OPTIONS = !0, ZPForm.QuickAdd.MODAL.find("input#zp_form_quickadd_optinp").val("") } }, updateFieldOptions: function () { if (null !== ZPForm.QuickAdd.FORMCOMP) { var fcId = ZPForm.QuickAdd.FORMCOMP.formComponentId; if (!ZPUtil.Validation.isEmpty(ZPForm.QuickAdd.OPTION_LIST) && null !== fcId && ZPForm.QuickAdd.NEW_OPTIONS) { var params = { mode: "updateOptions", options: ZPForm.QuickAdd.OPTION_LIST, fcId: fcId }; ZPeople.Request.send(ZPForm.URL, params, ZPForm.QuickAdd.updateFieldOptionsResponse) } } }, updateFieldOptionsResponse: function (data, params) { if (data.success) { ZPForm.QuickAdd.FORMCOMP.Options = data.optionList; var fieldOutObj = ZPForm.FIELD_LAYOUT.find("#zp_field_outer_" + params.fcId); fieldOutObj.children("[addopt!='enabled']").remove(), fieldOutObj.prepend(ZPForm.Field.create(ZPForm.QuickAdd.FORMCOMP, data.newOption)), fieldOutObj.find("select").length > 0 && (fieldOutObj.find("select").siblings(".select2-container").remove(), fieldOutObj.find("select").select2()), ZPForm.QuickAdd.FORMCOMP = null, ZPForm.QuickAdd.NEW_OPTIONS = !1, ZPeople.BSModal.hide("zp_form_quickaddoption") } else "NO_DUPLICATE" === data.ERROR && ZPForm.QuickAdd.showError(ZPI18N.getString("zp.duplicateoptionnotallwoed")) }, showError: function (message) { var inpuObj = ZPForm.QuickAdd.MODAL.find("input#zp_form_quickadd_optinp"); 0 === inpuObj.siblings("#error_message").length ? inpuObj.after('<div class="ERR MT5" id="error_message">' + message + "</div>") : inpuObj.siblings("#error_message").html('<div class="ERR MT5" id="error_message">' + message + "</div>") }, clearError: function () { ZPForm.QuickAdd.MODAL.find("input#zp_form_quickadd_optinp").siblings("#error_message").remove() } }, ZPForm.addRecentlyUsed = function () { var currModule = ZPTabs.getModueCode(window.location.href.split("zp").pop(), !0); if ("services" == currModule) { var curUrl = window.location.href.split("zp#").pop(), activeSubTab = $("#zp_active_subtabs").find('li a[href*=":' + Layout.Page.urlparam.formId + '/"]'), setInSession = ({ formId: Layout.Page.urlparam.formId, viewId: Layout.Page.urlparam.viewId }, !1), formDisplayName = "", subtabs = ZPTabs.getSubTabs()[0], formSubTab = subtabs.length > 0 ? AppFlow.findSubTab(Layout.Page.urlparam.formId) : {}; if (0 == Object.keys(formSubTab).length) { if (void 0 != ZPForm.FORM_DETAILS[Layout.Page.urlparam.formId]) var formDisplayName = ZPForm.FORM_DETAILS[Layout.Page.urlparam.formId].formdisplayName; else Layout.Page.container.parent("div[id*=zp-contwrap]").find("li[form=" + Layout.Page.urlparam.formId + "]").length > 0 && (formDisplayName = Layout.Page.container.parent("div[id*=zp-contwrap]").find("li[form=" + Layout.Page.urlparam.formId + "]").attr("name")); subtabs.push({ tabName: formDisplayName, tabURL: curUrl, formId: Layout.Page.urlparam.formId }), $("#zp_active_subtabs").append('<li title="' + formDisplayName + '" formid="' + Layout.Page.urlparam.formId + '"><a href="#' + curUrl + '">' + formDisplayName + "</a></li>"), setInSession = !0 } else formSubTab.tabURL != curUrl && (formDisplayName = activeSubTab.parent("li").attr("title"), activeSubTab.find("a").attr("href", "#" + curUrl), setInSession = !0); setInSession && ZPeople.Request.send("/setInSession.zp", { formId: Layout.Page.urlparam.formId, viewId: Layout.Page.urlparam.viewId, formDisplayName: formDisplayName, method: "setSession" }) } }, ZPForm.select2 = { OPTIONS: {}, ALL_OPTIONS: {}, getSelect2Properties: function (prop) { var options = { formatNoMatches: function () { return ZPI18N.getString("zp.nomatchesfound") }, multiple: prop && prop.multiple, query: function (query) { var results = [], index = -1, term = query.term, fcid = $(query.element).attr("fcid"), tabularelement = ""; ZPForm.FORM_COMPONENTS[fcid].isTabular && !ZPForm.FORM_COMPONENTS[fcid].isGridType ? tabularelement = $(query.element).closest('[istabular=true][class^="row"]') : ZPForm.FORM_COMPONENTS[fcid].isTabular && ZPForm.FORM_COMPONENTS[fcid].isGridType && (tabularelement = $(query.element).closest('tr[id="zp_tabular_row"]')); var row = null; void 0 != tabularelement && tabularelement.length > 0 && (row = parseInt($(tabularelement).attr("row")) - 1), key = ZPForm.select2.getKey(fcid, row), 1 == query.page && parseInt(ZPForm.FORM_COMPONENTS[fcid].displayType) === ZPForm.Field.SELECT_DISPLYTYPE && "" == term && results.push({ id: "-Select-", text: "Select" }); var isRefresh = ZPForm.getLookupRefreshStatus(fcid, ZPForm.FORM_COMPONENTS[fcid].referredFormId); (!ZPForm.select2.OPTIONS[key] || isRefresh) && (ZPForm.select2.OPTIONS[key] = {}); var isDirectFetch = isRefresh || ZPForm.FORM_COMPONENTS[fcid].dependentFiledList && ZPForm.FORM_COMPONENTS[fcid].dependentFiledList.length > 0, isnew = !0; if (ZPForm.CURRFORM_PARAM.lookupValue && "Employee_ID" === ZPForm.FORM_COMPONENTS[fcid].labelName) if (-1 != Layout.Page.hash.indexOf("selfservice/leave/list") || -1 != Layout.Page.hash.indexOf("selfservice/user/calendar")) { var user_detail = ZPeople.getUserDetailsById(ZPDashboard.getUserId(ZPForm.CURRFORM_PARAM.lookupValue)); results.push({ id: ZPForm.CURRFORM_PARAM.lookupValue, text: ZPeople.decodeTxt(user_detail.name + ",&nbsp;" + user_detail.empid) }) } else "attendance-entry-listview" !== Layout.Page.pageId && "selfservice-user-attendance" !== Layout.Page.container[0].id || null === Attendance.Entry.erecno ? results.push({ id: ZPDashboard.getUserId(), text: ZPeople.decodeTxt(ZPeople.getUserDetailsById(ZPDashboard.getUserId()).name + ",&nbsp;" + ZPeople.getUserDetailsById(ZPDashboard.getUserId()).empid) }) : results.push({ id: ZPDashboard.getUserId(Attendance.Entry.erecno), text: ZPeople.decodeTxt(ZPeople.getUserDetailsById(ZPDashboard.getUserId(Attendance.Entry.erecno)).name + ",&nbsp;" + ZPeople.getUserDetailsById(ZPDashboard.getUserId(Attendance.Entry.erecno)).empid) }); else if (ZPForm.select2.OPTIONS[key][term] && 0 == ZPForm.select2.OPTIONS[key][term].length) isnew = !1; else if (ZPForm.select2.OPTIONS[key][term] && ZPForm.select2.OPTIONS[key][term].length > 0 && ZPForm.select2.OPTIONS[key][term].length > 200 * (query.page - 1)) { for (i = 200 * (query.page - 1) ; i < 200 * query.page && i < ZPForm.select2.OPTIONS[key][term].length; i++) results.push(ZPForm.select2.OPTIONS[key][term][i]); isnew = !1 } else { if (isDirectFetch || 1 != query.page || "" != term || ZPForm.FORM_COMPONENTS[fcid].isPrimaryLookup) return results = ZPForm.select2.getOptions(fcid, term, query.page, key, !1, row, query.callback, prop), void (isRefresh && (lookUpData = ZPForm.LOOKUP_DATA[ZPForm.FORM_COMPONENTS[fcid].referredFormId], lookUpData.updatedFcIds || (lookUpData.updatedFcIds = []), lookUpData.updatedFcIds.push(fcid))); $.each(ZPForm.FORM_COMPONENTS[fcid].Options, function (ind, val) { return results.push({ id: val.Id, text: ZPeople.decodeTxt(val.Value) }), ZPForm.select2.ALL_OPTIONS[fcid + "_" + val.Id] = val.Value, 199 == ind ? !1 : void 0 }) } isnew && (ZPForm.select2.OPTIONS[key][term] || (ZPForm.select2.OPTIONS[key][term] = []), $.each(results, function (ind, value) { "-Select-" != value.id && ZPForm.select2.OPTIONS[key][term].push(value) })), 1 == query.page && "" == term && ZPForm.FORM_COMPONENTS[fcid].displayType != ZPForm.Field.MULTISELECT_DISPLYTYPE && prop && prop.initseljson && (index = Timetracker.projects.Operations.findJSONArrayIndex(results, prop.initseljson.id, "id"), -1 == index && results.push(prop.initseljson)), query.callback({ results: results, more: results.length >= 200 }) }, initSelection: function (element, callback) { result = { id: "-Select-", text: ZPI18N.getString("zp.select") }, fcid = $(element).attr("fcid"); var tabularelement = "", row = null; ZPForm.FORM_COMPONENTS[fcid].isTabular && !ZPForm.FORM_COMPONENTS[fcid].isGridType ? tabularelement = $(element).closest('[istabular=true][class^="row"]') : ZPForm.FORM_COMPONENTS[fcid].isTabular && ZPForm.FORM_COMPONENTS[fcid].isGridType && (tabularelement = $(element).closest('tr[id="zp_tabular_row"]')), void 0 != tabularelement && tabularelement.length > 0 && (row = parseInt($(tabularelement).attr("row")) - 1), key = ZPForm.select2.getKey(fcid, row), prop && prop.defSelection ? ZPForm.isAddMode() ? prop.multiple && (result = []) : ZPForm.FORM_COMPONENTS[fcid].displayType == ZPForm.Field.MULTISELECT_DISPLYTYPE ? (result = [], $(ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][fcid].componentValue_ID).each(function () { result.push({ id: this, text: ZPeople.decodeTxt(ZPForm.select2.ALL_OPTIONS[fcid + "_" + this]) }) }), result.push(prop.initseljson)) : void 0 != ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][fcid] && ZPForm.select2.ALL_OPTIONS[fcid + "_" + ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][fcid].componentValue_ID] && (result = { id: ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][fcid].componentValue_ID, text: ZPeople.decodeTxt(ZPForm.select2.ALL_OPTIONS[fcid + "_" + ZPForm.FIELD_RECORD[ZPForm.CURRFORM_PARAM.recordId][fcid].componentValue_ID]) }) : prop && prop.initseljson ? (result = prop.initseljson, ZPForm.FORM_COMPONENTS[fcid].displayType == ZPForm.Field.MULTISELECT_DISPLYTYPE && (result = [], $(element.val().split(",")).each(function () { result.push({ id: this, text: ZPeople.decodeTxt(ZPForm.select2.ALL_OPTIONS[fcid + "_" + this]) }) }), result.push(prop.initseljson))) : ZPForm.isAddMode() || "" == element.val() ? ZPForm.isAddMode() && (defValue = element.val() && null != element.val() && "" != element.val() ? element.val() : ZPForm.Field.getDefaultLookupValue(ZPForm.FORM_COMPONENTS[fcid]), defValue && ("-Select-" == defValue ? result = { id: "-Select-", text: ZPI18N.getString("zp.select") } : (ZPForm.select2.ALL_OPTIONS[fcid + "_" + defValue] || ZPForm.select2.getOptions(fcid, "", 1, key, defValue, row), res = {}, ZPForm.select2.ALL_OPTIONS[fcid + "_" + defValue] ? (res = { id: defValue, text: ZPeople.decodeTxt(ZPForm.select2.ALL_OPTIONS[fcid + "_" + defValue]) }, void 0 !== ZPForm.FORM_COMPONENTS[fcid].relatedFieldValues && ZPForm.FORM_COMPONENTS[fcid].relatedFieldValues.message[defValue] ? $.each(ZPForm.FORM_COMPONENTS[fcid].relatedFieldDetails, function (index) { var value; void 0 != ZPForm.FORM_COMPONENTS[fcid].relatedFieldValues.message[defValue][this.formComponentId] && (value = ZPForm.FORM_COMPONENTS[fcid].relatedFieldValues.message[defValue][this.formComponentId]); var optHtml = value; ZPForm.FIELD_LAYOUT.find("#zp_form_relfield_" + fcid + "_" + this.formComponentId).attr("fieldtype") == ZPForm.Field.IMAGE && "-" != ZPForm.Field.getNoValueString(value) && (optHtml = '<img class="rlflds-img" src="' + (ZPForm.isEmbedForm && !isAuthreq ? "embed" + value + "&digest=" + Embed_digest : value) + '"></img>'), ZPForm.PRINT ? ZPForm.PRINTPAGE_DATA.find("#zp_form_relfield_" + fcid + "_" + this.formComponentId).find("#zp_form_relfield_value").html(ZPForm.Field.getNoValueString(optHtml)) : ZPForm.FIELD_LAYOUT.find("#zp_form_relfield_" + fcid + "_" + this.formComponentId).find("#zp_form_relfield_value").html(ZPForm.Field.getNoValueString(optHtml)) }) : ZPForm.Field.getRelatedFieldsValue(element, ZPForm.FORM_COMPONENTS[fcid].displayType)) : ZPForm.FORM_COMPONENTS[fcid].displayType != ZPForm.Field.MULTISELECT_DISPLYTYPE && (res = { id: "-Select-", text: "Select" }), ZPForm.FORM_COMPONENTS[fcid].displayType == ZPForm.Field.MULTISELECT_DISPLYTYPE ? (result = [], result.push(res)) : result = res))) : "-Select-" == element.val() ? result = { id: "-Select-", text: ZPI18N.getString("zp.select") } : ZPForm.FORM_COMPONENTS[fcid].displayType == ZPForm.Field.MULTISELECT_DISPLYTYPE ? (result = [], $(element.val().split(",")).each(function () { result.push({ id: this, text: ZPeople.decodeTxt(ZPForm.select2.ALL_OPTIONS[fcid + "_" + this]) }) })) : result = { id: element.val(), text: ZPeople.decodeTxt(ZPForm.select2.ALL_OPTIONS[fcid + "_" + element.val()]) }, callback(result) } }; return options }, getKey: function (fcid, rowno) { return key = fcid, ZPForm.FORM_COMPONENTS[fcid].isPrimaryLookup && (ZPForm.isAddMode() ? key += "_Add" : key += "_Edit"), ZPForm.FORM_COMPONENTS[fcid].dependentFiledList && ZPForm.FORM_COMPONENTS[fcid].dependentFiledList.length > 0 && (fieldValues = {}, $.each(ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId].message.formComponentDetails, function () { void 0 !== this.column1 && this.column1.length > 0 && ZPForm.getFieldValues(this.column1, ZPForm.FORM_COMPONENTS[fcid].dependentFiledList, fieldValues, rowno), void 0 !== this.column2 && this.column2.length > 0 && ZPForm.getFieldValues(this.column2, ZPForm.FORM_COMPONENTS[fcid].dependentFiledList, fieldValues, rowno) }), key += JSON.stringify(fieldValues)), key }, getOptions: function (fcid, term, page, key, id, rowno, successcallback, prop) { fieldValues = {}, ZPForm.FORM_COMPONENTS[fcid].dependentFiledList && ZPForm.FORM_COMPONENTS[fcid].dependentFiledList.length > 0 && $.each(ZPForm.FORM_COMPONENT_DATA[ZPForm.CURRFORM_PARAM.formId].message.formComponentDetails, function () { void 0 !== this.column1 && this.column1.length > 0 && ZPForm.getFieldValues(this.column1, ZPForm.FORM_COMPONENTS[fcid].dependentFiledList, fieldValues, rowno), void 0 !== this.column2 && this.column2.length > 0 && ZPForm.getFieldValues(this.column2, ZPForm.FORM_COMPONENTS[fcid].dependentFiledList, fieldValues, rowno) }), fields = [fcid]; var params = { mode: "fetchFormLookupOtions", luFcIds: JSON.stringify(fields), formId: ZPForm.CURRFORM_PARAM.formId }; Object.keys(fieldValues).length > 0 && (params.fieldValues = JSON.stringify(fieldValues)), ZPUtil.Validation.isEmpty(ZPForm.CURRFORM_PARAM.recordId) || (params.recordId = ZPForm.CURRFORM_PARAM.recordId), "P_Timesheet" === ZPForm.getTableName() && (params.selUser = null === Timetracker.timelogs.tserecno || void 0 === Timetracker.timelogs.tserecno ? ZPeople.CURR_USER.usererec : Timetracker.timelogs.tserecno), "P_PerformanceAppraisal" === ZPForm.getTableName() && (params.configId = Layout.Page.urlparam.configId), params.searchtxt = term, params.startInd = 200 * (page - 1) + 1, params.conreqcsr = csrfToken, id && (params.id = id), url = ZPForm.URL, ZPForm.isEmbedForm && !isAuthreq && (params.digest = params.digest = Embed_digest, url = "/embedFormAction.hr"); var results = []; 1 == page && parseInt(ZPForm.FORM_COMPONENTS[fcid].displayType) === ZPForm.Field.SELECT_DISPLYTYPE && "" == term && results.push({ id: "-Select-", text: "Select" }); var asyn = void 0 !== successcallback && "function" == typeof successcallback; return $.ajax({ type: "POST", async: asyn, url: url, data: params, success: function (data) { data.code == zpconst.ResponseCodes.API_ERR_NO_ERROR && data.message && data.message[fcid] && $.each(data.message[fcid], function (ind, val) { results.push({ id: val.Id, text: ZPeople.decodeTxt(val.Value) }), ZPForm.select2.ALL_OPTIONS[fcid + "_" + val.Id] = val.Value }), asyn && (ZPForm.select2.OPTIONS[key][term] || (ZPForm.select2.OPTIONS[key][term] = []), $.each(results, function (ind, value) { "-Select-" != value.id && ZPForm.select2.OPTIONS[key][term].push(value) }), 1 == page && "" == term && ZPForm.FORM_COMPONENTS[fcid].displayType != ZPForm.Field.MULTISELECT_DISPLYTYPE && prop && prop.initseljson && (index = Timetracker.projects.Operations.findJSONArrayIndex(results, prop.initseljson.id, "id"), -1 == index && results.push(prop.initseljson)), successcallback({ results: results, more: results.length >= 200 })) } }), results } }; var ZPView = {}; ZPView = { URL: "/viewAction.zp", VIEW_DETAILS: {}, newRecordDetails: {}, CURR_VIEWPARAMS: null, lastSort: {}, ISLOADING: !1, LIST_VIEW_PARAMS: {}, VIEW_OPTIONS: { typeOfView: ["all", "sub", "dirsub", "mydep", "self", "loc"], approval: ["all", "approved", "rejected", "pending", "cancelled", "notsubmitted"], empstatus: ["all", "activeemprecord", "exitemprecord"] }, NODATA_HTML: '<div class="ZPNdata zpndat-fixed" id="no_data"><div id="Forms_View_No_Data"></div><h5 id="zp_views_nodata"></h5></div>', VIEW_OUTTER_HTML: '<div class="table-responsive tabcont main-wrp" id="zp_views_container"><table class="table table-hover Vlis  FLhead" statictable="true" id="zp_views_records_table"><thead id="zp_views_recordheader" staticheader="true"></thead></table></div>', IS_DELETE_ALLOWED: !0, typeOfView: null, draftrecids: [], isApproverDetailsTobeShown: !1, formCompId: [], isResetTablePosition: !1, isAdmin: function () { return isAdminProfile || "loc" == ZPView.typeOfView && ZPForm.isLocAdmin() || !ZPForm.isLocAdmin() && ZPForm.isAdmin() }, formsAndViewsCallback: function () { ZPForm.isQuickAdd = !1, ZPForm.formid = 0, ZPView.initViewParams(), Layout.UrlConf.isModuleForm() ? (ZPComponents.SystemView.load(), ZPView.isSystemView() ? Layout.Page.container.find("#zp_views_approvaltypes").removeClass("DN") : -1 !== Layout.Page.currentmode.indexOf("leavetracker/views/applications") && Layout.Page.container.find("#zp_views_approvaltypes").addClass("DN"), ZPForm.addRecentlyUsed()) : Layout.UrlConf.isFormActionURL("editview") ? ZPNewView.getEditViewPage() : Layout.UrlConf.isFormActionURL("createview") ? ZPNewView.getCreateViewPage() : Layout.UrlConf.isFormActionURL("add") || Layout.UrlConf.isFormActionURL("edit") || Layout.UrlConf.isFormActionURL("view") ? ZPForm.IS_RESUBMIT ? ZPForm.load({ formId: Layout.Page.urlparam.formId, formMode: "EDIT", recordId: ZPForm.RESUBMIT_RECORDID }) : ZPForm.load({ formId: Layout.Page.urlparam.formId }) : Layout.UrlConf.isFormActionURL("bulkupload") ? Importbulk.init(Layout.Page.urlparam.formId, Layout.Page.urlparam.viewId) : Layout.UrlConf.isFormActionURL("import") ? Import.init(Layout.Page.urlparam.formId, Layout.Page.urlparam.viewId) : (ZPView.CURR_VIEWPARAMS = null, ZPView.init(), void 0 != ZPView.VIEW_CONTAINER && ZPView.VIEW_CONTAINER.parent().parent().removeClass("filter-wrap"), ZPForm.addRecentlyUsed()) }, initViewParams: function () { null === ZPView.CURR_VIEWPARAMS && void 0 !== Layout.Page.urlparam.viewId && (ZPView.CURR_VIEWPARAMS = { formId: Layout.Page.urlparam.formId, viewId: Layout.Page.urlparam.viewId, isEmbed: !1 }) }, getURL: function (viewId) { return "systemview" === viewId ? (ZPView.setViewPropertie("refreshContent", !0, Layout.Page.urlparam.viewId), "#" + Layout.UrlConf.getParentUrl(void 0, !0)) : (ZPView.setViewPropertie("refreshCount", !0, viewId), ZPView.setViewPropertie("resfreshSearch", !0, viewId), ZPView.refresh(!1, viewId), "#" + ZPView.getHashForViewChange(viewId)) }, toggleView: function (viewId) { ZPView.setViewPropertie("refreshContent", !0, viewId), window.location.href = ZPView.getURL(viewId) }, getHashForViewChange: function (viewId) { var viewProps = this.getViewPropertie(viewId); return Layout.Page.urlparam.viewId = viewId, delete Layout.Page.urlparam.typeOfView, delete Layout.Page.urlparam.approval, delete Layout.Page.urlparam.empstatus, void 0 === viewProps || ZPView.CURR_VIEWPARAMS.isFromSelfService || (void 0 !== viewProps.typeOfView && (Layout.Page.urlparam.typeOfView = viewProps.typeOfView), void 0 !== viewProps.approval && (Layout.Page.urlparam.approval = viewProps.approval), void 0 !== viewProps.empstatus && (Layout.Page.urlparam.empstatus = viewProps.empstatus)), Layout.UrlConf.generatePageHash() }, getViewPropertie: function (viewId) { ZPView.initViewParams(), viewId = void 0 === viewId ? ZPView.CURR_VIEWPARAMS.viewId : viewId; var returnProp = ZPView.getFormViewsPropertie(); return void 0 !== returnProp ? returnProp[viewId] : returnProp }, getFormViewsPropertie: function () { return ZPView.LIST_VIEW_PARAMS[ZPView.getViewUniqueKey() + "_" + ZPView.CURR_VIEWPARAMS.formId] }, setViewPropertie: function (param, value, viewId) { var viewProps = ZPView.getViewPropertie(viewId); void 0 !== viewProps && (viewProps[param] = value) }, removeViewProperty: function (propName) { var viewProp = this.getViewPropertie(); void 0 !== viewProp && delete viewProp[propName] }, getStaticParams: function (paramName, params, propParam) { if (void 0 !== Layout.Page.urlparam[paramName]) { var param = ZPUtil.checkValueInArray(ZPView.VIEW_OPTIONS[paramName], Layout.Page.urlparam[paramName], "all"); "" !== param && (propParam[paramName] = param, "approval" === paramName ? params.approvalStatus = param : "empstatus" === paramName ? params.employeeStatus = param : params[paramName] = param) } }, getListViewParams: function (propParam, params) { return ZPView.CURR_VIEWPARAMS.isrelatedform || (ZPView.getStaticParams("typeOfView", params, propParam), ZPView.getStaticParams("approval", params, propParam), ZPView.getStaticParams("empstatus", params, propParam)), void 0 !== propParam.sortBy && (params.sortBy = propParam.sortBy), void 0 !== propParam.groupBy && (params.groupBy = propParam.groupBy), void 0 !== propParam.startInd && (params.startInd = propParam.startInd), void 0 !== propParam.limit && (params.limit = propParam.limit), void 0 !== propParam.searchBy && (params.searchBy = JSON.stringify(propParam.searchBy)), void 0 !== propParam.updateCount && (params.updateCount = propParam.updateCount), params }, refresh: function (callback, viewId) { ZPView.setViewPropertie("refreshStatus", !0, viewId), callback && ZPView.init() }, getViewUniqueKey: function () { var uniqueKey = Layout.Page.urlmode; return ZPUtil.Validation.isEmpty(ZPView.CURR_VIEWPARAMS.uniqueKey) || (uniqueKey = ZPView.CURR_VIEWPARAMS.uniqueKey), uniqueKey }, init: function (viewPropJson, isFromrelfields) { ZPView.isFromrelfields = isFromrelfields; var mdata = ZPeople.Module.getData(); if ($("#page-wrapper").addClass("Abar1 THF-2"), void 0 != mdata && void 0 != mdata.viewDetails && mdata.viewDetails.code == zpconst.ResponseCodes.API_ERR_INVALID_FORMNAME) { ZPView.VIEW_CONTAINER = ZPView.getzpviewcontainer(); var noDataCont = $(ZPView.NODATA_HTML); return ZPUtil.noDataSVG("Forms_View_No_Data", "newzp/images/svg/no-data.svg", void 0), ZPView.VIEW_CONTAINER.append(noDataCont), noDataCont.find("#zp_views_nodata").html(ZPI18N.getString("zp.pageNotFound")), void Layout.Page.container.find("#zp_views_formrecactions").parent().remove() } void 0 !== viewPropJson ? ZPView.CURR_VIEWPARAMS = viewPropJson : (void 0 === ZPView.CURR_VIEWPARAMS || null === ZPView.CURR_VIEWPARAMS) && ZPView.initViewParams(), ZPView.CURR_VIEWPARAMS.isEmbed || ZPView.isFromrelfields ? $("#page-wrapper").removeClass("Abar1") : ZPView.constructViews(); var propParam = ZPView.getViewPropertie(); if (void 0 === propParam || propParam.refreshStatus || ZPView.isFromrelfields) { var params = { mode: "fetchRecords", formId: ZPView.CURR_VIEWPARAMS.formId, viewId: ZPView.CURR_VIEWPARAMS.viewId, isOnload: !1 }; if (void 0 === propParam) { propParam = { startInd: 1, refreshStatus: !0, refreshCount: !0, resfreshSearch: !0 }; var formProp = ZPView.getFormViewsPropertie(); if (void 0 === formProp) { var uniqueKey = ZPView.getViewUniqueKey(); ZPView.LIST_VIEW_PARAMS[uniqueKey + "_" + ZPView.CURR_VIEWPARAMS.formId] = {}, params.isOnload = !0 } ZPView.LIST_VIEW_PARAMS[ZPView.getViewUniqueKey() + "_" + ZPView.CURR_VIEWPARAMS.formId][ZPView.CURR_VIEWPARAMS.viewId] = propParam, isFromrelfields || Layout.Page.container.find("#zp_views_list_container").html(ZPeople.LOADING_HTML) } params = ZPView.getListViewParams(propParam, params); var moduleName = "performance"; void 0 !== viewPropJson && "P_MultiRater" === viewPropJson.formName && ZPeople.Module.MODULE_DATA[moduleName].isRaterTypeEnable && (params.groupBy = "Type: true"), void 0 !== viewPropJson && viewPropJson.isFinalReview && (params.isFinalReview = !0), void 0 !== ZPView.CURR_VIEWPARAMS.erecno && (params.erecno = ZPView.CURR_VIEWPARAMS.erecno), void 0 !== ZPView.CURR_VIEWPARAMS.leaveyear && (params.leaveyear = ZPView.CURR_VIEWPARAMS.leaveyear), void 0 !== ZPView.CURR_VIEWPARAMS.leaveunit && (params.leaveunit = ZPView.CURR_VIEWPARAMS.leaveunit), void 0 != ZPView.CURR_VIEWPARAMS.configId && (params.configId = ZPView.CURR_VIEWPARAMS.configId), ZPUtil.Validation.isEmpty(ZPView.CURR_VIEWPARAMS.employeeStatus) || (params.employeeStatus = ZPView.CURR_VIEWPARAMS.employeeStatus), ZPView.CURR_VIEWPARAMS.isrelatedform && (params.isrelatedform = ZPView.CURR_VIEWPARAMS.isrelatedform, params.relformconfigformid = ZPView.CURR_VIEWPARAMS.relformconfigformid, params.relformrecid = ZPView.CURR_VIEWPARAMS.relformrecid, params.relformfcid = ZPView.CURR_VIEWPARAMS.relformfcid, params.linkedFcid = ZPView.CURR_VIEWPARAMS.linkedFcid, params.isOnload = !0); var callback = ZPView.viewsResponse; void 0 !== viewPropJson && "P_MultiRater" === viewPropJson.formName ? callback = Appraisal.Reviewer.constructMultiRaterDetails : void 0 !== viewPropJson && "-1" == viewPropJson.viewId && (callback = Task.constructRelatedTask), ZPeople.Request.send(ZPView.URL, params, callback) } else ZPForm.CONF = ZPForm.getFormConf(ZPView.CURR_VIEWPARAMS.formId), ZPView.VIEW_CONTAINER = ZPView.getzpviewcontainer() }, initialaiseContainer: function (viewProps) { ZPView.VIEW_CONTAINER = ZPView.getzpviewcontainer(), void 0 !== ZPView.CURR_VIEWPARAMS.container ? ZPView.VIEW_CONTAINER = Layout.Page.container.find("#" + ZPView.CURR_VIEWPARAMS.container) : ZPView.isFromrelfields || 0 === Layout.Page.container.find("#zp_page_loading").length && !ZPView.VIEW_CONTAINER.is(":empty") && void 0 != viewProps && !viewProps.refreshContent || (ZPView.VIEW_CONTAINER = ZPView.getzpviewcontainer().html($(ZPView.VIEW_OUTTER_HTML)), void 0 != viewProps && viewProps.refreshContent && ZPView.setViewPropertie("refreshContent", !1)) }, viewsResponse: function (resultDetails, params) { if (resultDetails.code == zpconst.ResponseCodes.API_ERR_PERMISSION_DENIED_TO_VIEW) return ZPView.initialaiseContainer(), ZPView.showNoDataPage(resultDetails.message), void Layout.Page.container.find("#zp_views_formrecactions").parent().remove(); var viewProps = ZPView.getViewPropertie(); params.isOnload ? (ZPForm.updateFormConf(resultDetails.formDetails), ZPView.CURR_VIEWPARAMS.isrelatedform || ZPView.initPageComponenets()) : ZPForm.CONF = ZPForm.getFormConf(ZPView.CURR_VIEWPARAMS.formId), ZPView.initialaiseContainer(viewProps); var viewRecs = resultDetails.recordDetails.message, headers = resultDetails.recordDetails.fieldHeaders; ZPView.isApproverDetailsTobeShown = viewRecs.isApproverDetailsTobeShown, 7e3 === resultDetails.recordDetails.code ? (ZPView.typeOfView = Layout.Page.urlparam.typeOfView = viewRecs.typeOfView, ZPView.CURR_VIEWPARAMS.isEmbed || Layout.Page.container.find("#zp_views_container").addClass("H100"), ZPView.CURR_VIEWPARAMS.isrelatedform || (Layout.Page.container.find("#zp_views_typeofviews").select2("val", ZPView.typeOfView), ZPView.setViewPropertie("typeOfView", ZPView.typeOfView)), ZPView.setViewPropertie("totalRec", viewRecs.recordCount), ZPView.VIEW_CONTAINER.find("#zp_views_no_recs").addClass("DN"), void 0 !== viewProps.searchBy && viewProps.searchBy.length > 0 && ZPView.VIEW_CONTAINER.find("#zp_views_recordlist").show(), void 0 !== viewRecs.groupBy && "" !== viewRecs.groupBy.trim() && ZPView.setViewPropertie("groupBy", viewRecs.groupBy), void 0 !== viewRecs.sortBy && "" !== viewRecs.sortBy.trim() && ZPView.setViewPropertie("sortBy", viewRecs.sortBy), Layout.Page.container.find("#zp_view_rec_perpage_cont").removeClass("DN"), ZPView.VIEW_CONTAINER.find("#zp_views_container").fadeIn(800), Layout.Page.container.find("#systemview_pagination").remove(), Layout.Page.container.find("#zp_view_pagination, #zp_views_navi").fadeIn(800), ZPView.constructRecords(viewRecs, params)) : (ZPView.isApproverDetailsTobeShown = resultDetails.recordDetails.isApproverDetailsTobeShown, ZPView.typeOfView = Layout.Page.urlparam.typeOfView = resultDetails.recordDetails.typeOfView, ZPView.CURR_VIEWPARAMS.isrelatedform || (Layout.Page.container.find("#zp_views_typeofviews").select2("val", ZPView.typeOfView), ZPView.setViewPropertie("typeOfView", ZPView.typeOfView)), ZPView.constructRecords(headers, "NO-RECORDS-FOUND"), ZPView.handleNoRec(viewRecs)), ZPView.CURR_VIEWPARAMS.isEmbed || ZPView.isFromrelfields || (ZPView.setViewPropertie("hasNext", !viewRecs.isLastPage), viewProps.refreshStatus && (ZPView.setViewPropertie("limit", viewRecs.recordsLimit), Layout.Page.container.find("#zp_view_rec_perpage").select2("val", viewRecs.recordsLimit)), params.isOnload ? ZPView.Pagination.init() : ZPView.Pagination.handlePageRecCount(), ZPView.Pagination.ISLOADED = !0, void 0 !== viewProps.updateCount && ZPView.removeViewProperty(viewProps.updateCount), viewProps.refreshCount && (ZPView.setViewPropertie("resfreshSearch", !1), void 0 != Layout.Page.container.find("#zp_views_recordcount").html("#")[0] && (Layout.Page.container.find("#zp_views_recordcount").html("#")[0].onclick = function () { $(this).html('<div class="loader-inner line-scale FR ML5"><div></div><div></div><div></div></div>'), ZPView.getRecordCount() }))), ZPView.isFromrelfields || 1 == ZPView.CURR_VIEWPARAMS.disableRefreshStatus || ZPView.setViewPropertie("refreshStatus", !1), ("P_MultiRater" === ZPForm.getTableName() || "P_MultiRater_Approval" === ZPForm.getTableName()) && Layout.Page.container.find("#zp_views_imp").remove() }, handleNoRec: function (message) { var viewProps = ZPView.getViewPropertie(); void 0 !== viewProps.searchBy && viewProps.searchBy.length > 0 ? (ZPView.VIEW_CONTAINER.find("#zp_views_container").removeClass("H100"), ZPView.VIEW_CONTAINER.find("#zp_views_records_table").children("[id!=zp_views_recordheader]").remove(), Layout.Page.container.find("#zp_views_navi").hide()) : ZPView.VIEW_CONTAINER.find("#zp_views_records_table").children("[id!=zp_views_recordheader]").remove(), ZPView.showNoDataPage(message) }, showNoDataPage: function (message) { if (ZPView.isFromrelfields) { var noDataCont = $('<div class="label-body" id="forms_norecordfound"><h4 class="ZPNdt text-center" id="zp_views_nodata"></h4></div>'); ZPView.VIEW_CONTAINER.after(noDataCont), ZPView.VIEW_CONTAINER.attr("style", "display:none"), noDataCont.find("#zp_views_nodata").html(message) } else if (0 === ZPView.VIEW_CONTAINER.find(".ZPNdata").length) { ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed || ($("#page-wrapper").addClass("Abar1"), Layout.Page.container.find("#zp_view_pagination").hide()); var noDataCont = $(ZPView.NODATA_HTML); ZPUtil.noDataSVG("Forms_View_No_Data", "newzp/images/svg/no-data.svg", void 0), ZPView.VIEW_CONTAINER.find("#zp_views_container").find("#no_data").length <= 0 && ZPView.VIEW_CONTAINER.find("#zp_views_container").append(noDataCont), noDataCont.find("#zp_views_nodata").html(message) } else ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed || ($("#page-wrapper").addClass("Abar1"), Layout.Page.container.find("#zp_view_pagination").hide()), ZPView.VIEW_CONTAINER.find(".ZPNdata,#forms_norecordfound").removeClass("DN") }, constructViews: function () { var views = ZPeople.Module.getData().viewDetails; if (7e3 === views.code && void 0 !== views && !views.loaded) { var viewLstCont = Layout.Page.container.find("#zp_views_viewlist").empty(); views = ZPUtil.sortByJSONValue(views.message, "viewId", !0); var viewOpt = $('<select id="zp_select_viewlist"></select>'); ZPComponents.SystemView.Configuration.isEnabled() && viewOpt.append('<option value="systemview" ' + (void 0 === Layout.Page.urlparam.viewId ? "selected" : "") + ">" + ZPComponents.SystemView.Configuration.getSystemViewName() + "</option>"), $.each(views, function (index) { this.viewId + "" === Layout.Page.urlparam.viewId ? viewOpt.append('<option selected value="' + this.viewId + '">' + this.displayName + "</option>") : viewOpt.append('<option value="' + this.viewId + '">' + this.displayName + "</option>") }), viewLstCont.html(viewOpt); var size = viewOpt.children().length; size > 3 ? viewOpt.select2() : viewOpt.select2({ minimumResultsForSearch: 1 / 0 }), viewOpt.change(function () { ZPView.toggleView($(this).val()), ZPView.enableViewOperations() }), viewOpt.on("open", function () { $(".select2-drop:visible").find("button.btn-primary").remove(), $(".select2-drop:visible").append("<button class='btn btn-primary'>" + ZPI18N.getString("zp.createview") + "</button>"), $(".select2-drop:visible").find("button.btn-primary")[0].onclick = function () { ZPNewView.createView() } }), views.length > 1 ? Layout.Page.container.find("#zp_views_hasmore").removeClass("DN") : Layout.Page.container.find("#zp_views_hasmore").addClass("DN"), ZPeople.Module.getData().viewDetails.loaded = !0, ZPView.enableViewOperations() } }, enableViewOperations: function () { var selectedViewID = Layout.Page.container.find("#zp_select_viewlist").val(); if ("systemview" === selectedViewID) return Layout.Page.container.find("#zp_views_actions span").hide(), void Layout.Page.container.find("#viewEditButton, #viewDeleteButton").hide(); var isSharedView = !1, isCustomView = !0; if ($.each(ZPeople.Module.getData().viewDetails.message, function (key, value) { return value.viewId === selectedViewID ? (value.isSharedView ? (isSharedView = !0, value.ownerId === erecno && (isSharedView = !1)) : isSharedView = value.isSharedView, isCustomView = value.isCustomView, void (("" === value.ownerId || value.ownerId.length <= 0) && (isCustomView = !1))) : void 0 }), ZPView.sharedViewConfig(isSharedView, isCustomView), Layout.Page.container.find("#zp_views_search_filter").hasClass("blu")) { Layout.Page.container.find("#zp_views_search_filter").toggleClass("blu gry"); var searchCont = ZPView.VIEW_CONTAINER.find("#zp_view_search_container"); searchCont.toggleClass("DN"), Layout.Page.container.find("#zp_views_search_act").fadeToggle(200) } }, customViewConfig: function (isCustomView) { isCustomView ? (Layout.Page.container.find("#zp_views_actions #viewEditButton").show(), Layout.Page.container.find("#zp_views_actions span").show(), Layout.Page.container.find("#zp_views_actions #viewDeleteButton").show()) : (ZPeople.Module.getData().isAdmin || -1 != Layout.Page.pageId.indexOf("leavetracker-views-applications") && ZPeople.Module.MODULE_DATA.leavetracker.leave_filterops.isdataadmin ? Layout.Page.container.find("#zp_views_actions #viewEditButton").show() : Layout.Page.container.find("#zp_views_actions #viewEditButton").hide(), Layout.Page.container.find("#zp_views_actions span").hide(), Layout.Page.container.find("#zp_views_actions #viewDeleteButton").hide()) }, sharedViewConfig: function (isSharedView, isCustomView) { !isSharedView || isSuperAdmin ? ZPView.customViewConfig(isCustomView) : (Layout.Page.container.find("#zp_views_actions #viewEditButton").hide(), Layout.Page.container.find("#zp_views_actions span").hide(), Layout.Page.container.find("#zp_views_actions #viewDeleteButton").hide()) }, getCustomizeColumnsHTML: function () { var html = "<i class='IC-view-select DB S16 gry' data-toggle='dropdown' aria-expanded='false'></i><ul id='zp_customize_view_dropdown' class='dropdown-menu chklistDd ZPCusPd ZPreg ZPCmn-Arrow top lt'><li class='topSrch'><input id='zp_customize_search' type='search' placeholder='Search' class='form-control'><i class='IC-lens lensIcon'></i></li><li><ul id='zp_customize_chkBoxList' class='chklists'></ul></li><li class='footbtns'><button id='zp_cust_save_btn' class='btn btn-sm btn-primary MR5' type='button' onclick='ZPView.saveCustomizeColumn()'>" + ZPI18N.getString("zp.save") + "</button> <button class='btn btn-sm btn-default' type='button' onclick='ZPView.cancelCustomizeColumn()'>" + ZPI18N.getString("zp.cancel") + "</button></li></ul>"; return html }, getApprovalStatusHTML: function () { var html = "<i class='IC-filter ArwDwn' id='zp_view_approval_filter' data-toggle='dropdown' ralname=" + ZPI18N.getString("zp.status") + " ></i><ul class='dropdown-menu ZPCmn-Arrow top gray lt TabDD' id='zp_status_options'><li value='all'><a href='javascript:;' onclick='ZPView.getRecordsByViewType(\"approval\",\"all\")'>" + ZPI18N.getString("zp.allrequest") + "</a></li><li value='approved'><a href='javascript:;' onclick='ZPView.getRecordsByViewType(\"approval\",\"approved\")';>" + ZPI18N.getString("zp.approved") + "</a></li><li value = 'rejected' ><a href='javascript:;' onclick='ZPView.getRecordsByViewType(\"approval\",\"rejected\")'>" + ZPI18N.getString("zp.rejected") + "</a></li><li value='pending'><a href='javascript:;' onclick='ZPView.getRecordsByViewType(\"approval\",\"pending\")'>" + ZPI18N.getString("zp.pending") + "</a></li><li value='notsubmitted'><a href='javascript:;' onclick='ZPView.getRecordsByViewType(\"approval\",\"notsubmitted\")'>" + ZPI18N.getString("zp.drafts") + "</a></li><li value='cancelled'><a href='javascript:;' onclick='ZPView.getRecordsByViewType(\"approval\",\"cancelled\")'>" + ZPI18N.getString("zp.cancelled") + "</a></li></ul>"; return html }, allCustomizedColumns: {}, originalColumns: {}, selectedCustomizedColumn: {}, getCustomizableColumns: function () { var formID = Layout.Page.urlparam.formId, viewID = Layout.Page.urlparam.viewId; $.ajax({ type: "POST", async: !1, url: "/createViewAction.zp", data: { mode: "getUserCustomViewColumns", formID: formID, viewID: viewID, conreqcsr: csrfToken }, success: function (data) { if (void 0 !== data.error) return void ZPeople.Message.showFailureMsg(data.error.message); var formCompList = data.formCompList; ZPView.selectedCustomizedColumn = data.customizedColumns, ZPView.originalColumns = data.originalColumns, ZPView.constructCustomizeList(formCompList); Layout.Page.container.find("#zp_customize_chkBoxList").children(); $.each(formCompList, function (key, value) { var id = value.formCompID, name = value.displayName, displayname = ZPeople.decodeTxt(value.displayName), tempObj = { id: id, name: name, displayname: displayname }; ZPView.allCustomizedColumns[id] = tempObj }) } }) }, constructCustomizeList: function (formCompList) { if (formCompList.length <= 0) return void Layout.Page.container.find("#zp_customize_chkBoxList").html(ZPI18N.getString("zp.norec")); var li = "", sortedList = ZPUtil.sortByJSONValue(formCompList, "sequenceNo", !0); $.each(sortedList, function (key, value) { var id = value.formCompID, name = value.displayName, tempLi = "<li id='" + id + "'><label class='checkbox'><input onclick='ZPView.customizeCheckBoxAction(this)' type='checkbox'"; tempLi += void 0 !== ZPView.selectedCustomizedColumn[id] ? " checked><span class='ML2'>" + name + "</span></label></li>" : void 0 !== ZPView.originalColumns[id] ? "><span class='ML2'>" + name + "</span></label></li>" : "><span class='ML2'>" + value.displayName + "</span></label></li>", li += tempLi }), Layout.Page.container.find("#zp_customize_chkBoxList").html(li) }, reConstructCustomizeList: function (searchResult) { if (searchResult.length <= 0) return void Layout.Page.container.find("#zp_customize_chkBoxList").html(ZPI18N.getString("zp.norec")); var li = ""; $.each(searchResult, function (key, value) { var id = value.id, tempLi = "<li id='" + id + "'><label class='checkbox'><input onclick='ZPView.customizeCheckBoxAction(this)' type='checkbox'"; tempLi += void 0 !== ZPView.selectedCustomizedColumn[id] ? " checked><span class='ML2'>" + value.name + "</span></label></li>" : "><span class='ML2'>" + value.name + "</span></label></li>", li += tempLi }), Layout.Page.container.find("#zp_customize_chkBoxList").html(li) }, customizeCheckBoxAction: function (obj) { var isChecked = $(obj).is(":checked"), liObj = $(obj).parent().parent(), id = $(liObj).attr("id"); if (isChecked) { var name = $(liObj).text(); ZPView.selectedCustomizedColumn[id] = name } else delete ZPView.selectedCustomizedColumn[id] }, cancelCustomizeColumn: function () { Layout.Page.container.find("#zp_customize_view_columns").removeClass("open") }, saveCustomizeColumn: function () { var viewID = Layout.Page.urlparam.viewId, checkedList = Layout.Page.container.find("#zp_customize_chkBoxList").children().find(":checked"), selectedListNew = []; $.each(checkedList, function (key, value) { var liObj = $(value).parent().parent(); selectedListNew.push($(liObj).attr("id")) }), Layout.Page.container.find("#zp_cust_save_btn").attr("disabled", !0), ZPeople.Request.send("/createViewAction.zp", { mode: "saveUserCustomViewColumns", viewID: viewID, selectedList: selectedListNew.toString() }, ZPView.afterSaveCustomizeColumn) }, afterSaveCustomizeColumn: function (data) { Layout.Page.container.find("#zp_cust_save_btn").removeAttr("disabled"), void 0 === data.error && ZPView.refresh(!0) }, getHeaderFixedHtml: function (html, isFromrelfields) { return isFromrelfields ? html : "<div>" + html + "</div>" + html }, constructRecords: function (recList, params) { prop = {}; var props = ZPView.getViewPropertie(), headersHtml = "<tr>" + (ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? "" : '<th width="30"><div id="zp_customize_view_columns">' + ZPView.getCustomizeColumnsHTML() + "</div></th>") + (ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed || !(ZPView.isAdmin() || ZPForm.Permission.getEditPerm() > 1) ? "" : '<th id="zp_form_record_selection" width="30">' + (ZPView.CURR_VIEWPARAMS.isEmbed || ZPView.isFromrelfields ? "" : '<div><label class="checkbox"><input id="zp_view_sel_record" onclick="ZPView.Actions.selectUnselectRec(false, this, \'all\')" type="checkbox"><span>&nbsp;</span></div>') + '<label class="checkbox"><input id="zp_view_sel_record" onclick="ZPView.Actions.selectUnselectRec(false, this, \'all\')" type="checkbox"><span>&nbsp;</span></th>') + (ZPForm.isApprovalEnabled() ? (ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? '<th width="30" class="ZPThumb">' + ZPView.getHeaderFixedHtml("<span>" + ZPI18N.getString("zp.status") + "</span>", ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + "</th>" : '<th width="30" class="ZPThumb">' + ZPView.getHeaderFixedHtml("<span>" + ZPI18N.getString("zp.status") + ZPView.getApprovalStatusHTML() + "</span>", ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + "</th>") + (ZPView.isApproverDetailsTobeShown ? '<th width="30" class="ZPThumb">' + ZPView.getHeaderFixedHtml("<span>" + ZPI18N.getString("zp.approver") + "</span>", ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + '</th><th width="30" class="ZPThumb">' + ZPView.getHeaderFixedHtml("<span>" + ZPI18N.getString("zp.approvalTime") + "</span>", ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + "</th>" : "") : '<th width="30" class="ZPThumb">') + (recList.isCustomActionEnable ? "<th width='30' name='cb'>" + ZPView.getHeaderFixedHtml(ZPI18N.getString("zp.customaction"), ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + "</th>" : ""), searchfieldHtml = "", isFileAvaiable = !1; if (ZPView.Search.dispFieldArray = [], ZPView.Search.labelNameArray = [], formCompIDArray = [], "NO-RECORDS-FOUND" === params) $.each(recList, function () { if (!ZPUtil.checkIsExistInArray(props.HIDDEN_COLUMNS, this.labelName)) { var labelname = this.labelName; if (-1 != labelname.indexOf(".")) var dispname = labelname.split("."), displayfield = dispname[1] + "(" + dispname[0] + ")"; else displayfield = this.displayName; headersHtml += '<th id="zp_views_field_' + this.labelName + '">' + ZPView.getHeaderFixedHtml("<span>" + this.displayName + "</span> " + (ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed || "20" == this.fieldType ? "" : '<i class="IC-ar-dwn ArwDwn gry" id="zp_view_sorting" data-toggle="dropdown" value ="' + this.displayName + '" ralname="' + this.labelName + '" ftype="' + this.fieldType + '"></i>'), ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + "</th>", 20 !== this.fieldType && (searchfieldHtml += '<li id="filter_field_' + this.formComponentId + '"class="filter-check" value="' + this.labelName + '"><label id="checkbox_finder" class="checkbox" value ="' + this.formComponentId + '"onclick="ZPView.Search.showfilteroptions(this);">' + displayfield + '<span></span></label><div id="filter_options_' + this.formComponentId + '" class="filter-details DN"><div class="form-group">' + ZPView.Search.getSearchTDForField(this) + '</div></div><div id ="search_error" class ="zp-err-msg DN"></div></li>'), ZPView.Search.dispFieldArray.push(this.displayName), ZPView.Search.labelNameArray.push(this.labelName), formCompIDArray.push(this.formComponentId) } }), ZPView.formCompId = formCompIDArray, ZPView.setViewPropertie("formCompId", ZPView.formCompId), void 0 === props.searchBy || props.resfreshSearch ? (ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").html(headersHtml), ZPView.CURR_VIEWPARAMS.isrelatedform || (Layout.Page.container.find("#filter").find("#filterlist").find("li[id^='filter_field_']").remove(), Layout.Page.container.find("#filter").find("#filterlist").append(searchfieldHtml)), ZPView.setViewPropertie("resfreshSearch", !1)) : (ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").html(headersHtml), ZPView.CURR_VIEWPARAMS.isrelatedform || ZPView.Search.resetFieldsForFilter(), ZPView.setViewPropertie("resfreshSearch", !1)); else { var showSumRow = (recList.isCustomActionEnable, recList.showSumRow), sumRowArray = recList.sumRowsArray, sumRowList = recList.sumRowArray; $.each(recList.fieldHeaders, function () { if (!ZPUtil.checkIsExistInArray(props.HIDDEN_COLUMNS, this.labelName)) { isFileAvaiable = isFileAvaiable || this.fieldType == ZPForm.Field.FILE_UPLOAD || this.fieldType == ZPForm.Field.IMAGE; var labelname = this.labelName; if (-1 != labelname.indexOf(".")) var dispname = labelname.split("."), displayfield = dispname[1] + "(" + dispname[0] + ")"; else displayfield = this.displayName; headersHtml += '<th id="zp_views_field_' + this.labelName + '">' + ZPView.getHeaderFixedHtml("<span>" + this.displayName + "</span> " + (ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed || "20" == this.fieldType ? "" : '<i class="IC-ar-dwn ArwDwn gry" id="zp_view_sorting" data-toggle="dropdown" value ="' + this.displayName + '" ralname="' + this.labelName + '" ftype="' + this.fieldType + '"></i>'), ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? !0 : !1) + "</th>", 20 !== this.fieldType && (searchfieldHtml += '<li id="filter_field_' + this.formComponentId + '"class="filter-check" value="' + this.labelName + '"><label id="checkbox_finder" class="checkbox" value ="' + this.formComponentId + '"onclick="ZPView.Search.showfilteroptions(this);">' + displayfield + '<span></span></label><div id="filter_options_' + this.formComponentId + '" class="filter-details DN"><div class="form-group">' + ZPView.Search.getSearchTDForField(this) + '</div></div><div id ="search_error" class ="zp-err-msg DN"></div></li>'), ZPView.Search.dispFieldArray.push(this.displayName), ZPView.Search.labelNameArray.push(this.labelName), formCompIDArray.push(this.formComponentId) } }), ZPView.formCompId = formCompIDArray, ZPView.setViewPropertie("formCompId", ZPView.formCompId), ZPView.setViewPropertie("isFileAvaiable", isFileAvaiable), void 0 === props.searchBy || props.resfreshSearch ? (ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").html(headersHtml), ZPView.CURR_VIEWPARAMS.isrelatedform || (Layout.Page.container.find("#filter").find("#filterlist").find("li[id^='filter_field_']").remove(), Layout.Page.container.find("#filter").find("#filterlist").append(searchfieldHtml)), ZPView.setViewPropertie("resfreshSearch", !1)) : (ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").html(headersHtml), ZPView.CURR_VIEWPARAMS.isrelatedform || ZPView.Search.resetFieldsForFilter(), ZPView.setViewPropertie("resfreshSearch", !1)); var recCont = ZPView.VIEW_CONTAINER.find("#zp_views_records_table"); if (recCont.children("[id!=zp_views_recordheader]").remove(), ZPView.VIEW_CONTAINER.find("#zp_views_container").find("#no_data").addClass("DN"), void 0 === props.groupBy && void 0 === recList.groupedHeaderList) { var resp = ZPView.getRowHtml(recList.fieldHeaders, recList.customBtn, recList.recordDetails, showSumRow, sumRowArray, sumRowList); recCont.append(resp.html), resp.totselectbox ? recCont.find("#zp_view_sel_record").parent("label").removeClass("DN") : recCont.find("#zp_view_sel_record").parent("label").addClass("DN") } else { var groupByValLen = recList.groupedHeaderList.length; if (void 0 !== groupByValLen && groupByValLen > 0) { var headerLen = ZPView.VIEW_CONTAINER.find("#zp_views_recordheader tr:first").children().length; for (groupValCnt = 0; groupValCnt < groupByValLen; groupValCnt++) { var groupByVal = recList.groupedHeaderList[groupValCnt]; recCont.append('<thead><tr><th class="bg" colspan="' + headerLen + '">' + groupByVal + "</th></tr></thead>"); var records = recList.recordDetails[groupValCnt]; if (void 0 !== sumRowArray && groupValCnt <= sumRowArray.length) var sumRows = sumRowArray[groupValCnt]; recCont.append(ZPView.getRowHtml(recList.fieldHeaders, recList.customBtn, records, !0, sumRowList, sumRows).html) } recCont.append(ZPView.getRowHtml(recList.fieldHeaders, recList.customBtn, [], !0, sumRows, sumRowList).html) } } recCont.find("a[target=_blank]").each(function () { ZPeople.redirectFix(this) }), 0 === recCont.find("[id=zp_view_select_rectd]").length && ZPView.VIEW_CONTAINER.find("#zp_form_record_selection").remove() } if (ZPView.CURR_VIEWPARAMS.isEmbed || ZPView.isFromrelfields) ZPView.VIEW_CONTAINER.find("#zp_customize_view_columns").hide(); else { var selectedViewID = Layout.Page.urlparam.viewId; $.each(ZPeople.Module.getData().viewDetails.message, function (key, value) { if (value.viewId === selectedViewID) { var isCustomView = value.isCustomView; return ("" === value.ownerId || value.ownerId.length <= 0) && (isCustomView = !1), isCustomView ? ZPView.VIEW_CONTAINER.find("#zp_customize_view_columns").css({ display: "none" }) : ZPView.VIEW_CONTAINER.find("#zp_customize_view_columns").css({ display: "inline" }), !1 } }) } ZPView.chooseViewOptions(), "NO-RECORDS-FOUND" !== params && ZPView.registerViewActions(recCont), params.searchBy && ZPView.Search.toggleSearch(); var approval = "approval"; if (void 0 !== Layout.Page.urlparam[approval]) { var statuslist = Layout.Page.container.find("#zp_status_options"); $.each($(statuslist).find("li"), function () { $(this).attr("value") == Layout.Page.urlparam[approval] ? $(this).addClass("active") : $(this).removeClass("active") }) } ZPView.CURR_VIEWPARAMS.isEmbed && ZPView.VIEW_CONTAINER.find("#forms_norecordfound").hide(), ("P_MultiRater" === ZPForm.getTableName() || "P_MultiRater_Approval" === ZPForm.getTableName()) && ZPView.VIEW_CONTAINER.find("[id^=zp_view_recmoreaction]").remove(), ZPView.CURR_VIEWPARAMS.isEmbed || ZPView.isFromrelfields || ZPView.resetTablePosition(), setTimeout(function () { ZPView.postLoadInit(prop) }, 150) }, postLoadInit: function (prop) { prop.isSearchInit && (ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("select").select2(), ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("#zp_view_search_container").find("input[type=text]").keyup(function (event) { 13 === event.keyCode && ZPView.Search.getRecordsBySearchParam() })), ZPView.CURR_VIEWPARAMS.isEmbed || ZPView.isFromrelfields || ZPView.handleTablePositionForView() }, chooseViewOptions: function () { ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("[id=zp_view_sorting]").click(function () { $(this).parent().addClass("dropdown"), ZPView.showColumnActions(this) }), Layout.Page.container.find("#filter_section").find("[id^=filter_options_]").find("[id^=search_options_]").change(function () { var operType = $(this).val(), inp = $(this).siblings("#zp_search_viewinp"), labelname = inp.attr("labelname"), ftype = inp.attr("ftype"), disableInpBtn = ZPView.Search.isDisable(operType), value = ""; "58" !== operType || disableInpBtn ? (value = $(inp).find(".form-control").val(), inp.html(("10" === ftype || "22" === ftype ? '<div class="zpcal">' : "<div>") + '<input class ="form-control" searchenb="true" ' + (disableInpBtn ? 'disabled="true"' : "") + ' labelname="' + labelname + '" ' + ("10" === ftype || "22" === ftype ? 'caltype="searchfilter"' : "") + ' type="text" class="inptxt"/></div>'), disableInpBtn || $(inp).find(".form-control").val(value)) : (value = $(inp).find(".form-control").val(), inp.html(("10" === ftype || "22" === ftype ? '<div class="zpcal">' : "<div>") + '<input class ="form-control" searchenb="true" id="from" type="text" caltype="searchfilter" class="inptxt"/></div>' + ("10" === ftype || "22" === ftype ? '<div class="zpcal">' : "<div>") + '<input class ="form-control"searchenb="true" id="to" caltype="searchfilter" type="text" class="inptxt"/></div>'), $(inp).find(".form-control").val(value)), "10" === ftype ? inp.find("[searchenb=true]").click(function (event) { Calendar.setUpCalendar(event, this) }) : "22" == ftype && inp.find("[searchenb=true]").click(function (event) { Calendar.setUpCalendar(event, this, 1) }), setTimeout(function () { $(inp).find(".form-control")[0].focus() }) }), Layout.Page.container.find("#filter_section").find("[id^=filter_options_]").find("[ftype=10]").each(function () { $(this).find("[searchenb=true]").click(function (event) { Calendar.setUpCalendar(event, this) }) }), Layout.Page.container.find("#filter_section").find("[id^=filter_options_]").find("[ftype=22]").each(function () { $(this).find("[searchenb=true]").click(function (event) { Calendar.setUpCalendar(event, this, 1) }) }), ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("[id=zp_views_group_property]").find("li .IC-tick").remove(); var prevViewProp = ZPView.getViewPropertie(); if (void 0 !== prevViewProp.groupBy) { var groupByProps = prevViewProp.groupBy.split(";"); for (i = 0; i < groupByProps.length; i++) { var gorupByLabArr = groupByProps[i].split(":"), groupByObj = ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("#zp_views_field_" + ZPUtil.escapeSelector(gorupByLabArr[0])).find("#zp_views_group_property"); "true" === gorupByLabArr[1] ? groupByObj.find("#zp_lab_asc").append('<div class="IC-tick gry PA"></div>') : groupByObj.find("#zp_lab_desc").append('<div class="IC-tick gry PA"></div>') } } }, getRowHtml: function (headers, customBtn, records, showsumrow, sumRowArray, sumrowList) { var deletePerm, totselectbox = !1; void 0 !== customBtn && customBtn.length > 0 && (CustomAction[Layout.Page.urlparam.viewId + ""] = customBtn); var recRow = "<tbody>"; for (isTAskAvaialble = Task.isTaskAvailable(), recCnt = 0; recCnt < records.length; recCnt++) { var recObj = records[recCnt], isDraft = !1; 4 == recObj.approvalStatus && (isDraft = !0, ZPView.draftrecids.push(recObj.recordId)); var editPerm = isDraft || recObj.approvalStatus != zpconst.ApprovalStatus.Cancelled && (ZPView.isAdmin() || (!ZPForm.isApprovalEnabled() || recObj.approvalStatus != zpconst.ApprovalStatus.Approved) && ZPForm.Permission.isAllowed(recObj.ownerID, ZPForm.Permission.getEditPerm())); deletePerm = isDraft || ZPView.isAdmin() || ZPForm.Permission.isAllowed(recObj.ownerID, ZPForm.Permission.getDeletePerm()), "P_EmployeeLeave" === ZPForm.getTableName() && (11 === recObj.approvalStatus && (editPerm = !1), Leave.Util.isCurPageAdmin() || (editPerm = deletePerm = !1)); var approverPhotopath = "", approverName = "", time = ""; if (ZPView.isApproverDetailsTobeShown) { var approver = recObj.approverDtls; approver && (approver.isAutoApproved ? recObj.approvalStatus == zpconst.ApprovalStatus.Approved ? (approverPhotopath = '<img class="Usrimg"  height=44 src="/people/images/auto-app.jpg">', approverName = ZPI18N.getString("zp.systemapproved")) : recObj.approvalStatus == zpconst.ApprovalStatus.Rejected ? (approverPhotopath = '<img class="Usrimg"  height=44 src="/people/images/auto-app.jpg">', approverName = ZPI18N.getString("zp.systemrejected")) : recObj.approvalStatus == zpconst.ApprovalStatus.Pending && (approverPhotopath = '<img class="Usrimg"  height=44 src="/people/images/auto-app.jpg">', approverName = ZPI18N.getString("zp.pending")) : (approverName = approver.dispName, approver.photopath && (approverPhotopath = '<img src="' + approver.photopath + '"  height=44 class="Usrimg">'), time = approver.time), "" != approverPhotopath && (approverPhotopath = '<div class="AprvImg" title="' + approverName + '" data-toggle="tooltip" data-container="body" data-placement="top">' + approverPhotopath + "</div>")) } var isSendAgrm = ZPSetupCommon.isEmpty(recObj.agreementId) || "null" === recObj.agreementId ? !1 : !0, previewMethod = ZPSetupCommon.isEmpty(recObj.module) || "4" !== recObj.module ? 'Agreements.getAgreementPreview("' + recObj.agreementId + '",this)' : 'Envelope.getEnvelopePreview("' + recObj.agreementId + '",this)', previewTitle = ZPSetupCommon.isEmpty(recObj.module) || "4" !== recObj.module ? ZPI18N.getString("zp.agreementdtls") : ZPI18N.getString("zp.envelopedtls"); ZPSetupCommon.isEmpty(recObj.module) || "6" !== recObj.module || (previewMethod = 'Zohosign.getDocumentPreview("' + recObj.agreementId + '",this)', previewTitle = ZPI18N.getString("zp.documentdtls")); var checkboxneeded = !this.CURR_VIEWPARAMS.isEmbed && (ZPView.isAdmin() || editPerm); totselectbox = totselectbox || checkboxneeded, recRow += '<tr id="zp_view_record_' + recObj.recordId + '" isDraft="' + isDraft + '" isAgreementSent = "' + isSendAgrm + '" agreeId = "' + recObj.agreementId + '"module=' + recObj.module + '  recordid="' + recObj.recordId + '">' + (ZPView.isFromrelfields || ZPView.CURR_VIEWPARAMS.isEmbed ? "" : '<td id="zp_view_moreactiontd" class="PL20 dropdown ZPCusDrs">' + ('<div data-toggle="dropdown" id="zp_view_recmoreaction" class="IC-more S16 DN gry CP dropdown-toggle"></div><ul class="dropdown-menu ZPCmn-Arrow top gray MorDD">' + ("<li><a href=\"javascript:;\" onclick=\"ZPView.Record.getFormPage('VIEW', '" + recObj.recordId + "')\">" + ZPI18N.getString("zp.view") + "</a></li>") + (editPerm ? "<li><a href=\"javascript:;\" onclick=\"ZPView.Record.getFormPage('EDIT', '" + recObj.recordId + "')\">" + ZPI18N.getString("zp.edit") + "</a></li>" : "") + (deletePerm ? '<li><a href="javascript:;" onclick="ZPView.Actions.deleteThisRecord(\'' + recObj.recordId + "');\">" + ZPI18N.getString("zp.delete") + "</a></li>" : "") + (ZPView.isAdmin() ? '<li><a href="javascript:;" onclick="ZPForm.Record.getAuditHistoryForRecord(\'' + ZPView.CURR_VIEWPARAMS.formId + "', '" + recObj.recordId + "', true);\">" + ZPI18N.getString("zp.history") + "</a></li>" : "") + (isTAskAvaialble ? '<li><a href="javascript:;" onclick="Task.createNewTask(\'' + ZPView.CURR_VIEWPARAMS.formId + "', '" + recObj.recordId + "')\">" + ZPI18N.getString("zp.addtask") + "</a></li>" : "") + (ZPView.isAdmin() ? '<li class="divider"></li>' : "") + (ZPView.isAdmin() && (isAdobeConfig && ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId].isAdobeSigninEnabled || isDocuConfig || ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId].isDocuSigninEnabled || isZSConfig || ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId].isZohoSigninEnabled) && !ZPSetupCommon.isEmpty(recObj.agreementId) && "null" !== recObj.agreementId ? '<li><a href="javascript:;" onclick=' + previewMethod + ">" + previewTitle + "</a><li>" : "") + (ZPView.isAdmin() ? '<li><a onclick=MMtemplte.constructTemplateList("form",null,null,this,"Merge");>' + ZPI18N.getString("zp.mailmerge") + "</a></li>" : "") + "</ul>") + "</td>") + (ZPView.isFromrelfields || this.CURR_VIEWPARAMS.isEmbed || !(ZPView.isAdmin() || ZPForm.Permission.getEditPerm() > 1) ? "" : '<td id="zp_view_select_rectd">' + (checkboxneeded ? '<div class="checkbox"><input type="checkbox"  onclick="ZPView.Actions.selectUnselectRec(false, this, \'single\', \'' + recObj.recordId + '\')" id="zp_view_sel_record"><label></label></div>' : "") + "</td>") + (ZPForm.isApprovalEnabled() ? '<td class="ZPThumb">' + (ZPForm.isApprovalEnabled() ? 0 === recObj.approvalStatus ? '<i class="IC-unlike  red S21" data-toggle="tooltip" data-placement="top" data-original-title="' + ZPI18N.getString("zp.rejected") + '"></i>' : 1 === recObj.approvalStatus ? '<i class="IC-like grn S21"  data-toggle="tooltip" data-placement="top" data-original-title="' + ZPI18N.getString("zp.approved") + '"></i>' : -1 === recObj.approvalStatus ? '<i class="IC-pending org S18"  data-toggle="tooltip" data-placement="top" data-original-title="' + ZPI18N.getString("zp.approvalpending") + '"></i>' : -2 !== recObj.approvalStatus && -3 !== recObj.approvalStatus || !ZPForm.isApprovalEnabled() ? 2 === recObj.approvalStatus ? '<i class="IC-rejected red S18"  data-toggle="tooltip" data-placement="top" data-original-title="' + ZPI18N.getString("zp.recordcancelled") + '"></i>' : 11 === recObj.approvalStatus || 14 === recObj.approvalStatus || "P_MultiRater" !== ZPForm.getTableName() ? "" : '<i class="IC-draft gry S16"  data-toggle="tooltip" data-placement="top" data-original-title="' + ZPI18N.getString("zp.savedasdraft") + '"></i>' : '<i class="CR-notsend gry S18"  data-toggle="tooltip" data-placement="top" data-original-title="' + ZPI18N.getString("zp.notsentforapproval") + '"></i>' : "") + "</td>" + (ZPView.isApproverDetailsTobeShown ? '<td class="approver">' + approverPhotopath + '</td><td class="approvedtime">' + time + "</td>" : "") : '<td class="ZPThumb"></td>'), void 0 !== customBtn && 0 !== customBtn.length && (recRow += CustomAction.construcCBListView(CustomAction[Layout.Page.urlparam.viewId + ""], recObj.recordId)), recRow = ZPView.getFieldHtml(headers, recObj.fieldDetails, recRow, recObj.recordId), recRow += "</tr>" } if (showsumrow && void 0 !== sumrowList) for (recRow += '<tr id="sum_row">' + (ZPView.isFromrelfields ? "" : "<td></td>") + (ZPView.isFromrelfields || this.CURR_VIEWPARAMS.isEmbed || !(ZPView.isAdmin() || ZPForm.Permission.getEditPerm() > 1) ? "" : "<td></td>") + (ZPView.isFromrelfields ? "" : "<td></td>") + (ZPView.isApproverDetailsTobeShown ? "<td></td><td></td>" : ""), void 0 !== customBtn && 0 !== customBtn.length && (recRow += "<td></td>"), sumrowlist = 0; sumrowlist < sumrowList.length; sumrowlist++) sumrowList[sumrowlist].colSpan > 1 && (recRow += '<td colspan="' + (sumrowList[sumrowlist].colSpan - 1) + '"></td>'), recRow += "<td><div><b>" + sumrowList[sumrowlist].sumValue + "</b></div></td>"; return recRow += "</tr></tbody>", { html: recRow, totselectbox: totselectbox } }, getFieldHtml: function (headers, fieldDetails, recRow, recordId) { var viewProp = ZPView.getViewPropertie(); return $.each(fieldDetails, function (ind, flddtl) { var labelName = this.labelName; if (!ZPUtil.checkIsExistInArray(viewProp.HIDDEN_COLUMNS, labelName)) { var fieldType = headers[ind].fieldType, value = this; (fieldType === ZPForm.Field.IMAGE || fieldType === ZPForm.Field.FILE_UPLOAD) && (value = this.value, value || (value = this.downloadUrl ? this.downloadUrl : "")), ZPUtil.Validation.isEmpty(value) || (fieldType === ZPForm.Field.IMAGE ? value = '<img src="' + this.downloadUrl + '" ' + (this.isEmpPhoto && "P_Employee" === ZPForm.getTableName() ? ' imgtype="thumb" empid="' + recordId + '"' : "") + ' height="44">' : fieldType === ZPForm.Field.EMAIL_ADDRESS ? value = '<a href="mailto:' + value + '">' + value + "</a>" : fieldType === ZPForm.Field.DATE_TIME ? value = Calendar.convertTo12Hours(value) : fieldType === ZPForm.Field.URL ? value = '<a rel="noreferrer" href="' + value + '"  target="_blank">' + value + "</a>" : fieldType === ZPForm.Field.FILE_UPLOAD ? value = ZPView.CURR_VIEWPARAMS.tableName === Timetracker.constants.JOB_TABLE && "Attachment" === labelName ? Timetracker.views.handleJobAttachment(this) : '<a rel="noreferrer" onclick="window.open(\'' + this.downloadUrl + '\');" href="javascript:;">' + value + "</a>" : "P_TimesheetJob" === ZPForm.getTableName() && fieldType === ZPForm.Field.NUMBER && "Hours" === labelName && (value = Calendar.minstohrs(value))), recRow += '<td id="zp_views_field_' + headers[ind].labelName + '" ' + (fieldType === ZPForm.Field.TEXT_AREA ? ' class="ZPExpd"' : "") + " " + (this.isEmpPhoto && "Photo" == headers[ind].labelName ? ' photo="true"' : "") + ">", recRow += fieldType === ZPForm.Field.TEXT_AREA ? '<div class = "popHover" data-popover="true" data-html="true" data-content="">' + value + "</div>" : value, recRow += "</td>" } }), recRow }, registerViewActions: function (recCont) { recCont.find("tr").mouseenter(function () { $(this).find("#zp_view_recmoreaction").fadeIn(100) }), recCont.find("tr").mouseleave(function () { $(this).find("#zp_view_recmoreaction").parent().removeClass("open"), $(this).find("#zp_view_recmoreaction").fadeOut(100) }), recCont.find("tr[id^=zp_view_record_]").click(function (event) { if (ZPView.MOREACT_MOUSEDOWN) ZPView.MOREACT_MOUSEDOWN = !1; else { var recordId = $(this).attr("recordid"); ZPView.Record.getFormPage("VIEW", recordId, this) } }), recCont.find("tr[id^=zp_view_record_]").find("[id='zp_view_select_rectd'],[id='zp_view_moreactiontd'],td[photo=true]").mousedown(function () { ZPView.MOREACT_MOUSEDOWN = !0 }), recCont.find("td[photo=true]").click(function () { var recId = $(this).parent().attr("recordid"); ZPeople.showProfilePhotoById(recId) }), recCont.find('[data-popover="true"]').each(function () { $(this).data("content", $(this).html()) }), ZPView.VIEW_CONTAINER.popover({ selector: "[data-popover].popHover", trigger: "click hover", placement: "bottom", delay: { show: 50, hide: 50 } }), recCont.on("click", "#zp_customize_view_dropdown", function (e) { $(this).hasClass("ZPnotifyBox") && e.stopPropagation(), $(this).hasClass("ZPplusBox") && e.stopPropagation(), $(this).hasClass("ZPCusPd") && e.stopPropagation() }), recCont.find("#zp_customize_view_columns").on("show.bs.dropdown", function (event) { Layout.Page.container.find("#zp_customize_chkBoxList").empty(), ZPView.getCustomizableColumns() }), recCont.find("#zp_customize_view_columns").on("shown.bs.dropdown", function (event) { Layout.Page.container.find("#zp_customize_chkBoxList").scrollTop(0) }), recCont.on("keyup", "#zp_customize_search", function (e) { var searchStr = $(this).val().trim(); if (searchStr.length <= 0) return void ZPView.reConstructCustomizeList(ZPView.allCustomizedColumns); searchStr = searchStr.toLowerCase(); var tempList = []; $.each(ZPView.allCustomizedColumns, function (key, value) { var val = value.displayname; -1 !== val.toLowerCase().indexOf(searchStr) && tempList.push(value) }), ZPView.reConstructCustomizeList(tempList) }) }, getColumnSortGroup: function (labelName) { var viewProp = ZPView.getViewPropertie(), result = {}; return void 0 !== viewProp.sortBy && "" !== viewProp.sortBy.trim() && (result.sortBy = ZPView.getColumnAscOrDesc(viewProp.sortBy, labelName)), void 0 !== viewProp.groupBy && "" !== viewProp.groupBy.trim() && (result.groupBy = ZPView.getColumnAscOrDesc(viewProp.groupBy, labelName)), result }, getColumnAscOrDesc: function (orgStr, labelName) { for (var organizedLabs = orgStr.split(";"), labCnt = 0; labCnt < organizedLabs.length; labCnt++) { var labName = organizedLabs[labCnt]; if (void 0 !== labName && -1 !== labName.indexOf(labelName)) return -1 !== labName.indexOf("false") ? !1 : !0 } }, showColumnActions: function (Obj) { var labelName = $(Obj).attr("ralname"), sortGroupDtl = ($(Obj).attr("value"), ZPView.getColumnSortGroup(labelName)), sortBy = sortGroupDtl.sortBy, groupBy = sortGroupDtl.groupBy, ftype = parseInt($(Obj).attr("ftype")); if (ftype !== ZPForm.Field.IMAGE) { var dropDownHtml = '<ul class="dropdown-menu ZPCmn-Arrow top gray lt TabDD" id="zp_column_options">'; dropDownHtml += '<li class="PR"><a href="javascript:;">' + ZPI18N.getString("zp.sort") + '</a> <div class="IC-ar-dwn gry PA"></div></li><li id="zp_views_sort_property"><ul class="sub"><li class="PR"><a href="javascript:;" onclick="ZPView.sortOrGroupColumn(this, \'' + labelName + "', true, 'sort');\">" + ZPI18N.getString("zp.asc") + "</a>" + (sortBy === !0 ? '<div class="IC-tick gry PA"></div>' : "") + '</li><li class="PR"><a href="javascript:;" onclick="ZPView.sortOrGroupColumn(this, \'' + labelName + "', false, 'sort');\">" + ZPI18N.getString("zp.desc") + "</a>" + (sortBy === !1 ? '<div class="IC-tick gry PA"></div>' : "") + '</li></ul></li><li class="divider" role="separator"></li>', dropDownHtml += '<li class="PR"><a href="javascript:;">' + ZPI18N.getString("zp.group") + '</a> <div class="IC-ar-dwn gry PA"></div></li><li id="zp_views_group_property"><ul class="sub"><li class="PR" id="zp_lab_asc"><a href="javascript:;" onclick="ZPView.sortOrGroupColumn(this, \'' + labelName + "', true, 'group');\">" + ZPI18N.getString("zp.asc") + "</a>" + (groupBy === !0 ? '<div class="IC-tick gry PA"></div>' : "") + '</li><li class="PR" id="zp_lab_desc"><a href="javascript:;" onclick="ZPView.sortOrGroupColumn(this, \'' + labelName + "', false, 'group');\">" + ZPI18N.getString("zp.desc") + "</a>" + (groupBy === !1 ? '<div class="IC-tick gry PA"></div>' : "") + '</li></ul></li><li class="divider" role="separator"></li>', dropDownHtml += '<li><a href="javascript:;" onclick="ZPView.Search.resetFieldsForFilter(\'' + labelName + "')\">" + ZPI18N.getString("zp.search") + "</a></li>", dropDownHtml += "</ul>" } $(Obj).after(dropDownHtml), $(Obj).parent().on("hide.bs.dropdown", function () { $(this).find("#zp_column_options").remove(), $(this).parent().removeClass("dropdown") }) }, sortOrGroupColumn: function (Obj, labelName, isAsc, type) { var isReset = (ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("#zp_views_field_" + ZPUtil.escapeSelector(labelName)), !1), prevViewProp = ZPView.getViewPropertie(), value = labelName + ":" + isAsc; if ((void 0 !== prevViewProp.sortBy && "sort" === type && -1 !== prevViewProp.sortBy.indexOf(value) || void 0 !== prevViewProp.groupBy && "group" === type && -1 !== prevViewProp.groupBy.indexOf(value)) && (isReset = !0), isReset) void 0 !== prevViewProp.groupBy && "group" === type ? value = ZPView.getCustomizedColumnsValue(prevViewProp.groupBy, value, isReset, labelName) : void 0 !== prevViewProp.sortBy && "sort" === type && (value = ZPView.getCustomizedColumnsValue(prevViewProp.sortBy, value, isReset, labelName)), "" !== value ? ZPView.setViewPropertie(type + "By", value) : ZPView.removeViewProperty(type + "By"); else { if (void 0 !== prevViewProp.sortBy && "sort" === type) { var sortByVal = ZPView.getCustomizedColumnsValue(prevViewProp.sortBy, value, isReset, labelName); "" !== sortByVal.trim() && (value = sortByVal) } if (void 0 !== prevViewProp.groupBy && "group" === type) { var groupByVal = ZPView.getCustomizedColumnsValue(prevViewProp.groupBy, value, isReset, labelName); "" !== groupByVal.trim() && (value = groupByVal) } ZPView.setViewPropertie(type + "By", value) } ZPView.refresh(!0) }, getCustomizedColumnsValue: function (organizeByStr, value, isReset, labelName) { var organizeByVal = "", organizeByLst = organizeByStr.split(";"), isReplaced = !1; for (i = 0; i < organizeByLst.length; i++) !isReset || value === organizeByLst[i] && -1 !== organizeByLst[i].indexOf(labelName) ? isReset || (-1 !== organizeByLst[i].indexOf(labelName) ? (organizeByVal += value, isReplaced = !0) : organizeByVal += organizeByLst[i]) : organizeByVal += organizeByLst[i], "" !== organizeByVal.trim() && organizeByVal.lastIndexOf(";") !== organizeByVal.length - 1 && (organizeByVal += ";"); return isReset || isReplaced || (organizeByVal += value + ";"), organizeByVal }, getRecordsByViewType: function (viewType, value) { void 0 !== viewType && void 0 !== value && (Layout.Page.urlparam[viewType] = value), ZPView.setViewPropertie("refreshStatus", !0), ZPView.setViewPropertie("startInd", 1), window.location.href = "#" + Layout.UrlConf.generatePageHash() }, hideThisColumn: function (labelName) { var viewProp = ZPView.getViewPropertie(); return void 0 === viewProp.HIDDEN_COLUMNS && (viewProp.HIDDEN_COLUMNS = new Array), viewProp.HIDDEN_COLUMNS.push(labelName), 1 === ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("th[id^=zp_views_field_]:visible").length ? void ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.cannothideallcolumns")) : void ZPView.VIEW_CONTAINER.find("[id=zp_views_field_" + ZPUtil.escapeSelector(labelName) + "]").hide() }, initPageComponenets: function () { ZPForm.CONF = ZPForm.getFormConf(ZPView.CURR_VIEWPARAMS.formId); var viewPerm = ZPForm.Permission.getViewPerm(); if ((ZPForm.Permission.isExportAllowed() || ZPForm.Permission.isImportAllowed() || ZPForm.Permission.isBulkImportAllowed() || ZPForm.isLocAdmin()) && (Layout.Page.container.find("#zp_views_impexp").show(), ZPForm.isAdmin() && ZPForm.CONF.isAuditHistoryEnabled && Layout.Page.container.find("#zp_views_history_exp").show(), (ZPForm.Permission.isExportAllowed() || ZPForm.isLocAdmin()) && Layout.Page.container.find("#zp_views_exp").show(), (ZPForm.Permission.isImportAllowed() || ZPForm.isLocAdmin()) && Layout.Page.container.find("#zp_views_imp").show(), ZPForm.Permission.isBulkImportAllowed() && Layout.Page.container.find("#zp_views_impbulk").show()), 0 !== viewPerm || ZPForm.isLocAdmin()) { var optVal = ""; isAprof = isAdminProfile && ZPForm.isAdmin(), (viewPerm === zpconst.Permission.ALL_DATA || isAprof) && (optVal = '<option value="all">' + ZPI18N.getString("zp.alldata") + "</option>"), (viewPerm === zpconst.Permission.ALL_DATA || viewPerm === zpconst.Permission.TEAM_DATA || isAprof) && (optVal += '<option value="mydep">' + ZPI18N.getString("zp.teamdata") + "</option>"), (viewPerm === zpconst.Permission.ALL_DATA || viewPerm === zpconst.Permission.TEAM_DATA || viewPerm === zpconst.Permission.SUB_DATA || isAprof) && (optVal += '<option value="sub">' + ZPI18N.getString("zp.subdata") + "</option>", optVal += '<option value="dirsub">' + ZPI18N.getString("zp.dirsubdata") + "</option>"), (viewPerm === zpconst.Permission.ALL_DATA || viewPerm === zpconst.Permission.TEAM_DATA || viewPerm === zpconst.Permission.MY_DATA || isAprof) && (optVal += '<option value="self">' + ZPI18N.getString("zp.mydata") + "</option>"), ZPForm.isLocAdmin() && (optVal += '<option value="loc">' + ZPI18N.getString("zp.locdata") + "</option>"), Layout.Page.container.find("#zp_views_typeofview").html(optVal); var filterName = Layout.Page.container.find("#zp_views_typeofviews").html(optVal).attr("reqtype"); ZPView.viewFilterReg("zp_views_typeofviews", filterName); var typeofview = Layout.Page.container.find("#zp_views_typeofviews").val(); "self" == typeofview ? Layout.Page.container.find("#emplyoee_status").hide() : Layout.Page.container.find("#emplyoee_status").show() } else Layout.Page.container.find("#zp_views_typeofviews").addClass("DN"); !ZPForm.isLocAdmin() && (0 === ZPForm.Permission.getAddPerm() || 4 === ZPForm.Permission.getAddPerm() && 0 === ZPeople.getSubUsers().length) || -1 !== Layout.Page.pageId.indexOf("leavetracker-views-form-formId") || "P_Goals" == ZPForm.getTableName() || "P_MultiRater" == ZPForm.getTableName() || "P_MultiRater_Approval" == ZPForm.getTableName() ? Layout.Page.container.find("#zp_record_add_btn").remove() : (Layout.Page.container.find("#zp_record_add_btn").removeClass("DN"), -1 !== Layout.Page.pageId.indexOf("task-list") && Layout.Page.container.find("#zp_record_add_btn").text(ZPI18N.getString("zp.addtask"))), Layout.Page.container.find("#zp_view_rec_perpage").change(function () { ZPView.setViewPropertie("updateCount", $(this).val()), ZPView.setViewPropertie("startInd", 1), ZPView.refresh(!0) }).select2({ minimumResultsForSearch: 1 / 0 }), Layout.Page.container.find("#zp_view_close_selection").click(function () { ZPView.Actions.DELETE_RECIDS = new Array; Layout.Page.container.find("[id=zp_view_sel_record]:checked").removeAttr("checked"); Layout.Page.container.find("#zp_view_record_delete").fadeOut(200, function () { $(this).siblings("#zp_views_formrecactions").fadeIn(200) }) }), Layout.Page.container.find("#zp_views_search_filter").removeClass("DN") }, viewFilterReg: function (id, filterName) { Layout.Page.container.find("#" + id).change(function () { if (!ZPView.isSystemView()) { var reqType = $(this).attr("reqtype"); ZPView.getRecordsByViewType(reqType, this.value), "typeOfView" == reqType && ("self" == this.value ? Layout.Page.container.find("#emplyoee_status").addClass("DN") : ZPForm.isEmployeeLookupPresent() && Layout.Page.container.find("#emplyoee_status").removeClass("DN")), ZPView.setViewPropertie("refreshCount", !0), ZPView.setViewPropertie("resfreshSearch", !0) } }).removeClass("DN").select2({ minimumResultsForSearch: 1 / 0 }), void 0 !== Layout.Page.urlparam[filterName] && Layout.Page.container.find("#" + id).select2("val", Layout.Page.urlparam[filterName]) }, getRecordCount: function () { var params = { mode: "getRecordCount", formId: ZPView.CURR_VIEWPARAMS.formId, viewId: ZPView.CURR_VIEWPARAMS.viewId }, viewProps = ZPView.getViewPropertie(); void 0 !== viewProps.typeOfView && (params.typeOfView = viewProps.typeOfView), void 0 !== viewProps.approval && (params.approvalStatus = viewProps.approval), void 0 !== viewProps.empstatus ? params.employeeStatus = viewProps.empstatus : void 0 !== ZPView.CURR_VIEWPARAMS.employeeStatus ? params.employeeStatus = ZPView.CURR_VIEWPARAMS.employeeStatus : params.employeeStatus = "activeemprecord", viewProps.searchBy && (params.searchBy = JSON.stringify(viewProps.searchBy)), ZPeople.Request.send(ZPView.URL, params, ZPView.showRecordCount) }, showRecordCount: function (data) { 7e3 === data.code && (Layout.Page.container.find("#zp_views_recordcount").html(data.message.recordCount).removeAttr("onclick"), ZPView.setViewPropertie("totalRecCount", data.message.recordCount)) }, confirmDeleteRecord: function () { ZPeople.BSModal.confirm(ZPForm.Record.deleteRecord) }, confirmCancelRecord: function () { ZPeople.BSModal.confirm(ZPForm.Record.cancelRecord, ZPI18N.getString("zp.confirm"), ZPI18N.getString("zp.confirmcancelrecord"), "", "IC-tick") }, sendForSignDocs: function (type, isMailMerge) { return Layout.Page.container.find("table#zp_views_records_table tbody tr").find("input[id=zp_view_sel_record]:checked").length > 20 ? void ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.formagreementlimitexceed")) : void ("adobe" === type ? Files.Esign.getAgreementsListPage(void 0, !0, isMailMerge) : "zsign" === type ? Files.Esign.getDocumentsListPage(void 0, !0, isMailMerge) : Files.Esign.getEnvelopeListpage(null, !0, isMailMerge)) }, resetTablePositionForFilter: function () { var tableCont = Layout.Page.container.find("[statictable=true]"); tableCont.siblings("div.ZPfhlin").remove(); var b = Layout.Page.container.find("#filter").outerWidth(!0), a = tableCont.parent().outerWidth(!0) + b + "px"; tableCont.parent().css("width", a), tableCont.siblings("div.ZPfhlin").length > 0 ? tableCont.siblings("div.ZPfhlin").replaceWith('<div class="ZPfhlin" style="width:' + a + 'px;"></div>') : tableCont.before('<div class="ZPfhlin" style="width:' + a + 'px;"></div>') }, resetTablePosition: function () { var tableCont = Layout.Page.container.find("[statictable=true]"); tableCont.siblings("div.ZPfhlin").remove(), tableCont.parent().css("width", "") }, handleTablePositionForView: function (isFullView) { var tableCont = Layout.Page.container.find("[statictable=true]"), tableWidth = 0, thseles = tableCont.find("[staticheader=true]").find("th"); for (i = 0; i < thseles.length; i++) tableWidth += $(thseles[i]).outerWidth(!0); ZPSetupCommon.isEmpty(isFullView) || isFullView && (tableWidth += parseInt(Layout.Page.container.find("#zp_views_list_container").position().left), $("#zpNewwindow").data({ width: Layout.Page.container.find("#zp_views_container").width() })), tableCont.siblings("div.ZPfhlin").length > 0 ? tableCont.siblings("div.ZPfhlin").replaceWith('<div class="ZPfhlin" style="width:' + tableWidth + 'px;"></div>') : tableCont.before('<div class="ZPfhlin" style="width:' + tableWidth + 'px;"></div>'), tableCont.parent().css("width", tableWidth + "px") }, handleTablePosition: function (isTabMin, skipWidth) { ZPView.resetTablePosition(); var tableCont = Layout.Page.container.find("[statictable=true]:visible"); tableCont.addClass("FLhead").parent().addClass("tabcont"), tableCont.closest(".Scrcont").addClass("section"); var tableWidth = 0; tableCont.find("[staticheader=true]").find("th:visible").each(function () { if (this.childNodes.length > 0) { var textNode = this.childNodes[0]; 3 === textNode.nodeType && $(textNode).replaceWith($("<span></span>").text(textNode.nodeValue)) } var innerHtml = $(this).html(); 0 === $(this).children("div").length && $(this).html("<div>" + innerHtml + "</div>" + innerHtml), tableWidth += $(this).outerWidth(!0) }), tableCont.siblings("div.ZPfhlin").length > 0 ? tableCont.siblings("div.ZPfhlin").replaceWith('<div class="ZPfhlin" style="width:' + (skipWidth ? "100%" : tableWidth + "px") + ';"></div>') : tableCont.before('<div class="ZPfhlin" style="width:' + (skipWidth ? "100%" : tableWidth + "px") + ';"></div>'), tableCont.parent().css("width", skipWidth ? "100%" : tableWidth + "px") }, isSystemView: function (viewId) { return viewId = void 0 === viewId ? Layout.Page.urlparam.viewId : viewId, void 0 === viewId ? !0 : !1 }, getzpviewcontainer: function () { var viewcontainer = Layout.Page.container.find("#zp_views_list_container"); return ZPView.isFromrelfields && (viewcontainer = Layout.Page.container.find("#zp_views_list_container_rel" + ZPView.CURR_VIEWPARAMS.relformfcid)), viewcontainer } }, ZPView.Search = { AUTO_NUM_OPER: { 18: "zp.is", 19: "zp.isnot" }, SEARCH_DEFAULT_OPER: { 18: "zp.is", 19: "zp.isnot", 24: "zp.startswith", 25: "zp.endswith", 26: "zp.contains", 27: "zp.notcontains", 28: "zp.like", 58: "zp.between" }, NOTAUTONUM_OPER: { 29: "zp.isempty", 30: "zp.isnotempty" }, NUMARIC_OPER: { 20: "zp.lessthan", 21: "zp.greaterthan", 22: "zp.lessthanorequalto", 23: "zp.greaterthanorequalto" }, DAYS_OPER: { 31: "zp.yesterday", 32: "zp.today", 33: "zp.tomorrow", 34: "zp.last7days", 35: "zp.last30days", 36: "zp.last60days", 37: "zp.last90days", 38: "zp.last120days", 39: "zp.next7days", 40: "zp.next30days", 41: "zp.next60days", 42: "zp.next90days", 43: "zp.next120days" }, MONTH_OPER: { 44: "zp.lastmonth", 45: "zp.thismonth", 46: "zp.nextmonth", 47: "zp.thisandprevmonth", 48: "zp.thisandnextmonth" }, YEAR_OPER: { 51: "zp.lastyear", 52: "zp.currentyear", 53: "zp.nextyear", 54: "zp.last2years", 55: "zp.next2years", 56: "zp.thisandprevyear", 57: "zp.thisandnextyear" }, BOOLEAN_OPER: { 49: "zp.true", 50: "zp.false" }, ENCRYPTED_OPER: { 18: "zp.is", 19: "zp.isnot", 29: "zp.isempty", 30: "zp.isnotempty" }, TIME_OPER: { 18: "zp.is", 19: "zp.isnot", 29: "zp.isempty", 30: "zp.isnotempty", 58: "zp.between", 20: "zp.before", 21: "zp.after" }, dispFieldArray: [], formCompIDArray: [], labelNameArray: [], toggleSearch: function (isFromSearchicon) { if (ZPView.isSystemView()) ZPComponents.SystemView.toggleSearch(); else { var searchCont = ZPView.VIEW_CONTAINER.find("#zp_view_search_container"), viewProp = ZPView.getViewPropertie(); void 0 !== viewProp.searchBy && $.each(viewProp.searchBy, function () { var key = "", val = "", opr = 1; for (var keyName in this) Timetracker.views.isTimetrackerSpecialFields(ZPView.CURR_VIEWPARAMS.tableName, keyName, searchCont.find("[labelname=" + keyName + "]").attr("reftabname"), !0) ? Timetracker.views.setSearchParam(searchCont, keyName, this) : keyName.indexOf("_op") === keyName.length - 3 ? opr = this[keyName] : (key = keyName, val = this[keyName]); if ("" != key) if (searchCont.find("#zp_views_field_" + key).find("select").select2("val", opr), opr == zpconst.Search_Opr.BETWEEN) { var vals = val.split(";"); searchCont.find("[labelname=" + key + "]").find("input[searchenb=true]#from").val(vals[0]), searchCont.find("[labelname=" + key + "]").find("input[searchenb=true]#to").val(vals[1]) } else searchCont.find("[labelname=" + key + "]").find("input[searchenb=true]").val(val) }), isFromSearchicon ? (Layout.Page.container.find("#zp_views_search_filter").toggleClass("gry blu"), searchCont.toggleClass("DN"), Layout.Page.container.find("#zp_views_search_act").fadeToggle(200)) : void 0 !== viewProp.searchBy ? searchCont.removeClass("DN") : (Layout.Page.container.find("#zp_views_search_filter").toggleClass("gry blu"), searchCont.toggleClass("DN"), Layout.Page.container.find("#zp_views_search_act").fadeToggle(200)) } }, getSearchTDForField: function (fieldObj) { var searchOpHtml = '<td id="zp_views_field_' + fieldObj.labelName + '">', fieldType = fieldObj.fieldType; if ("P_Employee" != ZPForm.getTableName() && "P_Employee" != fieldObj.refTableName || "AGE" != fieldObj.columnName && "EXPERIENCE" != fieldObj.columnName || (fieldType = ZPForm.Field.NUMBER), 20 !== fieldType) { searchOpHtml += '<select id="search_options_' + fieldObj.formComponentId + '">'; var disableInput = fieldType === ZPForm.Field.CHECK_BOX || fieldType === ZPForm.Field.IMAGE || fieldType === ZPForm.Field.FILE_UPLOAD ? !0 : !1; fieldObj.isEncrypted ? searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.ENCRYPTED_OPER, fieldType) : fieldType !== ZPForm.Field.CHECK_BOX ? Timetracker.views.isTimetrackerSpecialFields(ZPView.CURR_VIEWPARAMS.tableName, fieldObj.labelName, fieldObj.refTableName) ? (searchOpHtml += Timetracker.views.getSearchOperationOptions(fieldObj.labelName), disableInput = !0) : fieldType === ZPForm.Field.TIME ? searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.TIME_OPER, fieldType) : (fieldType !== ZPForm.Field.AUTONUMBER ? (searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.SEARCH_DEFAULT_OPER, fieldType), searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.NOTAUTONUM_OPER, fieldType)) : searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.AUTO_NUM_OPER, fieldType), fieldType === ZPForm.Field.DATE || fieldType === ZPForm.Field.DATE_TIME ? (searchOpHtml += '<optgroup label="' + ZPI18N.getString("zp.cday") + '">' + ZPView.Search.getSearchOperationOptions(ZPView.Search.DAYS_OPER, fieldType) + "</optgroup>", searchOpHtml += '<optgroup label="' + ZPI18N.getString("zp.month") + '">' + ZPView.Search.getSearchOperationOptions(ZPView.Search.MONTH_OPER, fieldType) + "</optgroup>", searchOpHtml += '<optgroup label="' + ZPI18N.getString("zp.year") + '">' + ZPView.Search.getSearchOperationOptions(ZPView.Search.YEAR_OPER, fieldType) + "</optgroup>") : (fieldType === ZPForm.Field.NUMBER || fieldType === ZPForm.Field.DECIMAL || fieldType === ZPForm.Field.CURRENCY) && (searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.NUMARIC_OPER, fieldType))) : (searchOpHtml += '<option value="-1">' + ZPI18N.getString("zp.select") + "</option>", searchOpHtml += ZPView.Search.getSearchOperationOptions(ZPView.Search.BOOLEAN_OPER, fieldType)), searchOpHtml += '</select><div id="zp_search_viewinp" isenc ="' + fieldObj.isEncrypted + '" ftype="' + fieldType + '"formcomId="' + fieldObj.formComponentId + '" dispname="' + fieldObj.displayName + '" labelname="' + fieldObj.labelName + '"' + (void 0 !== fieldObj.refTableName ? 'reftabname="' + fieldObj.refTableName + '"' : "") + "><div " + (10 === fieldType || 22 === fieldType ? 'class="zpcal"' : "") + '><input class ="form-control" searchenb="true" ' + (10 === fieldType || 22 === fieldType ? 'caltype="searchfilter"' : "") + '  type="text" ' + (disableInput ? 'disabled="disabled"' : "") + ' class="inptxt"/></div>' } return searchOpHtml += "</td>" }, getSearchOperationOptions: function (operJson, fieldType) { var isSelected = !1, searchOpHtml = ""; (fieldType === ZPForm.Field.NUMBER || fieldType === ZPForm.Field.DECIMAL || fieldType === ZPForm.Field.CURRENCY || fieldType === ZPForm.Field.DATE || fieldType === ZPForm.Field.DATE_TIME || fieldType === ZPForm.Field.TIME) && (isSelected = !0); for (var opType in operJson) "58" === opType && !isSelected || ("24" === opType || "25" === opType || "26" === opType || "28" === opType || "27" === opType) && isSelected || (searchOpHtml += '<option value="' + opType + '" ' + (isSelected && "18" === opType || !isSelected && "26" === opType ? 'selected="selected"' : "") + ">" + ZPI18N.getString(operJson[opType], [""]) + "</option>"); return searchOpHtml }, getThisFieldSearch: function (labelName) { ZPView.VIEW_CONTAINER.find("#zp_view_search_container").is(":visible") || ZPView.Search.toggleSearch(), ZPView.VIEW_CONTAINER.find("#zp_view_search_container").find("[labelname=" + ZPUtil.escapeSelector(labelName) + "]").focus() }, getRecordsBySearchParam: function () { var searchCont = Layout.Page.container.find("#filter").find("#filterlist"), searchParam = new Array, isValSearch = !0; if (searchCont.find("[id=zp_search_viewinp]").each(function () { var isValidSearch = !0; if ("filter-check active" === $(this).parent().parent().parent().attr("class")) { var value = "", labelName = $(this).attr("labelname"), operator = $(this).siblings("select[id^=search_options_]").select2("val"), searchProp = {}, isDisabled = ZPView.Search.isDisable(operator); if (void 0 === operator || "null" === operator || "-1" === operator) return; if (Timetracker.views.isTimetrackerSpecialFields(ZPView.CURR_VIEWPARAMS.tableName, labelName, $(this).attr("reftabname"))) { isDisabled = !0; var valueJson = Timetracker.views.getValueForField(labelName, operator); value = valueJson.value, operator = valueJson.operator } isDisabled || $(this).find("input[searchenb=true]").each(function (index) { 0 !== index && "" !== value.trim() && (value += ";"), "" !== $(this).val().trim() ? value += $(this).val() : isValidSearch = !1 }), isDisabled || isValidSearch ? ($(this).parent().parent().removeClass("zp-err"), $(this).parent().parent().find("#search_error").addClass("DN"), searchProp[labelName] = value, searchProp[labelName + "_op"] = operator, searchParam.push(searchProp)) : (isValSearch = !1, $(this).parent().parent().addClass("zp-err"), $(this).parent().parent().find("#search_error").removeClass("DN"), $(this).parent().parent().find("#search_error").html(ZPI18N.getString("zp.searchvaluescannotbeempty"))) } }), isValSearch) { if (ZPView.Search.resetAfterClose(), !Layout.UrlConf.isModuleForm() && ZPForm.isEmployeeLookupPresent()) { var value = Layout.Page.container.find("#zp_views_employeestatus").select2("val"); ("all" === value || "activeemprecord" === value || "exitemprecord" === value) && ZPView.getRecordsByViewType("empstatus", Layout.Page.container.find("#zp_views_employeestatus").select2("val")) } ZPForm.isApprovalEnabled() && ZPView.getRecordsByViewType("approval", Layout.Page.container.find("#zp_views_approvaltype").select2("val")), ZPView.setViewPropertie("searchBy", searchParam), ZPView.setViewPropertie("startInd", 1), ZPView.setViewPropertie("resfreshCount", !0), ZPView.refresh(!0) } else $(Layout.Page.container.find(".zp-err").parent())[0].scrollIntoView({ behavior: "smooth" }) }, resetSearch: function () { var searchContOuter = Layout.Page.container.find("#filter").find("#filterlist"); searchContOuter.find("[id^=filter_field_]").each(function () { if ($(this).find("input").length > 0) { $(this).find("input").val(""); var fieldType = $(this).find("#zp_search_viewinp").attr("ftype"), labelName = $(this).find("#zp_search_viewinp").attr("labelname"), isenc = $(this).find("#zp_search_viewinp").attr("isenc"); if (Timetracker.views.isTimetrackerSpecialFields(ZPView.CURR_VIEWPARAMS.tableName, labelName, $(this).find("#zp_search_viewinp").attr("reftabname"))) return void Timetracker.views.resetViewSearch(labelName, this); void 0 !== fieldType && (fieldType = parseInt(fieldType), "true" == isenc || fieldType === ZPForm.Field.AUTONUMBER ? $(this).find("select").select2("val", "18") : fieldType === ZPForm.Field.NUMBER || fieldType === ZPForm.Field.DECIMAL || fieldType === ZPForm.Field.CURRENCY || fieldType === ZPForm.Field.DATE || fieldType === ZPForm.Field.DATE_TIME ? ($(this).find("select").select2("val", "18"), (fieldType === ZPForm.Field.DATE || fieldType === ZPForm.Field.DATE_TIME) && $(this).find("select").change()) : fieldType === ZPForm.Field.CHECK_BOX ? $(this).find("select").select2("val", "-1") : $(this).find("select").select2("val", "26")) } }), ZPView.Search.searchSuggestion(!0); var viewProp = ZPView.getViewPropertie(); void 0 !== viewProp.searchBy && (ZPView.setViewPropertie("searchBy", void 0), ZPView.refresh(!0), ZPView.isResetTablePosition = !0) }, isDisable: function (operType) { return "18" === operType || "19" === operType || "24" === operType || "25" === operType || "26" === operType || "27" === operType || "28" === operType || "58" === operType || "20" === operType || "21" === operType || "22" === operType || "23" === operType || "59" === operType || "60" === operType ? !1 : !0 }, actionsearch: function (isFromSearchIcon, isFullMiniView) { if (ZPView.isSystemView()) ZPComponents.SystemView.toggleSearch(); else { var searchCont = Layout.Page.container.find("#filter_section"); ZPForm.Permission.getViewPerm(); ZPForm.CONF = ZPForm.getFormConf(ZPView.CURR_VIEWPARAMS.formId); var viewProp = ZPView.getViewPropertie(); if (void 0 !== viewProp.searchBy && void 0 !== viewProp.searchBy[0] && ($.each(viewProp.searchBy, function () { var key = "", val = "", opr = 1; for (var keyName in this) Timetracker.views.isTimetrackerSpecialFields(ZPView.CURR_VIEWPARAMS.tableName, keyName, String(searchCont.find("[labelname='" + keyName + "']").attr("reftabname")), !0) ? Timetracker.views.setSearchParam(searchCont, keyName, this) : keyName.indexOf("_op") === keyName.length - 3 ? opr = this[keyName] : (key = keyName, val = this[keyName]); "" != key && $.each($(searchCont).find("li[id^=filter_field_]"), function () { if ($(this).attr("value") == key) { if ($(this).find("[id^=filter_options_]").find("[id^=search_options_]").val(opr), $(this).find("[id^=filter_options_]").find("select").trigger("change"), opr == zpconst.Search_Opr.BETWEEN) { var vals = val.split(";"); $(this).find("input[searchenb=true]#from").val(vals[0]), $(this).find("input[searchenb=true]#to").val(vals[1]) } else $(this).find("input[searchenb=true]").val(val); $(this).addClass("active"), $(this).find("[id^=filter_options_]").slideDown(), $(this).find("[id^=search_options_]").select2() } }) }), ZPView.Search.resetFieldsForFilter()), isFullMiniView ? ZPView.VIEW_CONTAINER.parent().parent().removeClass("filter-wrap") : 1 == isFromSearchIcon ? (ZPView.VIEW_CONTAINER.parent().parent().toggleClass("filter-wrap"), ZPView.isResetTablePosition && (ZPView.resetTablePositionForFilter(), ZPView.isResetTablePosition = !1)) : ZPView.VIEW_CONTAINER.parent().parent().addClass("filter-wrap"), ZPForm.isApprovalEnabled()) { var approval = "approval"; Layout.Page.container.find("#approval_status").removeClass("DN"), Layout.Page.container.find("#zp_views_approvaltype").select2(), void 0 !== Layout.Page.urlparam[approval] ? Layout.Page.container.find("#zp_views_approvaltype").select2("val", Layout.Page.urlparam[approval]) : Layout.Page.container.find("#zp_views_approvaltype").select2("val", "all") } else Layout.Page.container.find("#approval_status").addClass("DN"); if (Layout.UrlConf.isModuleForm()) Layout.Page.container.find("#emplyoee_status").addClass("DN"); else if (!ZPForm.isEmployeeLookupPresent() || "self" == ZPView.typeOfView && void 0 !== ZPView.typeOfView) Layout.Page.container.find("#emplyoee_status").addClass("DN"); else { var empStatus = "empstatus"; Layout.Page.container.find("#emplyoee_status").removeClass("DN"), Layout.Page.container.find("#zp_views_employeestatus").select2(), void 0 !== Layout.Page.urlparam[empStatus] && Layout.Page.container.find("#zp_views_employeestatus").select2("val", Layout.Page.urlparam[empStatus]) } } }, showfilteroptions: function (fieldobj, isFieldSpecific) { var fieldCompID = $(fieldobj).attr("value"); isFieldSpecific ? ($(fieldobj).parent().addClass("active"), Layout.Page.container.find("#filter_options_" + fieldCompID).slideDown(), Layout.Page.container.find("#search_options_" + fieldCompID).select2()) : ($(fieldobj).parent().toggleClass("active"), Layout.Page.container.find("#filter_options_" + fieldCompID).slideToggle(), Layout.Page.container.find("#search_options_" + fieldCompID).select2()), Layout.Page.container.find("#filter_options_" + fieldCompID).removeClass("zp-err"), Layout.Page.container.find("#filter_options_" + fieldCompID).find("#search_error").addClass("DN"), Layout.Page.container.find("#filter_options_" + fieldCompID).find("#zp_search_viewinp").find("input").focus() }, searchSuggestion: function (toEmpty) { var filter = toEmpty === !0 ? "" : Layout.Page.container.find("#search_field").val().toUpperCase(); toEmpty === !0 && Layout.Page.container.find("#search_field").val(""); var empstatus = ZPI18N.getString("zp.employeestatus"), approvalstatus = ZPI18N.getString("zp.approvalstatus"), dispField = "", isSearchFound = !1, isFieldsFound = !1; for (Layout.UrlConf.isModuleForm() || !ZPForm.isEmployeeLookupPresent() || "self" == ZPView.typeOfView && void 0 !== ZPView.typeOfView || (empstatus.toUpperCase().indexOf(filter) > -1 ? (isSearchFound = !0, Layout.Page.container.find("#emplyoee_status").removeClass("DN")) : Layout.Page.container.find("#emplyoee_status").addClass("DN")), ZPForm.isApprovalEnabled() && (approvalstatus.toUpperCase().indexOf(filter) > -1 ? (isSearchFound = !0, Layout.Page.container.find("#approval_status").removeClass("DN")) : Layout.Page.container.find("#approval_status").addClass("DN")), i = 0; i < ZPView.Search.dispFieldArray.length; i++) if (dispField = ZPeople.decodeTxt(ZPView.Search.dispFieldArray[i]), dispField.toUpperCase().indexOf(filter) > -1) isSearchFound = !0, isFieldsFound = !0, Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).show(); else if ("filter-check active" === Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).attr("class")) { var isDisable = Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).find("#filter_options_" + ZPView.formCompId[i]).find("#zp_search_viewinp").find("input").attr("disabled"); void 0 == isDisable && "" == Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).find("#filter_options_" + ZPView.formCompId[i]).find("#zp_search_viewinp").find("input[searchenb=true]").val().trim() && (Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).removeClass("active"), Layout.Page.container.find("#filter_options_" + ZPView.formCompId[i]).slideUp(), Layout.Page.container.find("#filter_options_" + ZPView.formCompId[i]).removeClass("zp-err"), Layout.Page.container.find("#filter_options_" + ZPView.formCompId[i]).find("#search_error").addClass("DN")), Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).hide() } else Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]).hide(); 0 == isSearchFound ? (Layout.Page.container.find("#filterlist").addClass("hide"), Layout.Page.container.find("#no_fields").removeClass("hide")) : (Layout.Page.container.find("#filterlist").removeClass("hide"), Layout.Page.container.find("#no_fields").addClass("hide"), 0 == isFieldsFound ? Layout.Page.container.find("#fields_head").find(".filter-head").addClass("hide") : Layout.Page.container.find("#fields_head").find(".filter-head").removeClass("hide")) }, resetFieldsForFilter: function (labelName) { var filterlist = Layout.Page.container.find("#filter").find("#filterlist"), curr_labelname = "", props = ZPView.getViewPropertie(), FcId = props.formCompId; if (void 0 === labelName) $.each($(filterlist).find(".active"), function () { -1 !== jQuery.inArray($(this).find("#checkbox_finder").attr("value"), FcId) ? ($(this).removeClass("hide"), Layout.Page.container.find("#filter").find("#filterlist").append(this)) : ($(this).addClass("hide"), Layout.Page.container.find("#filter").find("#filterlist").append(this)) }), $.each($(filterlist).find(".filter-check").not(".active"), function () { -1 !== jQuery.inArray($(this).find("#checkbox_finder").attr("value"), FcId) ? ($(this).removeClass("hide"), Layout.Page.container.find("#filter").find("#filterlist").append(this)) : ($(this).addClass("hide"), Layout.Page.container.find("#filter").find("#filterlist").append(this)) }); else { for (i = 0; i < ZPView.Search.labelNameArray.length; i++) if (curr_labelname = ZPeople.decodeTxt(ZPView.Search.labelNameArray[i]), curr_labelname === labelName) { var selectedField = Layout.Page.container.find("#filter_field_" + ZPView.formCompId[i]); Layout.Page.container.find("[id^=filter_field_]").insertAfter(selectedField), ZPView.Search.showfilteroptions(selectedField.children(), !0) } ZPView.Search.actionsearch() } }, resetAfterClose: function () { void 0 !== ZPView.VIEW_CONTAINER && (ZPView.VIEW_CONTAINER.parent().parent().removeClass("filter-wrap"), ZPView.Search.searchSuggestion(!0), ZPView.isResetTablePosition && (ZPView.resetTablePositionForFilter(), ZPView.isResetTablePosition = !1)) } }, ZPView.Actions = { DELETE_RECIDS: new Array, selectUnselectRec: function (isToggleHeader, Obj, type, recId) { if (ZPView.VIEW_CONTAINER.parent().parent().removeClass("filter-wrap"), !isToggleHeader) { var isSelect = $(Obj).is(":checked"); if ("all" === type) isSelect ? ZPView.VIEW_CONTAINER.find("tr[id^=zp_view_record_]").each(function () { $(this).find("#zp_view_sel_record").length > 0 && (recId = $(this).attr("recordid"), !isNaN(recId) && ZPView.isAdmin() && ZPView.Actions.DELETE_RECIDS.push(recId), $(this).find("#zp_view_sel_record")[0].checked = !0) }) : (ZPView.Actions.DELETE_RECIDS = new Array, ZPView.VIEW_CONTAINER.find("tr[id^=zp_view_record_]").find("[id=zp_view_sel_record]").removeAttr("checked")); else if (!isNaN(recId)) { if (isSelect && ZPView.isAdmin()) ZPView.Actions.DELETE_RECIDS.push(recId); else if (ZPView.isAdmin()) { var posOfEle = ZPView.Actions.DELETE_RECIDS.indexOf(recId); -1 !== posOfEle && ZPView.Actions.DELETE_RECIDS.splice(posOfEle, 1) } var totalRec = ZPView.getViewPropertie().totalRec, selRec = ZPView.VIEW_CONTAINER.find("tr[id^=zp_view_record_]").find("[id=zp_view_sel_record]:checked"), headerSel = ZPView.VIEW_CONTAINER.find("#zp_views_recordheader").find("#zp_view_sel_record"); totalRec === selRec.length ? headerSel[0].checked = !0 : headerSel.is(":checked") && (headerSel[0].checked = !1) } } isAdobeConfig && ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId].isAdobeSigninEnabled && Layout.Page.container.find("table#zp_views_records_table tbody").find("input[type='checkbox']:checked").closest("tr[isAgreementSent='false']").length > 0 && ZPView.isAdmin() ? Layout.Page.container.find("#zp_view_record_delete").find("#AdobesignIn").show() : Layout.Page.container.find("#zp_view_record_delete").find("#AdobesignIn").hide(), Layout.Page.container.append(ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId]), Layout.Page.container.append("TRACK"), isDocuConfig && ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId].isDocuSigninEnabled && Layout.Page.container.find("table#zp_views_records_table tbody").find("input[type='checkbox']:checked").closest("tr[isAgreementSent='false']").length > 0 && ZPView.isAdmin() ? Layout.Page.container.find("#zp_view_record_delete").find("#DocuSign").show() : Layout.Page.container.find("#zp_view_record_delete").find("#DocuSign").hide(), isadmin && isZSConfig && ZPForm.FORM_DETAILS[ZPView.CURR_VIEWPARAMS.formId].isZohoSigninEnabled && Layout.Page.container.find("table#zp_views_records_table tbody").find("input[type='checkbox']:checked").closest("tr[isAgreementSent='false']").length > 0 && ZPView.isAdmin() ? Layout.Page.container.find("#zp_view_record_delete").find("#ZohoSign").show() : Layout.Page.container.find("#zp_view_record_delete").find("#ZohoSign").hide(); var deleteRecObj = Layout.Page.container.find("#zp_view_record_delete"); ZPView.VIEW_CONTAINER.find("tr[id^=zp_view_record_]").find("[id=zp_view_sel_record]:checked").length > 0 && !deleteRecObj.is(":visible") ? Layout.Page.container.find("#zp_views_formrecactions").fadeOut(200, function () { if ($(this).siblings("#zp_view_record_delete").fadeIn(200), ZPView.Actions.DELETE_RECIDS.length <= 0 ? $(this).siblings("#zp_view_record_delete").find("button#deleteButton").hide() : $(this).siblings("#zp_view_record_delete").find("button#deleteButton").show(), ("P_EmployeeLeave" === ZPForm.getTableName() || "P_Task" === ZPForm.getTableName() || "P_MultiRater" == ZPForm.getTableName() || "P_MultiRater_Approval" == ZPForm.getTableName()) && ($(this).siblings("#zp_view_record_delete").find("#massUpdate").hide(), ("P_MultiRater" == ZPForm.getTableName() || "P_MultiRater_Approval" == ZPForm.getTableName()) && $(this).siblings("#zp_view_record_delete").find("#merge_template").hide()), void 0 !== CustomAction[Layout.Page.urlparam.viewId + ""]) { var cwfJArray = [], cbListJArray = CustomAction[Layout.Page.urlparam.viewId + ""]; for (i = 0; i < cbListJArray.length; i++) cbListJArray[i].type === CustomAction.CUSTOMACTION ? cwfJArray.push(cbListJArray[i]) : ""; Layout.Page.container.find("#trgCustomWF").html(CustomAction.construcCBListView(cwfJArray, ZPView.Actions.getDeleteRecIds(), !0)) } ZPView.isAdmin() || $(this).siblings("#zp_view_record_delete").find("#merge_template").hide() }) : 0 == ZPView.VIEW_CONTAINER.find("tr[id^=zp_view_record_]").find("[id=zp_view_sel_record]:checked").length && deleteRecObj.is(":visible") && Layout.Page.container.find("#zp_view_record_delete").fadeOut(200, function () { $(this).siblings("#zp_view_record_delete").find("button#deleteButton").fadeOut(200), $(this).siblings("#zp_views_formrecactions").fadeIn(200) }) }, getDeleteRecIds: function () { var recIds = ""; for (i = 0; i < ZPView.Actions.DELETE_RECIDS.length; i++) { var recId = ZPView.Actions.DELETE_RECIDS[i]; recIds += 0 == i ? recId : "," + recId } return recIds }, deleteThisRecord: function (recId) { isNaN(recId) || (Layout.UrlConf.isModuleForm() ? ZPComponents.SystemView.deleteRecords(recId) : (ZPView.Actions.DELETE_RECIDS = new Array, ZPView.Actions.DELETE_RECIDS.push(recId), ZPView.confirmDeleteRecord())) }, showEsigninform: function () { var recorddetails = Layout.Page.container.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).closest("tr")[0], isagreementsent = void 0 == recorddetails && void 0 != ZPView.newRecordDetails.isAgreementSent ? ZPView.newRecordDetails.isAgreementSent : "false"; if (void 0 != recorddetails && (isagreementsent = Layout.Page.container.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).closest("tr")[0].getAttribute("isagreementsent")), isadmin && isZSConfig && ZPForm.FORM_DETAILS[ZPForm.CURRFORM_PARAM.formId].isZohoSigninEnabled && ZPView.isAdmin() && (659838935 == _LOGGEDIN_ZSOID || 735594 == _LOGGEDIN_ZSOID || 53716500 == _LOGGEDIN_ZSOID || 53865429 == _LOGGEDIN_ZSOID)) if ("false" == isagreementsent) 0 == Layout.Page.container.find("#ZP_Form_MoreOpt").hasClass("open") ? ($("#esigndivider").show(), $("#viewsigndocument").hide(), $("#esignature_header").show(), $("#send_document_form").show()) : ($("#esigndivider").hide(), $("#esignature_header").hide(), $("#send_document_form").hide()); else if ("true" == isagreementsent) if (0 == Layout.Page.container.find("#ZP_Form_MoreOpt").hasClass("open")) { $("#send_document_form").hide(), $("#esigndivider").show(), $("#esignature_header").show(); var recordid = ZPForm.CURRFORM_PARAM.recordId, module = void 0 == recorddetails && void 0 != ZPView.newRecordDetails.module ? ZPView.newRecordDetails.module : Layout.Page.container.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).closest("tr")[0].getAttribute("module"), aggreeID = void 0 == recorddetails && void 0 != ZPView.newRecordDetails.agreeid ? ZPView.newRecordDetails.agreeid : Layout.Page.container.find("#zp_view_record_" + ZPForm.CURRFORM_PARAM.recordId).closest("tr")[0].getAttribute("agreeId"); if (6 == module) var onclickvalue = 'Zohosign.getDocumentPreview("' + aggreeID + '","' + recordid + '")'; $("#viewdoconclick").attr("onclick", onclickvalue), $("#viewsigndocument").show() } else $("#esigndivider").hide(), $("#esignature_header").hide(), $("#viewdoconclick").removeAttr("onclick"), $("#viewsigndocument").hide() } }, ZPView.Pagination = { ISLOADED: !1, init: function () { Layout.Page.container.find("#zp_view_pageprev").click(function () { $(this).hasClass("blu") && ZPView.Pagination.ISLOADED && (ZPView.Pagination.ISLOADED = !1, ZPView.Pagination.previousPage()) }), Layout.Page.container.find("#zp_view_pagenext").click(function () { $(this).hasClass("blu") && ZPView.Pagination.ISLOADED && (ZPView.Pagination.ISLOADED = !1, ZPView.Pagination.nextPage()) }), ZPView.Pagination.handlePageRecCount() }, handleCurrentPageLimitation: function (type) { var props = ZPView.getViewPropertie(); "none" !== type && (props.startInd > 1 && "prev" === type ? props.startInd = props.startInd - props.limit : props.hasNext && (props.startInd = props.startInd + props.limit)), ZPView.Pagination.TYPE = "none" }, handlePageRecCount: function () { var props = ZPView.getViewPropertie(), recLimt = props.limit; props.totalRec < recLimt && (recLimt = props.totalRec), Layout.Page.container.find("#zp_view_page_cnt").html(props.startInd + "&nbsp;-&nbsp;" + (recLimt + props.startInd - 1)), props.hasNext ? Layout.Page.container.find("#zp_view_pagenext").removeClass("gry").addClass("blu CP") : Layout.Page.container.find("#zp_view_pagenext").removeClass("blu CP").addClass("gry"), props.startInd > 1 ? Layout.Page.container.find("#zp_view_pageprev").removeClass("gry").addClass("blu CP") : Layout.Page.container.find("#zp_view_pageprev").removeClass("blu CP").addClass("gry") }, nextPage: function () { this.handleCurrentPageLimitation("next"), ZPView.refresh(!0) }, previousPage: function () { this.handleCurrentPageLimitation("prev"), ZPView.refresh(!0) } }, ZPView.Record = { getFormPage: function (mode, recordId, obj) { if (ZPView.recid = recordId, "EDIT" === mode) void 0 !== ZPView.CURR_VIEWPARAMS.recEditCallback && "function" == typeof ZPView.CURR_VIEWPARAMS.recEditCallback ? ZPView.CURR_VIEWPARAMS.recEditCallback(ZPView.CURR_VIEWPARAMS.formId, recordId, "EDIT", ZPView.CURR_VIEWPARAMS.isFromSelfService) : void 0 === recordId || isNaN(recordId) || ZPForm.showForm("edit", recordId); else if ("VIEW" === mode) if (void 0 !== ZPView.CURR_VIEWPARAMS.recViewCallback && "function" == typeof ZPView.CURR_VIEWPARAMS.recViewCallback) ZPView.CURR_VIEWPARAMS.recViewCallback(ZPView.CURR_VIEWPARAMS.formId, recordId, "VIEW", ZPView.CURR_VIEWPARAMS.isFromSelfService); else if (void 0 !== recordId && !isNaN(recordId)) if (ZPView.isFromrelfields) { (0 == ZPForm.formid || void 0 == ZPForm.formid) && (ZPForm.formid = ZPForm.CURRFORM_PARAM.formId); var parentobj = $(obj).closest('div[id^="zp_dash_rfdata_"]').siblings(".label-head").find("a"), relformid = $(parentobj).attr("formid"), fcId = $(parentobj).attr("fcid"); ZPView.recid = recordId; var params = { formId: relformid, formMode: "VIEW", recordId: recordId, isrelfieldsingelrecview: !0, relfcid: fcId }; relformid == Task.taskformid && (params.isCustomLayout = !0), ZPForm.load(params), ZPForm.toggleFormPage(!1, Layout.Page.container.find("#zp_addedit_record_" + ZPForm.formid)) } else ZPForm.showForm("view", recordId) } }; var Import = { url: "/Import.zp", template: '<div class="modal  popRgtModel" id="ZPimport"> <div class="ZPResize"></div><div class="modal-dialog" role="document"> <div class="modal-content"><div id="importStep1" class="ZPNxtStep"><div class="modal-header"><ol class="breadcrumb ZPbcrumb"><li class="active"><a >' + ZPI18N.getString("zp.uploadfile") + "</a></li><li><a >" + ZPI18N.getString("zp.mapdetails") + "</a></li><li><a >" + ZPI18N.getString("zp.ConfirmMapping") + "</a></li><li><a >" + ZPI18N.getString("zp.HandleDuplicates") + "</a></li><li> <a >" + ZPI18N.getString("zp.ImportSummary") + '</a></li></ol><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div><div class="modal-body"><form id="ImportStep1Form" target="importIframe" enctype="multipart/form-data" role="form" action="ImportUploadFile.zp" method="post" class="form-horizontal pad"><input type="hidden" name="conreqcsr" value=""><input type="hidden" name="mode" value="uploadFile"/><input type="hidden" name="formId" value=""/><div class="form-group"><label class="control-label col-sm-3">' + ZPI18N.getString("zp.importDataFor") + '</label><div class="col-sm-4"><select id="importDataFor" name="impformId" onChange="Import.onFormChange()"></select></div></div> <div class="form-group"><label class="control-label col-sm-3">' + ZPI18N.getString("zp.importBasedOn") + '</label><div class="col-sm-4"><select id="importDataOn" name="impUniueId"></select></div></div> <div id="step1Div1" class="ZPfileBox text-center PT30 PB30"><i class="IC-imprt S22 MB8 DIB blu"></i><p class="ZPbold">' + ZPI18N.getString("zp.fileimported") + '</p><p class="gry"><small>' + ZPI18N.getString("zp.formfomtsupportxlscsv") + "</small><br><small>" + ZPI18N.getString("zp.maxfilesize") + '</small></p><div class="btn btn-primary ZPbtnDefault"><span>' + ZPI18N.getString("zp.importfile") + '</span><input type="file" accept=".xls,.xlsx,.csv" class="ZPFfile" name="theFile" onchange="Import.showStep1Div2()" id="importFileName"/></div></div><div id="importExtrasSection"><div id="zp_import_submitwork_flow" class="form-group" style="display:none"><div class="col-sm-6 col-sm-offset-3"><label class="checkbox DIB MR10"><input type="checkbox" name="workFlowOn" checked="checked"><span class="ML2">' + ZPI18N.getString("zp.executeeworkflow") + '</span></label></div></div><div id="zp_import_submitappr_cont" style="display:none" class="form-group"><div class="col-sm-6 col-sm-offset-3"><label class="checkbox DIB MR10"><input type="checkbox" name="approvalOn" checked="checked"><span class="ML2">' + ZPI18N.getString("zp.sendforapproval") + '</span></label><i data-placement="right" data-toggle="tooltip" data-original-title="' + ZPI18N.getString("zp.importapprinfomsg") + '" class="IC-info"></i></div></div></div><div id="step1Div2" class="ZPfileBox text-center PT40 PB40" style="display:none"><i class="IC-docs imtIcn DIB blu"></i><p class="MB20"><em id ="importdUploadedFName"></em> <span class="IC-rou-tik ML5 filetck"></span></p><div class="progress Pbar1" id="importProgressBar"><div class="progress-bar Pc-Out PR" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width:80%"></div></div></div></form></div><div class="modal-footer text-left"><button id="step1Next" style="display:none" onclick="Import.ImportFileSubmit()" class="btn btn-default  btn-md MR10 FR" type="button">' + ZPI18N.getString("zp.next") + '</button><button class="btn btn-default btn-md FL" type="button" data-dismiss="modal">' + ZPI18N.getString("zp.cancel") + '</button></div></div>  <div id="importStep2" class="DN ZPNxtStep"><div class="modal-header"><ol class="breadcrumb ZPbcrumb"><li class="active"><a >' + ZPI18N.getString("zp.uploadfile") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.mapdetails") + '</a></li><li id="importStep2ConfMap"><a >' + ZPI18N.getString("zp.ConfirmMapping") + "</a></li><li><a >" + ZPI18N.getString("zp.HandleDuplicates") + "</a></li><li> <a >" + ZPI18N.getString("zp.ImportSummary") + '</a></li></ol><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div> <div class="modal-body PT0I" id="importStep2ConfirmMapping"></div><div class="modal-footer text-left"><button id="step2Next" onclick="Import.validateMapping()" class="btn btn-default  btn-md MR10 FR" type="button">' + ZPI18N.getString("zp.next") + '</button><button class="btn btn-default btn-md FL" type="button" data-dismiss="modal">' + ZPI18N.getString("zp.cancel") + '</button></div></div><div id="importStep3" class="DN ZPNxtStep"><div class="modal-header"><ol class="breadcrumb ZPbcrumb"><li class="active"><a >' + ZPI18N.getString("zp.uploadfile") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.mapdetails") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.ConfirmMapping") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.HandleDuplicates") + "</a></li><li> <a >" + ZPI18N.getString("zp.ImportSummary") + '</a></li></ol><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div> <div class="modal-body PT0I"><div class="label-message"><p class="red" id="dupRecordCount"></p></div> <div id="fileDuplicatesDiv"><div class="ZPSAdflds"><table class="table table-hover"><tbody></tbody></table></div> </div><div id="dbDuplicatesDiv"><div class="ZPSAdflds"><table class="table table-hover"><tbody></tbody></table></div></div></div><div class="modal-footer text-left"><button id="step3Next" value="FILE" onclick="Import.removeDuplicates()" class="btn btn-default  btn-md MR10 FR" type="button">' + ZPI18N.getString("zp.next") + '</button><button class="btn btn-default btn-md FL" type="button" data-dismiss="modal">' + ZPI18N.getString("zp.cancel") + '</button></div></div><div id="importStep4" class="DN ZPNxtStep"><div class="modal-header"><ol class="breadcrumb ZPbcrumb"><li class="active"><a >' + ZPI18N.getString("zp.uploadfile") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.mapdetails") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.ConfirmMapping") + '</a></li><li class="active"><a >' + ZPI18N.getString("zp.HandleDuplicates") + '</a></li><li class="active"> <a >' + ZPI18N.getString("zp.ImportSummary") + '</a></li></ol><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div> <div class="modal-body"><div class="ZPImfrm ZPRecList"><div class="PR"><div class="ZPfileBox text-center PT40 PB40 grnbr"><i class="IC-docs imtIcn DIB blu"></i><p class="MB15"><b>' + ZPI18N.getString("zp.importSuccess", ["<br>"]) + '</b></p><a class="btn btn-default" target="_blank" id="Import_view_record">' + ZPI18N.getString("zp.viewRecords") + '</a></div><div class="ZPSAdflds infomsg MT20"><ul class="list MT20"><li>' + ZPI18N.getString("zp.noOfAdd") + '<span class="rcount" id="noOfAdd"></span></li><li>' + ZPI18N.getString("zp.noOfUpdate") + '<span class="rcount" id="noOfUpdate"></span></li><li>' + ZPI18N.getString("zp.noOfSkip") + '<span class="rcount" id="noOfSkip"></span></li><li>' + ZPI18N.getString("zp.noOfErr") + '<span class="rcount" id="noOfErr"></span></li></ul></div><div class="clearfix"></div><div class="table-responsive" id="importErrDiv"><table class="table table-hover"><thead><tr><th colspan="2">' + ZPI18N.getString("zp.errorDetails") + '</th></tr></thead><tbody></tbody></table></div></div></div></div><div class="modal-footer text-left"><button class="btn btn-default btn-md" type="button" data-dismiss="modal">' + ZPI18N.getString("zp.close") + '</button></div></div></div></div><iframe width="0" height="0" frameborder="0" scrolling="auto" name="importIframe" src="/people/html/blank.html" style="display:none"><html><head></head><body></body></html></iframe></div>', baseFormId: "-1", impFormId: "-1", viewId: "-1", fileType: "xls", fName: "", Container: $("#ZPimport"), HEADERS: null, isFromModule: !1, callbackHash: null, callbackFunction: null, isModalCallbackInitialized: !1, PROGRESS_BAR_WIDTH: 0, IS_WORKFLOW_CONFIGURED: !1, IS_APPROVAL_CONFIGURED: !1, TRIGGER_WORKFLOW: !1, TRIGGER_APPROVAL: !1, IS_IN_STEP2: !1, init: function (formId, viewId, callbackHash, callbackFunction) { Import.callbackFunction = callbackFunction, void 0 != viewId ? (Import.viewId = viewId, Import.callbackHash = "#" + ZPView.getHashForViewChange(Import.viewId), Import.isFromModule = !1) : (Import.isFromModule = !0, void 0 !== callbackHash && (Import.callbackHash = callbackHash)); var params = { formId: formId, mode: "init" }; "#admin/employeerecords/employeeprofile" === Layout.Page.hash && (params.isDummy = "true"), ZPeople.Request.send(Import.url, params, Import.initHandler) }, initHandler: function (data) { if (data.isSuccess) { Import.Container.find("#zp_import_submitwork_flow").hide(), Import.Container.find("#zp_import_submitappr_cont").hide(), Import.Container.find("#zp_import_submitwork_flow").find("input").prop("checked", !0), Import.Container.find("#zp_import_submitappr_cont").find("input").prop("checked", !0), Import.IS_WORKFLOW_CONFIGURED = data.isWorkFlowAvailable, Import.IS_APPROVAL_CONFIGURED = data.isApprovalConfigured, Import.TRIGGER_WORKFLOW = !1, Import.TRIGGER_APPROVAL = !1, Import.IS_IN_STEP2 = !1, 0 == Import.Container.children().length && ($("#wrapper").append(Import.template), Import.Container = $("#ZPimport"), Import.Container.find("#step1Div2").after(Leave.processImportHelp($(Leave.importHelp))), Import.Container.find("#step1Div2").after($(Appraisal.krausrimportHelp)), Import.Container.find("#step1Div2").after($(Appraisal.kraimportHelp)), Import.Container.find("#importDataFor").on("change", function (obj) { obj.val != Import.baseFormId ? Import.Container.find("#importDataOn").closest(".form-group").show() : Import.Container.find("#importDataOn").closest(".form-group").hide() })), Leave.Util.isLeavePage() ? Import.Container.find("#leaveImportHelp").show() : Import.Container.find("#leaveImportHelp").hide(), "P_KRA_User" == data.tableName && Appraisal.iskraMappingImport() ? Import.Container.find("#krausrimportHelp").show() : Import.Container.find("#krausrimportHelp").hide(), "P_KRA" == data.tableName && Appraisal.iskraImport() ? Import.Container.find("#kraImportHelp").show() : Import.Container.find("#kraImportHelp").hide(); var options = "<option value='" + data.baseFormId + "' >" + data.labelName + "</option>"; if (data.secArr) { for (i = 0; i < data.secArr.length; i++) options += "<option value='" + data.secArr[i].formId + "' >" + data.secArr[i].labelName + "</option>"; var uniqOptns = "<option value='-1' >" + ZPI18N.getString("zp.zoholinkId") + "</option>"; if (data.uniqueFields) for (i = 0; i < data.uniqueFields.length; i++) uniqOptns += "<option value='" + data.uniqueFields[i].formcomponentId + "' >" + data.uniqueFields[i].displayName + "</option>"; Import.Container.find("#importDataOn").empty().append(uniqOptns).select2() } Import.Container.find("#importDataOn").closest(".form-group").hide(), Import.isFromModule ? Import.Container.find("#importDataFor").parent().parent().hide() : Import.Container.find("#importDataFor").parent().parent().show(), Import.Container.find("#importDataFor").empty().append(options).select2(), Import.Container.find('#importStep1 input[name="formId"]').val(data.baseFormId), Import.baseFormId = data.baseFormId, Import.Container.find(".ZPNxtStep").addClass("DN").hide(), Import.Container.find("#importStep1").removeClass("DN").show(), Import.Container.modal("show"); var temp = Import.Container.find("#importFileName").val("").parent().clone(); if (Import.Container.find("#importFileName").parent().remove(), Import.Container.find("#step1Div1").append(temp.find("#importFileName").attr("onchange", "Import.showStep1Div2()").siblings().html(ZPI18N.getString("zp.uploadfile")).parent()), Import.isFromModule ? Import.Container.find("#downloadtemplate").length && Import.Container.find("#downloadtemplate").remove() : (Import.Container.find("#downloadtemplate").length && Import.Container.find("#downloadtemplate").remove(), Import.Container.find("#step1Div1").append("<div id='downloadtemplate' class='MT20'><a class='ZPFfile1' name='downTemp' onclick='Import.loadTemplate()' id='downTemp'>Download sample template for Import</a></div>")), Import.Container.find("#step1Div1").show(), Import.Container.find("#importFileName").parent().show(), Import.Container.find("#step1Div2").hide(), Import.Container.find("#step1Next").hide(), Import.Container.find("#importProgressBar").hide(), Import.isModalCallbackInitialized || (Import.isModalCallbackInitialized = !0, Import.Container.on("hidden.bs.modal", function () { "function" == typeof Import.callbackFunction ? Import.callbackFunction() : Import.isFromModule ? window.location.href = Import.callbackHash : window.location.href = ZPeople.CONTEXT.slice(1, ZPeople.CONTEXT.length) + "#" + ZPView.getHashForViewChange(Import.viewId) })), $("div#licensecount_details").remove(), "P_Employee" === data.tableName && -1 !== Layout.Page.hash.indexOf("#admin/employeerecords")) { $("div#ZPimport").find("div.modal-body").prepend(User.licenseCountElm), $("span#import_employees_added").text(data.employeesAdded), $("span#import_licensecnt_left").text(data.licenseCountLeft); var btn_txt = "#admin/employeerecords/user" === Layout.Page.hash ? ZPI18N.getString("zp.usersadded") : ZPI18N.getString("zp.employeeprofilesadded"), empImportObj = $("div#ZPimport").find("div#employees_addebtntxt"); removeTextNode(empImportObj), empImportObj.prepend(document.createTextNode(btn_txt)) } Import.Container.find("#step1Next").attr("disabled", !1) } else Import.showServerError() }, handleMapping: function (data, params) { if (data.isSuccess) if (Import.Container.find("#paimportdecision").siblings("br").remove(), Import.Container.find("#paimportdecision").remove(), data.isappraisalcheck) { Import.Container.find("#dupRecordCount").html(ZPI18N.getString("zp.addnotapplicableusermsg")); var i, temp = "", ids = [], userdtl = "", userList = []; $.each(data.notapplicableEmps, function (index, data) { -1 === userList.indexOf(data.id) && userList.push(data.id) }); var userDataList = ZPeople.getUserDetailsByIds(userList, !1); $.each(data.notapplicableEmps, function (index, data) { var doj = "", empId = "", desgName = ""; ids.push = data.rownum, userdtl = ZPeople.getUserDetailsByIdInList(data.id, userDataList), "" !== userdtl.dateofJoining && void 0 != userdtl.dateofJoining && void 0 !== userdtl.dateofJoining && (doj = "-&nbsp;" + userdtl.dateofJoining), empId = ", " + data.id, "" !== userdtl.designation && void 0 != userdtl.designation && void 0 !== userdtl.designation && (desgName = " - " + userdtl.designation), temp += '<tr class="ZPLRow"><td id="' + data.rownum + '"><img src="' + userdtl.avatar + '" class="FL"><div class="litxt ML10 MT10 FL">' + userdtl.name + empId + '</div><span class="litxt MT10 FL ML10">' + doj + desgName + "</span></tr>" }), Import.Container.find("#dupRecordCount").after('<br><br><div id="paimportdecision" class="rgt"><div class="FL ML10"><label class="radio"><input type="radio" name="dup_1" value="yes"><span>' + ZPI18N.getString("zp.yes") + '</span></label></div><div class="FL ML10"><label class="radio"><input type="radio" name="dup_1" value="no"><span>' + ZPI18N.getString("zp.no") + "</span></label></div></div><br>"), Import.Container.find("#dbDuplicatesDiv").hide(), Import.Container.find("#fileDuplicatesDiv").show(), Import.Container.find("#importStep2").fadeOut(500), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#step3Next").attr("value", "FILE"), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#fileDuplicatesDiv tbody").empty().append(temp), Import.Container.find("#paimportdecision").find("input[type=radio]:first").prop("checked", !0), Import.Container.find("#importStep3").find(".modal-body #zp_page_loading").remove(), Import.Container.find("#dupRecordCount").parent().show() } else if (data.duplicateCheckMap.isappraisalcheck) { Import.Container.find("#dupRecordCount").html(ZPI18N.getString("zp.selectfinalreviewer")); var i, uniquerw = [], temp = ""; for (temp += '<tr class="ZPLHRow"><th>' + ZPI18N.getString("zp.employee") + '</th><th style="width: 100px;">' + ZPI18N.getString("zp.select") + '</th><th style="width: 80px;">' + ZPI18N.getString("zp.rowno") + "</th></tr>", i = 0; i < data.duplicateCheckMap.appraiseeErec.length; i++) -1 == uniquerw.indexOf(data.duplicateCheckMap.appraiseeErec[i]) && (uniquerw.push(data.duplicateCheckMap.appraiseeErec[i]), temp += '<tr id="' + data.duplicateCheckMap.appraiseeErec[i] + '"class="ZPLRow"><td>' + data.duplicateCheckMap.appraiseeErec[i] + '</td><td><div class="blkRadio"></div></td><td id="rowno_' + data.duplicateCheckMap.appraiseeErec[i] + '"></td></tr>'); for (Import.Container.find("#dbDuplicatesDiv tbody").empty().append(temp), i = 0; i < data.duplicateCheckMap.rownum.length; i++) Import.Container.find("#dbDuplicatesDiv tbody").find("#" + data.duplicateCheckMap.appraiseeErec[i]).find(".blkRadio").append('<label class="radio"><input type="radio" name="dup_' + data.duplicateCheckMap.appraiseeErec[i] + '" value="' + data.duplicateCheckMap.rownum[i] + '"><span></span></label>'), Import.Container.find("#dbDuplicatesDiv tbody").find("#rowno_" + data.duplicateCheckMap.appraiseeErec[i]).append('<span class="DB MT10">' + data.duplicateCheckMap.rownum[i] + "</span>"); Import.Container.find("#fileDuplicatesDiv").hide(), Import.Container.find("#dbDuplicatesDiv").show(), Import.Container.find("#importStep2").fadeOut(500), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#step3Next").attr("value", "FINALROW"), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#dbDuplicatesDiv tbody").find(".ZPLRow").find("input[type=radio]:first").prop("checked", !0), Import.Container.find("#dbDuplicatesDiv tbody").find(".ZPLRow").each(function () { $(this).find(".DB.MT10:first").removeClass("MT10") }), Import.Container.find("#importStep3").find(".modal-body #zp_page_loading").remove(), Import.Container.find("#dupRecordCount").parent().show() } else { data.duplicateCheckMap; if (data.duplicateCheckMap.isSuccess) { var map = data.duplicateCheckMap.duplicateMap; if (data.duplicateCheckMap.isDbDuplicate) { var i = 0, cnt = 0, temp = jQuery("<div />"); temp.append('<tr class="ZPLHRow"><th>' + ZPI18N.getString("zp.existingdata") + "</th><th>" + ZPI18N.getString("zp.duplicateValue") + '</th><th width="130"><label class="radio DIB"><input type="radio" name="ImportDupAllHandle" onclick="Import.SelectBulkDuplicates(this)" value="overwrite"><span class="ML2">' + ZPI18N.getString("zp.Overtwrite") + '</span></label></th><th width="100"><div class="radio"><input type="radio" name="ImportDupAllHandle" onclick="Import.SelectBulkDuplicates(this)" value="skip"checked><label>' + ZPI18N.getString("zp.skip") + '</label></div></th><th width="80">' + ZPI18N.getString("zp.rowno") + "</th></tr>"); var map = data.duplicateCheckMap.duplicateMap, formurl = Layout.UrlConf.getFormActionURL("view"); for (var key in map) if (map.hasOwnProperty(key)) { var dups = (jQuery("<tbody />"), map[key]); for (j = 0; j < dups.length; j++) temp.append('<tr class="ZPLRow"><td><a href="#' + formurl + "-formId:" + Import.baseFormId + "/recordId:" + dups[j].seid + '" target="_blank">' + ZPI18N.getString("zp.viewRecord") + '</a></td><td class="LH18I">' + key + " : " + dups[j].dupValue + '</td><td><div class="radio"><input type="radio" value="' + dups[j].rowNumber + '" isOverwrite="true" name="db_dup-' + cnt + '"><label>' + ZPI18N.getString("zp.Overtwrite") + '</label></div></td><td><div class="radio"><input type="radio" isOverwrite="false" name="db_dup-' + cnt + '" checked><label>' + ZPI18N.getString("zp.skip") + "</label></div></td><td>" + dups[j].rowNumber + "</td></tr>"), cnt++ } Import.Container.find("#fileDuplicatesDiv").hide(), Import.Container.find("#dbDuplicatesDiv").show(), Import.Container.find("#importStep2").fadeOut(500), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#step3Next").attr("value", "DB"), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#dupRecordCount").text(ZPI18N.getString("zp.dupRecordFound", [cnt])), Import.Container.find("#dbDuplicatesDiv tbody").empty().append(temp.children()), Import.Container.find("#step3Next").attr("disabled", !1), Import.Container.find("#importStep3").find(".modal-body #zp_page_loading").remove(), Import.Container.find("#dupRecordCount").parent().show() } else if (data.duplicateCheckMap.isFileDuplicate) { var map = data.duplicateCheckMap.duplicateMap, cnt = 0, k = 1, temp = { cnt: cnt, k: k }, body = jQuery("<tbody />"); if (data.duplicateCheckMap.isTabImport) for (var key in map) map.hasOwnProperty(key) && Import.constructFielDuplicatesBody(map[key], body, temp); else Import.constructFielDuplicatesBody(map, body, temp); k = temp.k, cnt = temp.cnt, Import.Container.find("#importStep2").fadeOut(500), Import.Container.find("#dbDuplicatesDiv").hide(), Import.Container.find("#fileDuplicatesDiv").show(), Import.Container.find("#step3Next").attr("value", "FILE"), Import.Container.find("#importStep3").delay(500).fadeIn(500), Import.Container.find("#dupRecordCount").text(ZPI18N.getString("zp.dupRecordFound", [cnt])), Import.Container.find("#fileDuplicatesDiv tbody").empty().append(body.prepend(jQuery("<tr />", { "class": "ZPLHRow" }).append(jQuery("<th />").append(ZPI18N.getString("zp.fileDuplicateHeader", [Import.HEADERS[data.duplicateCheckMap.cnum] + " ( c : " + data.duplicateCheckMap.cnum + " )"]))).append(jQuery("<th />", { width: "100" }).append(ZPI18N.getString("zp.select"))).append(jQuery("<th />", { width: "80" }).append(ZPI18N.getString("zp.rowno")))).children()), Import.Container.find("#step3Next").attr("disabled", !1), Import.Container.find("#importStep3").find(".modal-body #zp_page_loading").remove(), Import.Container.find("#dupRecordCount").parent().show() } else { var importmap = data.duplicateCheckMap.importmap; if (importmap.isSuccess) { if (Import.Container.find("#noOfAdd").empty().append(importmap.records_added), Import.Container.find("#noOfUpdate").empty().append(importmap.records_updated), Import.Container.find("#noOfSkip").empty().append(importmap.records_skipped), Import.Container.find("#noOfErr").empty().append(importmap.errorsLen), Import.Container.find("#Import_view_record").attr("href", Import.callbackHash), !Import.isFromModule && (importmap.records_added > 0 || importmap.records_updated > 0) && ZPView.setViewPropertie("refreshStatus", !0), importmap.errorsLen <= 0) Import.Container.find("#importErrDiv").hide(); else { var err = importmap.errors, div = jQuery("<div />"); div.append(jQuery("<th />", { "class": "ZPLRow" }).append(jQuery("<td />", { width: "35%" }).append(key)).append(jQuery("<td />").append(err[key]))); for (var key in err) err.hasOwnProperty(key) && div.append(jQuery("<tr />", { "class": "ZPLRow" }).append(jQuery("<td />", { width: "35%" }).append(ZPI18N.getString("zp.row") + " " + ZPeople.decodeTxt(key) + ":")).append(jQuery("<td />").append(err[key]))); Import.Container.find("#importErrDiv tbody").empty().append(div.children()), Import.Container.find("#importErrDiv").show() } Import.Container.find("#importStep2").fadeOut(500), Import.Container.find("#importStep3").fadeOut(500), Import.Container.find("#importStep4").delay(500).fadeIn(500), "performance/settings/import" == Layout.Page.currentmode && Appraisal.Settings.resetfieldVal() } else Import.showServerError() } } } else Import.showServerError() }, constructFielDuplicatesBody: function (map, body, temp) { for (var key in map) if (map.hasOwnProperty(key)) { var tbodytr = jQuery("<tr />", { "class": "ZPLRow" }).append(jQuery("<td />").append(key)), div1 = jQuery("<div />", { "class": "blkRadio" }), td = jQuery("<td />"), dups = map[key]; for (j = 0; j < dups.length; j++) { div1.append(jQuery("<label />", { "class": "radio" }).append(jQuery("<input />", { type: "radio", name: "dup_" + temp.k, value: dups[j].rowNumber })).append(jQuery("<span />"))); var cls = "DB"; 0 != j && (cls += " MT10"), td.append(jQuery("<span />", { "class": cls }).append(dups[j].rowNumber)), temp.cnt++ } div1.find("input:first").prop("checked", !0), temp.k++, body.append(tbodytr.append(jQuery("<td />").append(jQuery("<div />", { "class": "blkRadio" }).append(div1.children()))).append(td)) } }, SelectBulkDuplicates: function (ele) { var cond = '[isoverwrite="'; cond += "overwrite" == $(ele).val() ? 'true"]' : 'false"]', Import.Container.find(cond).prop("checked", !0) }, removeDuplicates: function () { if (Import.Container.find("#step3Next").attr("disabled", !0), "FILE" == Import.Container.find("#step3Next").attr("value")) { Import.Container.find("#importStep3").find(".modal-body").children().hide(), Import.Container.find("#importStep3").find(".modal-body").append(ZPeople.LOADING_HTML); var ids, appraisaldel; Import.Container.find("#paimportdecision").is(":visible") && "#performance/settings/import" == Layout.Page.hash && "no" == Import.Container.find(".radio input:radio:checked").val() ? (ids = Import.Container.find("#fileDuplicatesDiv td").map(function () { return $(this).attr("id") }).get(), appraisaldel = "notappEmpcri") : ids = Import.Container.find("#paimportdecision").is(":visible") && "#performance/settings/import" == Layout.Page.hash && "yes" == Import.Container.find(".radio input:radio:checked").val() ? Import.Container.find("#fileDuplicatesDiv td").map(function () { return $(this).attr("id") }).get() : Import.Container.find("#fileDuplicatesDiv input:radio:checked").map(function () { return this.value }).get(); var params = { mode: "duplicatesRemoval", formId: Import.baseFormId, impformId: Import.impFormId, ids: JSON.stringify(ids), fileType: Import.fileType, filename: Import.fName, type: "file" }; "" != appraisaldel && (params.appraisaldel = appraisaldel), void 0 != Appraisal.imp_configid && (params.importconfigId = Appraisal.imp_configid), void 0 != Appraisal.Settings.importtype && "#performance/settings/import" == Layout.Page.hash && (params.importtype = Appraisal.Settings.importtype), params.workFlowOn = Import.TRIGGER_WORKFLOW, params.approvalOn = Import.TRIGGER_APPROVAL; var importUrl = "#admin/employeerecords/employeeprofile" === Layout.Page.hash ? "/ImportNonUser.zp" : Import.url; ZPeople.Request.send(importUrl, params, Import.handleMapping) } else if ("DB" == Import.Container.find("#step3Next").attr("value")) { Import.Container.find("#importStep3").find(".modal-body").children().hide(), Import.Container.find("#importStep3").find(".modal-body").append(ZPeople.LOADING_HTML); var ids = Import.Container.find('input[isoverwrite="true"]:checked').map(function () { return this.value }).get(), params = { mode: "duplicatesRemoval", formId: Import.baseFormId, impformId: Import.impFormId, ids: JSON.stringify(ids), fileType: Import.fileType, filename: Import.fName, type: "db" }; void 0 != Appraisal.imp_configid && (params.importconfigId = Appraisal.imp_configid), void 0 != Appraisal.Settings.importtype && "#performance/settings/import" == Layout.Page.hash && (params.importtype = Appraisal.Settings.importtype), params.workFlowOn = Import.TRIGGER_WORKFLOW, params.approvalOn = Import.TRIGGER_APPROVAL; var importUrl = "#admin/employeerecords/employeeprofile" === Layout.Page.hash ? "/ImportNonUser.zp" : Import.url; ZPeople.Request.send(importUrl, params, Import.handleMapping) } else if ("FINALROW" == Import.Container.find("#step3Next").attr("value")) { var contnr = ""; contnr = Import.Container.find("#dbDuplicatesDiv").is(":visible") ? "dbDuplicatesDiv" : "fileDuplicatesDiv"; var ids = []; if (Import.Container.find("#" + contnr).find(".blkRadio").find("input[type=radio]").each(function () { 0 == $(this).prop("checked") && ids.push($(this).val()) }), ids.length == Import.Container.find("#" + contnr).find(".blkRadio").find("input[type=radio]").length) return errhtml = '<span class="error-msg">Please select a row</span>', void Import.Container.find("#" + contnr).find(".blkRadio").after(errhtml); var params = { mode: "duplicatesRemoval", formId: Import.baseFormId, impformId: Import.impFormId, ids: JSON.stringify(ids), fileType: Import.fileType, filename: Import.fName, type: "finalrow" }; void 0 != Appraisal.imp_configid && (params.importconfigId = Appraisal.imp_configid), void 0 != Appraisal.Settings.importtype && "#performance/settings/import" == Layout.Page.hash && (params.importtype = Appraisal.Settings.importtype), ZPeople.Request.send(Import.url, params, Import.handleMapping) } }, showStep1Div2: function () { Import.IS_IN_STEP2 = !0; var fName = Import.Container.find("#importFileName").val(); fName = fName.replace("C:\\fakepath\\", ""), Import.Container.find("#step1Div1").hide(), Import.Container.find("#leaveImportHelp").hide(), Import.Container.find("#krausrimportHelp").hide(), Import.Container.find("#kraImportHelp").hide(), Import.Container.find("#step1Div2").show(), Import.Container.find("#step1Next").show(), Import.Container.find("#importdUploadedFName").empty().text(fName), Import.Container.find("#step1Div2").append(Import.Container.find("#importFileName").attr("onchange", "Import.ChangeImportFileName()").siblings().html(ZPI18N.getString("zp.removeandnew")).parent()), Import.baseFormId == Import.Container.find("#importDataFor").val() && (Import.IS_WORKFLOW_CONFIGURED && Import.Container.find("#zp_import_submitwork_flow").show(), Import.IS_APPROVAL_CONFIGURED && Import.Container.find("#zp_import_submitappr_cont").show()) }, onFormChange: function () { Import.IS_IN_STEP2 && Import.baseFormId == Import.Container.find("#importDataFor").val() ? (Import.IS_WORKFLOW_CONFIGURED && Import.Container.find("#zp_import_submitwork_flow").show(), Import.IS_APPROVAL_CONFIGURED && Import.Container.find("#zp_import_submitappr_cont").show()) : (Import.Container.find("#zp_import_submitwork_flow").hide(), Import.Container.find("#zp_import_submitappr_cont").hide()) }, ChangeImportFileName: function () { var fName = Import.Container.find("#importFileName").val(); fName = fName.replace("C:\\fakepath\\", ""), Import.Container.find("#importdUploadedFName").empty().text(fName) }, ImportFileSubmit: function () { Import.Container.find("#step3Next").attr("disabled", !1), Import.Container.find("#step2Next").attr("disabled", !1), Import.Container.find("#step1Next").attr("disabled", !0), Import.PROGRESS_BAR_WIDTH = 0, Import.Container.find("#importFileName").parent().hide(), Import.Container.find("#importProgressBar div").width(Import.PROGRESS_BAR_WIDTH + "%").parent().show(), Import.PROGRESS_BAR_WIDTH++, Import.showProgress(), Import.TRIGGER_WORKFLOW = Import.IS_WORKFLOW_CONFIGURED && Import.Container.find("#zp_import_submitwork_flow").find("input").prop("checked"), Import.TRIGGER_APPROVAL = Import.IS_APPROVAL_CONFIGURED && Import.Container.find("#zp_import_submitappr_cont").find("input").prop("checked"), Import.Container.find('#importStep1 input[name="conreqcsr"]').val(csrfToken), Import.Container.find("#ImportStep1Form").find("input[name='dummy']").remove(), "#admin/employeerecords/employeeprofile" === Layout.Page.hash ? Import.Container.find("#ImportStep1Form").append("<input type='hidden' name='dummy' value=true />") : "#performance/settings/import" == Layout.Page.hash && (Appraisal.Settings.importaddconfig(), Import.Container.find("#ImportStep1Form").find("input[name='paimpcheck']").remove(), "completedone" == Appraisal.Settings.importtype ? (void 0 == Appraisal.importcycle || 1 != Appraisal.importcycle && "new" != Appraisal.importcycle ? Import.Container.find("#ImportStep1Form").append("<input type='hidden' name='paimpcheck' value=false />") : Import.Container.find("#ImportStep1Form").append("<input type='hidden' name='paimpcheck' value=true />"), Import.Container.find("#ImportStep1Form").append("<input type='hidden' name='dummy' value=false />")) : "newone" == Appraisal.Settings.importtype && Import.Container.find("#ImportStep1Form").append("<input type='hidden' name='dummy' value=true />")), Import.Container.find("#ImportStep1Form").submit() }, showProgress: function () { Import.Container.find("#importProgressBar div").width(Import.PROGRESS_BAR_WIDTH + "%"), Import.PROGRESS_BAR_WIDTH += 2, Import.PROGRESS_BAR_WIDTH <= 100 && setTimeout(Import.showProgress, 1) }, showMappingFields: function (data) { if (data.isSuccess) { data.parseResult.recordCount <= 0 && (ZPeople.Message.showFailureMsg(data.errMsg), Import.Container.modal("hide")), Import.impFormId = data.impFormId, Import.fileType = data.fileType; var mappings = data.mappings; Import.HEADERS = data.parseResult.tableHeaders; var selectBuf = "<option value='-1'>-- " + ZPI18N.getString("zp.select") + " --</option>"; for (var i in Import.HEADERS) selectBuf += "<option value='" + i + "'>" + Import.HEADERS[i] + " (c:" + i + ")</option>"; for (Import.Container.find("#importStep2ConfirmMapping").empty().append('<div  class="label-message DN" style="display: block;"><p class="blu" id="importStep2MsgDiv">' + data.parseResult.recordCount + " " + ZPI18N.getString("zp.recordsfound") + "</p></div>"), i = 0; i < data.sections.length; i++) { var secDiv = jQuery("<div />", { "class": "label-main" }).append(jQuery("<div />", { "class": "label-head" }).append(jQuery("<a />", { "data-toggle": "collapse", "data-target": "#importSec-" + data.sections[i].id }).append(data.sections[i].name))), colapseCls = "panel-collapse collapse"; 0 == i && (colapseCls += " in"), Import.Container.find("#importStep2ConfirmMapping").append(secDiv.append(jQuery("<div />", { id: "importSec-" + data.sections[i].id, "class": colapseCls }).append(jQuery("<div />", { "class": "label-body" }).append(jQuery("<form />", { "class": "row" }).append(Import.createMappingFieldsDiv(data.sections[i].col1Fields, mappings, selectBuf, data.firskLkpFcid)).append(Import.createMappingFieldsDiv(data.sections[i].col2Fields, mappings, selectBuf, data.firskLkpFcid)))))) } Import.fName = data.fName, Import.Container.find("#importStep1").fadeOut(500), Import.Container.find("#importStep2").delay(500).fadeIn(500), Import.Container.find("#importStep2 #step2Next").attr("onclick", "Import.validateMapping()"), Import.Container.find("#importStep2 #importStep2ConfMap").removeClass("active"), Import.Container.find("#importStep2 select").select2() } else void 0 != data.errMsg ? (ZPeople.Message.showFailureMsg(data.errMsg), Import.Container.modal("hide")) : Import.showServerError() }, createMappingFieldsDiv: function (col1Fields, mappings, selectBuf) { var col1Contents = jQuery("<div />", { "class": "col-sm-6" }); for (j = 0; j < col1Fields.length; j++) { var field = jQuery("<div />", { "class": "form-group" }).append(jQuery("<label />").append(col1Fields[j].name)).append(jQuery("<select />", { name: col1Fields[j].cname, isMandatory: col1Fields[j].isMandatory }).append(selectBuf)); (col1Fields[j].isMandatory || Import.impFormId == Appraisal.goal_formId && "ASSIGNTO" == col1Fields[j].cname) && (field.find("label").addClass("mantry").prepend("*"), Import.impFormId == Appraisal.goal_formId && "ASSIGNTO" == col1Fields[j].cname && (col1Fields[j].isMandatory = !0)), void 0 != mappings[col1Fields[j].cname] && mappings[col1Fields[j].cname] < Import.HEADERS.length && field.find("select").val(mappings[col1Fields[j].cname]), col1Contents.append(field) } return col1Contents }, validateMapping: function () { Import.Container.find("#importStep2ConfirmMapping").find(".errDiv").remove(); var nonSelected = Import.Container.find('#importStep2ConfirmMapping option:selected[value="-1"]'); Import.Container.find("#importStep2").fadeOut(500), Import.Container.find("#importStep2").delay(500).fadeIn(500), setTimeout(function () { nonSelected.length > 0 ? (Import.Container.find("#importStep2 #importStep2MsgDiv").html(ZPI18N.getString("zp.unmappedFieldMap")), nonSelected.parent().addClass("blubr").closest("[id^='importSec-']").addClass("in")) : Import.Container.find("#importStep2 #importStep2MsgDiv").html(ZPI18N.getString("zp.allFieldsMapped")), Import.Container.find("#importStep2 select").select2(), Import.Container.find("#importStep2 #importStep2ConfMap").addClass("active"), Import.Container.find("#importStep2 #step2Next").attr("onclick", "Import.submitMapping()") }, 500) }, submitMapping: function () { Import.Container.find("#importStep2 #step2Next").attr("disabled", !0), Import.Container.find("#importStep2ConfirmMapping").find(".errDiv").remove(); var selet = Import.Container.find("#importStep2ConfirmMapping option:selected").not('[value="-1"]').parent(); Import.Container.find("#importStep2ConfirmMapping").children().hide(), Import.Container.find("#importStep2ConfirmMapping").append(ZPeople.LOADING_HTML); var mappings = {}; for (i = 0; i < selet.length; i++) mappings[$(selet[i]).attr("name")] = $(selet[i]).val(); var params = { mode: "mappings", formId: Import.baseFormId, impformId: Import.impFormId, mappings: JSON.stringify(mappings), fileType: Import.fileType, filename: Import.fName }; params.workFlowOn = Import.TRIGGER_WORKFLOW, params.approvalOn = Import.TRIGGER_APPROVAL, "#performance/settings/import" == Layout.Page.hash && (void 0 != Appraisal.imp_configid && (params.importconfigId = Appraisal.imp_configid), void 0 != Appraisal.Settings.importtype && (params.importtype = Appraisal.Settings.importtype), "new" == Appraisal.importcycle ? params.importcycle = !0 : params.importcycle = Appraisal.importcycle), void 0 != Appraisal.Settings.importtype && "#performance/settings/import" == Layout.Page.hash && (params.importtype = Appraisal.Settings.importtype), "#admin/employeerecords/employeeprofile" === Layout.Page.hash ? ZPeople.Request.send("/ImportNonUser.zp", params, Import.handleMapping) : ZPeople.Request.send(Import.url, params, Import.handleMapping) }, showServerError: function () { "performance/settings/import" == Layout.Page.currentmode && null != Appraisal.imp_configid && Appraisal.Settings.deletePeriodDetails(Appraisal.imp_configid, !0), ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")), Import.Container.modal("hide") }, loadTemplate: function () { var formObj = $("#zp_import_form").html(""); formObj.append('<input type="hidden" value="' + csrfToken + '" name="conreqcsr"/>'), formObj.append('<input type="hidden" value="template" name="mode"/>'), formObj.append('<input type="hidden" value="' + Import.baseFormId + '" name="formId"/>'), formObj.append('<input type="hidden" value="' + Import.Container.find("#importDataFor").val() + '" name="impformId"/>'), formObj.submit() } }, Importbulk = { url: "/Importbulk.zp", template: '<div id="ZPimportbulk" class="modal popRgtModel in ZPRpanel" data-keyboard="false" role="dialog" aria-hidden="false"><div class="modal-dialog" role="document"><div class="modal-content"><div id="heading" class="modal-header"><h6 id="zp_form_header" class="addPopTitle pull-left M0" value="addEmployee">' + ZPI18N.getString("zp.bulkupload") + '</h6><div class="FR MR25 MT5"><button class="close" type="button" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button></div></div><div id="zp_form_outer_container" class="modal-body"><form id="ImportbulkForm" target="importbulkIframe" enctype="multipart/form-data" role="form" action="ImportbulkUploadFile.zp" method="post" class="form-horizontal pad"><input type="hidden" name="conreqcsr" value=""/><input type="hidden" name="mode" value="uploadFile"/><input type="hidden" name="formId" value=""/><div class="form-group" id="select_dataFor"><label class="control-label col-sm-3 Matry"><sup>*</sup>' + ZPI18N.getString("zp.uploaddatafor") + '</label><div class="col-sm-4"><select id="importDataFor" name="importDataFor"></select></div></div><div class="form-group" id="select_basedOn"><label class="control-label col-sm-3 Matry"><sup>*</sup>' + ZPI18N.getString("zp.uploadbasedon") + '</label><div class="col-sm-4"><select id="importBasedOn" name="importBasedOn"></select></div></div><div class="form-group" id="select_Sep" style="display:none"><label class="control-label col-sm-3 Matry"><sup>*</sup>' + ZPI18N.getString("zp.separator") + ':</label><div class="col-sm-4"><input type="text" class="form-control" id="separator" name="separator"></input></div></div><div id="importbulkExtrasSection"><div id="zp_importbulk_submitwork_flow" class="form-group" style="display:none"><div class="col-sm-6 col-sm-offset-3"><label class="checkbox DIB MR10"><input type="checkbox" name="workFlowOn" checked="checked"><span class="ML2">' + ZPI18N.getString("zp.executeeworkflow") + '</span></label></div></div></div><div class="ZPfileBox text-center PT30 PB30" id="zp_filebox" ><i class="IC-imprt S22 MB8 DIB blu"></i><p class="ZPbold">' + ZPI18N.getString("zp.fileuploaded") + '</p><p class="gry"><small>' + ZPI18N.getString("zp.zipformatsupport") + "</small><br><small>" + ZPI18N.getString("zp.maxfilesize50") + '</small></p><div class="btn btn-primary ZPbtnDefault" id="zp_uploadfilebtn"><span>' + ZPI18N.getString("zp.uploadfile") + '</span><input type="file" accept=".zip" class="ZPFfile" name="zipFile"  id="importFileName"  onchange="Importbulk.showFileName()"/></div><p class="MB20" id="zp_uploadname"><em id ="importdUploadedFName"></em> <span class="IC-rou-tik ML5 filetck"></span></p></div></form><div class="form-group pad"><div id="zp_importbulk_help" class="MT80"><p><b class="DB dgry">' + ZPI18N.getString("zp.note") + ':</b></p><ul class="list-number"><li class="S12 LH20" id="noteTxt">' + ZPI18N.getString("zp.bulkuploadhelp") + '</li></ul></div><div class="ZPImfrm ZPRecList"><div class="PR"><div class="ZPfileBox text-center PT40 PB40 grnbr DN" id="zp_showrecordfilebox"><i class="IC-docs imtIcn DIB blu"></i><p class="MB15"><b>' + ZPI18N.getString("zp.importSuccess", ["<br>"]) + '</b></p><a class="btn btn-default" target="_blank" id="uploadbulk_view_record">' + ZPI18N.getString("zp.viewRecords") + '</a></div><div class="ZPSAdflds infomsg MT20 DN" id="uploadbulkLogs"><ul class="list MT20"><li>' + ZPI18N.getString("zp.noOfAdd") + '<span class="rcount" id="noOfAdd"></span><li>' + ZPI18N.getString("zp.noOfErr") + '<span class="rcount" id="noOfErr"></span></li></ul></div><div class="clearfix"></div><div class="table-responsive" id="uploadbulkErrDiv"><table class="table table-hover"><thead><tr><th colspan="2">' + ZPI18N.getString("zp.errorDetails") + '</th></tr></thead><tbody></tbody></table></div></div></div></div></div><div class="modal-footer text-left"><button id="zp_importbulk_submit" class="btn btn-primary" onclick=Importbulk.importFileSubmit(); type="button">' + ZPI18N.getString("zp.submit") + '</button><button id="zp_form_importbulk_cancel_btn" class="btn btn-default" data-dismiss="modal" type="button">' + ZPI18N.getString("zp.cancel") + '</button></div></div></div><iframe width="0" height="0" frameborder="0" scrolling="auto" name="importbulkIframe" src="/people/html/blank.html" style="display:none"><html><head></head><body></body></html></iframe></div>', formId: "-1", Container: $("#ZPimportbulk"), viewId: "-1", isworkflow_available: !1, callbackhash: null, candidateFields: [], init: function (formId, viewId) { Importbulk.formId = formId, void 0 != viewId && (Importbulk.viewId = viewId, Importbulk.callbackhash = "#" + ZPView.getHashForViewChange(Importbulk.viewId)); var params = { formId: formId, mode: "init" }; ZPeople.Request.send(Importbulk.url, params, Importbulk.initHandler) }, initHandler: function (response) { if (response.isSuccess) { 0 == Importbulk.Container.children().length && ($("#wrapper").append(Importbulk.template), Importbulk.Container = $("#ZPimportbulk")), Importbulk.isworkflow_available = response.isworkflowAvailable; var fieldOptions, uniqueFieldOptions; if (response.fieldArr) { for (i = 0; i < response.fieldArr.length; i++) fieldOptions += "<option value='" + response.fieldArr[i].labelName + "' >" + response.fieldArr[i].displayName + "</option>"; Importbulk.Container.find("#importDataFor").empty().append(fieldOptions).select2() } if (response.uniquefieldArr) { for (i = 0; i < response.uniquefieldArr.length; i++) uniqueFieldOptions += "<option value='" + response.uniquefieldArr[i].labelName + "' >" + response.uniquefieldArr[i].displayName + "</option>"; Importbulk.Container.find("#importBasedOn").empty().append(uniqueFieldOptions).select2() } if (Importbulk.candidateFields = [], "Candidate_Key" == Importbulk.Container.find("#importBasedOn").val()) { var fieldsMsg = ""; if (Importbulk.candidateFields = response.candidateFields, response.candidateFields.length > 0) for (i = 0; i < response.candidateFields.length; i++) 0 != i && (fieldsMsg += ","), fieldsMsg += response.candidateFields[i]; Importbulk.Container.find("#separator").val(","), Importbulk.Container.find("#select_Sep").show(), Importbulk.Container.find("#noteTxt").html(ZPI18N.getString("zp.bulkfileuploaduniquefieldNote", [fieldsMsg])) } else Importbulk.Container.find("#select_Sep").hide(), Importbulk.Container.find("#noteTxt").html(ZPI18N.getString("zp.bulkuploadhelp")); Importbulk.Container.find("#separator").focusout(function () { Importbulk.separatorValChange() }), Importbulk.Container.find("#importBasedOn").on("change", function () { if ("Candidate_Key" == Importbulk.Container.find("#importBasedOn").val()) { var fieldsMsg = "", sep = Importbulk.Container.find("#separator").val(); if (response.candidateFields.length > 0) for (i = 0; i < response.candidateFields.length; i++) 0 != i && (fieldsMsg += sep), fieldsMsg += response.candidateFields[i]; Importbulk.Container.find("#select_Sep").show(), Importbulk.Container.find("#noteTxt").html(ZPI18N.getString("zp.bulkfileuploaduniquefieldNote", [fieldsMsg])) } else Importbulk.Container.find("#select_Sep").hide(), Importbulk.Container.find("#noteTxt").html(ZPI18N.getString("zp.bulkuploadhelp")) }), Importbulk.Container.find("#zp_importbulk_submit").show(), Importbulk.isworkflow_available && (Importbulk.Container.find("#zp_importbulk_submitwork_flow").show(), Importbulk.Container.find("#zp_importbulk_submitwork_flow").find("input").prop("checked", !0)), Importbulk.Container.find("#zp_uploadfilebtn span").html(ZPI18N.getString("zp.uploadfile")), Importbulk.Container.find("#zp_form_importbulk_cancel_btn").text(ZPI18N.getString("zp.cancel")), Importbulk.Container.find("#select_dataFor").show(), Importbulk.Container.find("#zp_uploadname").hide(), Importbulk.Container.find("#select_basedOn").show(), Importbulk.Container.find("#zp_filebox").show(), Importbulk.Container.find("#uploadbulkErrDiv").hide(), Importbulk.Container.find("#uploadbulkLogs").hide(), Importbulk.Container.find("#zp_showrecordfilebox").hide(), Importbulk.Container.modal("show"), Importbulk.Container.on("hidden.bs.modal", function () { Importbulk.Container.find("#zp_importbulk_submit").removeClass("disabled"), Importbulk.Container.find("#importFileName").replaceWith(Importbulk.Container.find("#importFileName").val("").clone(!0)), window.location.href = ZPeople.CONTEXT.slice(1, ZPeople.CONTEXT.length) + "#" + ZPView.getHashForViewChange(Importbulk.viewId) }) } }, showFileName: function () { var fName = Importbulk.Container.find("#importFileName").val(); Importbulk.Container.find("#zp_uploadfilebtn span").html(ZPI18N.getString("zp.removeandnew")), Importbulk.Container.find("#importdUploadedFName").empty().text(fName), Importbulk.Container.find("#zp_uploadname").show() }, importFileSubmit: function () { "" !== Importbulk.Container.find("#importFileName").val() && (Importbulk.Container.find('#ImportbulkForm input[name="formId"]').val(Importbulk.formId), Importbulk.Container.find('#ImportbulkForm input[name="conreqcsr"]').val(csrfToken), Importbulk.Container.find("#zp_importbulk_submit").addClass("disabled"), Importbulk.Container.find("#ImportbulkForm").submit()) }, importFileSubmitHandler: function (data) { if (ZPView.setViewPropertie("refreshStatus", !0), void 0 !== data.error) ZPeople.Message.showFailureMsg(data.error), Importbulk.Container.modal("hide"); else if (data.failedList.length > 0) { var failedList = data.failedList, div = jQuery("<div />"); for (div.append(jQuery("<th />", { "class": "ZPLRow" }).append(jQuery("<td />", { width: "35%" }).append("")).append(jQuery("<td />").append(""))), i = 0; i < failedList.length; i++) div.append(jQuery("<tr />", { "class": "ZPLRow" }).append(jQuery("<td />", { width: "35%" }).append(failedList[i].filename)).append(jQuery("<td />").append(failedList[i].message))); Importbulk.Container.find("#uploadbulk_view_record").attr("href", Importbulk.callbackhash), data.noofsuccess > 0 && ZPView.setViewPropertie("refreshStatus", !0), Importbulk.Container.find("#uploadbulkErrDiv tbody").empty().append(div.children()), Importbulk.Container.find("#noOfAdd").empty().append(data.noofsuccess), Importbulk.Container.find("#noOfErr").empty().append(data.failedList.length), Importbulk.Container.find("#select_Sep").hide(), Importbulk.Container.find("#uploadbulkLogs").show(), Importbulk.Container.find("#uploadbulkErrDiv").show(), Importbulk.Container.find("#zp_showrecordfilebox").show() } else ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.updateCalendarMsg")), Importbulk.Container.modal("hide"); Importbulk.Container.find("#importFileName").empty(), Importbulk.Container.find("#select_dataFor").hide(), Importbulk.Container.find("#select_basedOn").hide(), Importbulk.Container.find("#zp_filebox").hide(), Importbulk.Container.find("#zp_importbulk_submit").hide(), Importbulk.Container.find("#zp_importbulk_submitwork_flow").hide(), Importbulk.Container.find("#zp_importbulk_help").hide(), Importbulk.Container.find("#zp_form_importbulk_cancel_btn").text(ZPI18N.getString("zp.close")), ZPForm.SINGLE_RECORD_DTL = {} }, separatorValChange: function () { if (Importbulk.Container.find("#separator").parent().find("#error_message").remove(), 0 == Importbulk.Container.find("#separator").val().length) { var errHtml = '<div id="error_message" class="ERR MT5">' + ZPI18N.getString("zp.uniqSeparatorErr") + "</div>"; Importbulk.Container.find("#separator").parent().append(errHtml), Importbulk.Container.find("#noteTxt").html("-") } else { var sep = Importbulk.Container.find("#separator").val(), fieldsMsg = ""; for (i = 0; i < Importbulk.candidateFields.length; i++) 0 != i && (fieldsMsg += sep), fieldsMsg += Importbulk.candidateFields[i]; Importbulk.Container.find("#select_Sep").show(), Importbulk.Container.find("#noteTxt").html(ZPI18N.getString("zp.bulkfileuploaduniquefieldNote", [fieldsMsg])) } } }, Profile = {}; Profile = { PROFILE_COMPONENTS: {}, CURR_COMPONENT: {}, COMPONENT: null, init: function () { var editMode = !1, recordId = erecno; if (void 0 !== Layout.Page.urlparam.id ? recordId = Layout.Page.urlparam.id : void 0 !== Layout.Page.urlparam.editId && (recordId = Layout.Page.urlparam.editId, editMode = !0), Profile.populateUserInfoCont(), Layout.Page.container.find("#zp_selfservice_profilepage").addClass("DN"), void 0 === Profile.PROFILE_COMPONENTS[recordId] && (Profile.PROFILE_COMPONENTS[recordId] = { isRefresh: !0 }), Profile.COMPONENT = Profile.PROFILE_COMPONENTS[recordId], Profile.setUserComponent(recordId), editMode) Layout.Page.container.find("#zp_profile_print, #zp_profile_edit").addClass("DN"); else { var permission = ZPForm.Permission.getEditPerm(), allowedpersons = ZPForm.Permission.isAllowed([Layout.Page.urlparam.id], permission); isadmin || allowedpersons ? Layout.Page.container.find("#zp_profile_edit").removeClass("DN") : Layout.Page.container.find("#zp_profile_edit").addClass("DN"), void 0 === Layout.Page.urlparam.id || erecno === Layout.Page.urlparam.id || isadmin ? Layout.Page.container.find("#zp_profile_print").removeClass("DN") : Layout.Page.container.find("#zp_profile_print").addClass("DN") } Layout.Page.container.find("#zp_profilergt_container").empty(), Profile.CURR_COMPONENT = { formId: ZPeople.EMP_FORMID, recordId: recordId, isPageMode: !0, isProfile: !0, formMode: editMode ? "EDIT" : "VIEW", containerId: "zp_selfservice_profilepage", callback: Profile.get, loadingContainer: "zp_selfservice_page_container", onloadProfileCallback: Profile.setFavorites }, ZPForm.load(Profile.CURR_COMPONENT), editMode ? Layout.Page.container.find("#zp_profilergt_container").hide() : Layout.Page.container.find("#zp_profilergt_container").show() }, get: function (erec, mode) { "edit" === mode ? (erec = Layout.Page.urlparam.id, void 0 === erec && (erec = erecno), window.location.href = "#selfservice/profile-editId:" + erec) : (void 0 === erec && (erec = void 0 !== Layout.Page.urlparam.editId ? Layout.Page.urlparam.editId : void 0 !== Layout.Page.urlparam.id ? Layout.Page.urlparam.id : erecno), window.location.href = "#selfservice/profile-id:" + erec) }, setUserComponent: function (usererec) { var userDtl = ZPeople.CURR_USER; usererec !== erecno && (userDtl = ZPeople.getUserDetailsById(usererec)); Layout.Page.pageContWrapper.find("#zp_profile_image"); Layout.Page.pageContWrapper.find("#zp_profile_image").attr("src", userDtl.avatar).attr("empid", userDtl.usererec), Layout.Page.pageContWrapper.find("#zp_profile_username").html(userDtl.name + ",&nbsp;" + userDtl.empid); var chatStatus = ZPUserList.getChatStatusClass(userDtl.id); "NOT_IN_CONTACT" !== chatStatus || "NO_CLASS" === chatStatus ? Layout.Page.pageContWrapper.find("#zp_profile_chatstatus").attr("class", chatStatus).show() : Layout.Page.pageContWrapper.find("#zp_profile_chatstatus").hide(); var contObj = Layout.Page.pageContWrapper.find("#zp_profile_deptanddesi").empty(); if (void 0 !== userDtl.designation && "" !== userDtl.designation.trim() || void 0 !== userDtl.deptName && "" !== userDtl.deptName.trim()) { var isDesi = !1; void 0 !== userDtl.designation && "" !== userDtl.designation.trim() && (contObj.append("<strong>" + userDtl.designation + "</strong>"), isDesi = !0), void 0 !== userDtl.deptName && "" !== userDtl.deptName.trim() && (isDesi && contObj.append("&nbsp;-&nbsp;"), "true" === ZPeople.isDepartmentDatasAllowed ? contObj.append('<a href="javascript:void(0);" onclick="ZPUserList.showDeptById(' + userDtl.deptId + ')">' + userDtl.deptName + "</a>") : contObj.append("<a href='javascript:;'>" + userDtl.deptName + "</a>")), contObj.show() } else contObj.hide(); ZPUtil.Validation.isEmpty(userDtl.email) ? Layout.Page.pageContWrapper.find("#zp_profile_email").hide() : Layout.Page.pageContWrapper.find("#zp_profile_email").html("<a href='mailto:" + userDtl.email + "'>" + userDtl.email + "</a>").show(), ZPUtil.Validation.isEmpty(userDtl.extension) ? Layout.Page.pageContWrapper.find("#zp_profile_extn").hide() : Layout.Page.pageContWrapper.find("#zp_profile_extn").html('<div class="IC-exten S18 FL gry MR10"></div>' + userDtl.extension).show(), ZPUtil.Validation.isEmpty(userDtl.workLoc) ? Layout.Page.pageContWrapper.find("#zp_profile_worklocation").hide() : Layout.Page.pageContWrapper.find("#zp_profile_worklocation").html('<div class="IC-chair S18 FL gry MR10"></div>' + userDtl.workLoc).show(), ZPUtil.Validation.isEmpty(userDtl.mobile) ? Layout.Page.pageContWrapper.find("#zp_profile_mobile").hide() : Layout.Page.pageContWrapper.find("#zp_profile_mobile").html('<div class="IC-mobi S18 FL gry MR10"></div>' + userDtl.mobile).show(); var profRgtTopCont = Layout.Page.pageContWrapper.find("#zp_profilergt_container_repto").empty(); if (!ZPUtil.Validation.isEmpty(userDtl.reportingTo)) { var userDtl = ZPeople.getUserDetailsById(userDtl.reportingTo); if (void 0 !== userDtl && "true" === userDtl.isLogEnb && "Unknown" !== userDtl.name) { profRgtTopCont.append("<h6>" + ZPI18N.getString("zp.reportingto") + "</h6>"); var chatStatus = ZPUserList.getChatStatusClass(userDtl.id), userCont = $('<div class="ZPrto MB0I CP"><div class="FL PR"><img src="' + userDtl.avatar + '"><div class="' + chatStatus + '"></div></div><div class="det"><span>' + userDtl.name + "</span>" + (ZPUtil.Validation.isEmpty(userDtl.email) ? "" : '<a href="mailto:' + userDtl.email + '">' + userDtl.email + "</a>") + '</div><div class="bak DN"><div class="IC-back-ar-2 gry"></div></div></div>'); profRgtTopCont.append(userCont), userCont.click(function () { void 0 === ZPForm.CURRFORM_PARAM.profileCallback ? Profile.get(userDtl.usererec) : ZPForm.CURRFORM_PARAM.profileCallback(ZPForm.CURRFORM_PARAM.formId, userDtl.usererec) }) } } Layout.Page.pageContWrapper.find("#selfservice_userinfo").removeClass("DN") }, setFavorites: function () { var favObj = Layout.Page.pageContWrapper.find("#zp_profile_favorite"); favObj.attr("title"), favObj.attr("name"), favObj.attr("erecno"), favObj.removeClass("org gry"); var userDtl = ZPForm.getSingleRecord().record; ZPForm.CURRFORM_PARAM.recordId === erecno ? favObj.hide() : userDtl.isFavorites ? (favObj.attr("title", ZPI18N.getString("zp.unmarkfromfavorites")), favObj.attr("name", "removemyFavorites"), favObj.attr("erecno", ZPForm.CURRFORM_PARAM.recordId), favObj.addClass("org"), favObj.show()) : (favObj.attr("title", ZPI18N.getString("zp.markasfavorite")), favObj.attr("name", "markasFav"), favObj.attr("erecno", ZPForm.CURRFORM_PARAM.recordId), favObj.addClass("gry"), favObj.show()) }, favoriteSuccessCallback: function (resultData, params) { var successMsg, favObj = $("#zp_profile_favorite"), objClass = favObj.attr("class"); void 0 != objClass && -1 == objClass.search("gry") ? (ZPForm.getSingleRecord().record.isFavorites = !1, favObj.attr("title", ZPI18N.getString("zp.markasfavorite")), favObj.attr("name", "markasFav"), favObj.attr("erecno", params.erecnos), favObj.addClass("gry"), favObj.removeClass("org"), successMsg = "zp.removedfromfavoritemsgsuccess") : (ZPForm.getSingleRecord().record.isFavorites = !0, favObj.attr("title", ZPI18N.getString("zp.unmarkfromfavorites")), favObj.attr("name", "removemyFavorites"), favObj.attr("erecno", params.erecnos), favObj.addClass("org"), favObj.removeClass("gry"), successMsg = "zp.addedasfavoritemsgsuccess"), ZPeople.Message.showSuccessMsg(ZPI18N.getString(successMsg)) }, populateUserInfoCont: function () { var userDetails = '<div class="ZPSSlft"><div class="FL MR20 PR optZoom"><i class="IC-lens"></i><img id="zp_profile_image" class="ZPSSimg" src="" empid=""><div id="zp_profile_chatstatus" class=""></div><i id="zp_profile_favorite" class="OnFav IC-star" onclick="ZPUserList.favouriteAction(this, Profile.favoriteSuccessCallback)"></i></div>'; userDetails += '<div class="ZPUinf"><b id="zp_profile_username"></b><span id="zp_profile_deptanddesi"></span><span id="zp_profile_email"></span></div>', userDetails += '<div class="ZPUinf"><div class="ZPSSinfo" id="zp_profile_extn"></div>', userDetails += '<div class="ZPSSinfo MT10" id="zp_profile_worklocation"></div>', userDetails += '<div class="ZPSSinfo MT10" id="zp_profile_mobile"></div></div></div><div class="ZPSSrgt" id="zp_profilergt_container_repto"></div>', $("#selfservice_userinfo").empty().append(userDetails) }, loadTree: function (treeData) { var profRgtCont = Layout.Page.container.find("#zp_profilergt_container").empty(); if (treeData.noTree) profRgtCont.addClass("DN"); else { if (void 0 !== treeData.drRepList && treeData.drRepList.length > 0 && (profRgtCont.append("<h6>" + ZPI18N.getString("zp.directreports") + "</h6>"), profRgtCont.append("<div class='Dmems' id='zp_profilergt_directrep'></div>"), Profile.constructUserList(treeData.drRepList, "zp_profilergt_directrep")), void 0 !== treeData.depMemList && treeData.depMemList.length > 0) { var depMemList = treeData.depMemList; ZPForm.isRefresh() && (depMemList = ZPUtil.mergeArrays(treeData.drRepList, treeData.depMemList, !0, !0), void 0 !== treeData.repoList && treeData.repoList.length > 0 && -1 === depMemList.indexOf(treeData.repoList[0]) && depMemList.unshift(treeData.repoList[0])), profRgtCont.append("<h6>" + ZPI18N.getString("zp.deptmem") + "</h6>"), profRgtCont.append("<div class='Dmems' id='zp_profilergt_depmem'></div>"), Profile.constructUserList(depMemList, "zp_profilergt_depmem") } profRgtCont.removeClass("DN") } }, constructUserList: function (list, id) { var rowCnt = 0, listObj = Layout.Page.container.find("#" + id).empty().append($("<ul></ul>")), userDataDtl = ZPeople.getUserDetailsByIds(list); $.each(userDataDtl, function () { ("true" === this.isLogEnb || "true" === this.isNonUser) && (0 !== i && i % 5 === 0 && (rowCnt++, listObj.append($('<ul class="' + (rowCnt > 1 ? "DN" : "") + '"></ul>'))), 1 === rowCnt && i % 5 === 4 ? listObj.find("ul:last").append('<li class="mor" onclick="Profile.showMoreUsers(this);"><div class="IC-more gry"></div></li><li class="DN" id="' + this.usererec + '" title="' + this.name + '"><img src="' + this.avatar + '"></li>') : listObj.find("ul:last").append('<li id="' + this.usererec + '" title="' + this.name + '"><img src="' + this.avatar + '"></li>')) }), listObj.find("li").click(function () { var erecno = $(this).attr("id"); void 0 === ZPForm.CURRFORM_PARAM.profileCallback ? Profile.get(erecno) : ZPForm.CURRFORM_PARAM.profileCallback(ZPForm.CURRFORM_PARAM.formId, erecno) }) }, showMoreUsers: function (Obj) { $(Obj).siblings("li:hidden").removeClass("DN"), $(Obj).parent().siblings("ul:hidden").removeClass("DN"), $(Obj).remove() }, getRelatedFormsData: function (Obj) { var isCollapse = $(this).find("#zp_profile_expandcola").hasClass("IC-mini"); if ($(this).find("#zp_profile_expandcola").toggleClass("IC-expnd IC-mini"), isCollapse) $(this).next().slideUp(); else { $(this).parent().find("[id^=zp_prof_relform_]:visible").slideUp().prev().find("#zp_profile_expandcola").addClass("IC-expnd").removeClass("IC-mini"), $(this).next().slideDown(); var data = $(this).data(); if (0 === $(this).siblings("#zp_prof_relform_" + data.formId).length) { var html = $('<div class="ZPSScont" id="zp_prof_relform_' + data.formId + '"><div class="table-responsive" id="zp_views_container"><table class="table table-hover Vlis" id="zp_views_records_table"><thead id="zp_views_recordheader"></thead></table></div></div>'); $(this).after(html) } var relatedRecFor = erecno; void 0 != User.currentErecNo && null != User.currentErecNo && (relatedRecFor = User.currentErecNo), ZPView.init({ formId: data.formId, viewId: data.viewId, isrelatedform: !0, relformfcid: data.formCompid, relformconfigformid: ZPForm.CURRFORM_PARAM.formId, relformrecid: ZPForm.CURRFORM_PARAM.recordId, linkedFcid: data.linked_fcid, isEmbed: !0, container: "zp_prof_relform_" + data.formId, uniqueKey: Layout.Page.urlmode + "_" + relatedRecFor, recViewCallback: Profile.showRelatedRecordByMode, recEditCallback: Profile.showRelatedRecordByMode }) } }, showRelatedRecordByMode: function (formId, recordId, mode, formdisplayName, extraParam) { var loadJson = { formId: formId, recordId: recordId, formMode: void 0 !== mode ? mode : "VIEW", formdisplayName: formdisplayName, disableUrlTrack: !0, editCallback: Profile.showRelatedRecord, viewRefresh: !0, parent: Profile.CURR_COMPONENT }; void 0 !== extraParam && (extraParam.hasOwnProperty("createFldFunctions") ? (loadJson.createFldFunctions = extraParam.createFldFunctions, loadJson.onloadCallback = Timetracker.forms.formOnLoadCallback) : extraParam.hasOwnProperty("fieldFormat") && (loadJson.fieldFormat = extraParam.fieldFormat)), ZPForm.load(loadJson) }, showRelatedRecord: function (formId, recordId) { var mode = "EDIT"; void 0 === recordId && (mode = "ADD"), Profile.showRelatedRecordByMode(formId, recordId, mode) } }; var TimePicker = { defaults: { timeFormat: "hh:mm a", startTime: null, endTime: null, interval: 30, defaultTime: null, callback: null }, obj: "", init: function (ele, options) { TimePicker.obj = ele, TimePicker.defaults = $.extend({}, TimePicker.defaults, options), this.constructTimePicker() }, constructTimePicker: function () { if (!(Layout.Page.container.find(TimePicker.obj).parent().find("#timeoptions").length > 0)) { var timePickerHtml = '<ul class="dropdown-menu" id="timeoptions">', defaultdate = new Date(0, 0, 0, 0, 0, 0); null != TimePicker.defaults.startTime && (defaultdate = TimePicker.defaults.startTime); var startTime = this.normalize(defaultdate), endTime = new Date(startTime.getTime() + 864e5); for (null != TimePicker.defaults.endTime && (endTime = this.normalize(TimePicker.defaults.endTime)) ; endTime > startTime;) timePickerHtml += '<li><a onclick="' + TimePicker.defaults.callback + '" value="' + this.formatTime(TimePicker.defaults.timeFormat, startTime) + '">' + this.formatTime(TimePicker.defaults.timeFormat, startTime) + "</a></li>", startTime = new Date(startTime.getTime() + 60 * TimePicker.defaults.interval * 1e3); timePickerHtml += "</ul>", Layout.Page.container.find(TimePicker.obj).parent().append(timePickerHtml) } }, setTime: function (ele) { var timeStr = Layout.Page.container.find(ele).val(); timeStr = this.getTime(timeStr), Layout.Page.container.find(ele).val(timeStr) }, getTime: function (timeStr) { var time; return timeStr.length > 0 && (time = this.normalize(timeStr), time = this.formatTime(TimePicker.defaults.timeFormat, time)), time }, normalize: function () { if (1 === arguments.length) { var date = arguments[0]; return "string" == typeof date && (date = this.parseTime(date)), new Date(0, 0, 0, date.getHours(), date.getMinutes(), date.getSeconds()) } return 3 === arguments.length ? new Date(0, 0, 0, arguments[0], arguments[1], arguments[2]) : 2 === arguments.length ? new Date(0, 0, 0, arguments[0], arguments[1], 0) : new Date(0, 0, 0) }, formatTime: function (format, time) { var hours = time.getHours(), hours12 = hours % 12, minutes = time.getMinutes(), seconds = time.getSeconds(); replacements = { hh: this.timeAlign((0 === hours12 ? 12 : hours12).toString(), "0", 2), HH: this.timeAlign(hours.toString(), "0", 2), mm: this.timeAlign(minutes.toString(), "0", 2), ss: this.timeAlign(seconds.toString(), "0", 2), h: 0 === hours12 ? 12 : hours12, H: hours, m: minutes, s: seconds, a: hours > 11 ? "PM" : "AM" }, str = format, k = ""; for (k in replacements) replacements.hasOwnProperty(k) && (str = str.replace(new RegExp(k, "g"), replacements[k])); return str }, timeAlign: function (str, ch, length) { return str.length != length && (str = ch + str), str }, parseTime: function (str) { var patterns = [[/^(\d+)$/, "$1"], [/^:(\d)$/, "$10"], [/^:(\d+)/, "$1"], [/^(\d):([7-9])$/, "0$10$2"], [/^(\d):(\d\d)$/, "$1$2"], [/^(\d):(\d{1,})$/, "0$1$20"], [/^(\d\d):([7-9])$/, "$10$2"], [/^(\d\d):(\d)$/, "$1$20"], [/^(\d\d):(\d*)$/, "$1$2"], [/^(\d{3,}):(\d)$/, "$10$2"], [/^(\d{3,}):(\d{2,})/, "$1$2"], [/^(\d):(\d):(\d)$/, "0$10$20$3"], [/^(\d{1,2}):(\d):(\d\d)/, "$10$2$3"]], length = patterns.length, time = this.normalize(new Date), am = !1, pm = !1, h = !1, m = !1, s = !1; if ("undefined" == typeof str || !str.toLowerCase) return null; str = str.toUpperCase(), am = /A/.test(str), pm = am ? !1 : /P/.test(str), str = str.replace(/[^0-9:]/g, "").replace(/:+/g, ":"); for (var k = 0; length > k; k += 1) if (patterns[k][0].test(str)) { str = str.replace(patterns[k][0], patterns[k][1]); break } return str = str.replace(/:/g, ""), 1 === str.length ? h = str : 2 === str.length ? h = str : 3 === str.length || 5 === str.length ? (h = str.substr(0, 1), m = str.substr(1, 2), s = str.substr(3, 2)) : (4 === str.length || str.length > 5) && (h = str.substr(0, 2), m = str.substr(2, 2), s = str.substr(4, 2)), str.length > 0 && str.length < 5 && (str.length < 3 && (m = 0), s = 0), h === !1 || m === !1 || s === !1 ? !1 : (h = parseInt(h), m = parseInt(m), s = parseInt(s), am && 12 === h ? h = 0 : pm && 12 > h && (h += 12), h > 24 ? str.length >= 6 ? this.parseTime(str.substr(0, 5)) : this.parseTime(str + "0" + (am ? "A" : "") + (pm ? "P" : "")) : (time.setHours(h, m, s), time)) } };